#!/usr/bin/env python3
"""üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä—â–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –≠—Ç–∞–ø 1.4"""

import sys
import os
import json
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Tuple, Optional
from dataclasses import dataclass
import importlib.util


@dataclass
class IntegrationCheck:
    """‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    name: str
    description: str
    status: bool
    details: str
    severity: str  # critical, warning, info
    recommendations: List[str]


class IntegrationChecker:
    """üîç –ü—Ä–æ–≤–µ—Ä—â–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, root_path: str = "."):
        self.root_path = Path(root_path)
        self.checks: List[IntegrationCheck] = []
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.critical_files = [
            'config.py', 'main.py', 'api_client.py', 
            'position_manager.py', 'risk_management.py'
        ]
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
        self.required_modules = [
            'requests', 'json', 'time', 'logging', 
            'decimal', 'datetime', 'pathlib'
        ]
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (–¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
        self.optional_modules = [
            'pandas', 'numpy', 'matplotlib', 'seaborn'
        ]
    
    def run_comprehensive_check(self) -> Dict[str, Any]:
        """üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        print("üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.checks.clear()
        
        # –ì—Ä—É–ø–ø—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
        self._check_environment()
        self._check_file_structure()
        self._check_python_modules()
        self._check_configuration()
        self._check_legacy_compatibility()
        self._check_new_architecture_readiness()
        self._check_dependencies_integrity()
        self._check_api_integration()
        self._check_data_migration_readiness()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self._generate_integration_report()
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return report
    
    def _check_environment(self) -> None:
        """üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python"""
        # –í–µ—Ä—Å–∏—è Python
        python_version = sys.version_info
        if python_version >= (3, 8):
            self._add_check(
                "python_version", "–í–µ—Ä—Å–∏—è Python",
                True, f"Python {python_version.major}.{python_version.minor}.{python_version.micro}",
                "info", []
            )
        else:
            self._add_check(
                "python_version", "–í–µ—Ä—Å–∏—è Python",
                False, f"Python {python_version.major}.{python_version.minor} < 3.8",
                "critical", ["–û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.8+"]
            )
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        try:
            test_file = self.root_path / "test_write_access.tmp"
            test_file.write_text("test")
            test_file.unlink()
            
            self._add_check(
                "write_permissions", "–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏",
                True, "–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å—Ç—å",
                "info", []
            )
        except Exception as e:
            self._add_check(
                "write_permissions", "–ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏",
                False, f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏: {e}",
                "critical", ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"]
            )
        
        # –î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        try:
            stat = os.statvfs(self.root_path)
            free_space_gb = (stat.f_frsize * stat.f_bavail) / (1024**3)
            
            if free_space_gb > 1.0:
                self._add_check(
                    "disk_space", "–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
                    True, f"–î–æ—Å—Ç—É–ø–Ω–æ {free_space_gb:.1f} GB",
                    "info", []
                )
            else:
                self._add_check(
                    "disk_space", "–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
                    False, f"–ú–∞–ª–æ –º–µ—Å—Ç–∞: {free_space_gb:.1f} GB",
                    "warning", ["–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >1GB)"]
                )
        except Exception:
            # –ù–∞ Windows –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å statvfs
            self._add_check(
                "disk_space", "–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
                True, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (Windows?)",
                "info", []
            )
    
    def _check_file_structure(self) -> None:
        """üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û
        missing_critical = []
        for file_name in self.critical_files:
            file_path = self.root_path / file_name
            if not file_path.exists():
                missing_critical.append(file_name)
        
        if not missing_critical:
            self._add_check(
                "critical_files", "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã",
                True, f"–í—Å–µ {len(self.critical_files)} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã",
                "info", []
            )
        else:
            self._add_check(
                "critical_files", "–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã",
                False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_critical)}",
                "critical", [f"–°–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_critical)}"]
            )
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        new_arch_dirs = [
            "src", "src/core", "src/domain", "src/application", 
            "src/infrastructure", "src/presentation"
        ]
        
        existing_dirs = []
        missing_dirs = []
        
        for dir_name in new_arch_dirs:
            dir_path = self.root_path / dir_name
            if dir_path.exists():
                existing_dirs.append(dir_name)
            else:
                missing_dirs.append(dir_name)
        
        if len(existing_dirs) >= len(new_arch_dirs) // 2:
            self._add_check(
                "new_architecture_structure", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                True, f"–ù–∞–π–¥–µ–Ω–æ {len(existing_dirs)} –∏–∑ {len(new_arch_dirs)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π",
                "info", []
            )
        else:
            self._add_check(
                "new_architecture_structure", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
                False, f"–ù–µ–¥–æ—Å—Ç–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {', '.join(missing_dirs)}",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: mkdir -p " + " ".join(missing_dirs)]
            )
        
        # Backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        backup_dir = self.root_path / "backup_before_migration"
        if backup_dir.exists():
            backup_files = list(backup_dir.glob("*.py"))
            self._add_check(
                "backup_exists", "Backup —Ñ–∞–π–ª—ã",
                True, f"–ù–∞–π–¥–µ–Ω–æ {len(backup_files)} backup —Ñ–∞–π–ª–æ–≤",
                "info", []
            )
        else:
            self._add_check(
                "backup_exists", "Backup —Ñ–∞–π–ª—ã",
                False, "Backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"]
            )
    
    def _check_python_modules(self) -> None:
        """üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π"""
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏
        missing_critical = []
        for module_name in self.required_modules:
            if not self._check_module_available(module_name):
                missing_critical.append(module_name)
        
        if not missing_critical:
            self._add_check(
                "required_modules", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
                True, f"–í—Å–µ {len(self.required_modules)} –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã",
                "info", []
            )
        else:
            self._add_check(
                "required_modules", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
                False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_critical)}",
                "critical", [f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª–∏: pip install {' '.join(missing_critical)}"]
            )
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        missing_optional = []
        for module_name in self.optional_modules:
            if not self._check_module_available(module_name):
                missing_optional.append(module_name)
        
        available_optional = len(self.optional_modules) - len(missing_optional)
        if available_optional >= len(self.optional_modules) // 2:
            self._add_check(
                "optional_modules", "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
                True, f"–î–æ—Å—Ç—É–ø–Ω–æ {available_optional} –∏–∑ {len(self.optional_modules)}",
                "info", []
            )
        else:
            self._add_check(
                "optional_modules", "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏",
                False, f"–ú–∞–ª–æ –º–æ–¥—É–ª–µ–π: {available_optional}/{len(self.optional_modules)}",
                "warning", [f"–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: pip install {' '.join(missing_optional)}"]
            )
    
    def _check_configuration(self) -> None:
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_file = self.root_path / ".env"
        if env_file.exists():
            try:
                env_content = env_file.read_text()
                has_api_key = "EXMO_API_KEY" in env_content
                has_api_secret = "EXMO_API_SECRET" in env_content
                
                if has_api_key and has_api_secret:
                    self._add_check(
                        "env_config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env",
                        True, "API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                        "info", []
                    )
                else:
                    missing = []
                    if not has_api_key:
                        missing.append("EXMO_API_KEY")
                    if not has_api_secret:
                        missing.append("EXMO_API_SECRET")
                    
                    self._add_check(
                        "env_config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env",
                        False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}",
                        "critical", ["–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª"]
                    )
            except Exception as e:
                self._add_check(
                    "env_config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env",
                    False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}",
                    "warning", ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç .env —Ñ–∞–π–ª–∞"]
                )
        else:
            self._add_check(
                "env_config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env",
                False, ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "critical", ["–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏"]
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ config.py
        config_file = self.root_path / "config.py"
        if config_file.exists():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                expected_items = ['TradingConfig', 'API_KEY', 'API_SECRET']
                config_content = config_file.read_text()
                
                found_items = [item for item in expected_items if item in config_content]
                
                if len(found_items) >= 1:
                    self._add_check(
                        "config_file", "–§–∞–π–ª config.py",
                        True, f"–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(found_items)}",
                        "info", []
                    )
                else:
                    self._add_check(
                        "config_file", "–§–∞–π–ª config.py",
                        False, f"–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {', '.join(found_items)}",
                        "warning", ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É config.py"]
                    )
                    
            except Exception as e:
                self._add_check(
                    "config_file", "–§–∞–π–ª config.py",
                    False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}",
                    "warning", ["–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ config.py"]
                )
        else:
            self._add_check(
                "config_file", "–§–∞–π–ª config.py",
                False, "config.py –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "critical", ["–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.py —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"]
            )
    
    def _check_legacy_compatibility(self) -> None:
        """üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ legacy —Ñ–∞–π–ª—ã
        legacy_files = [
            'improved_bot.py', 'hybrid_bot.py', 'bot.py',
            'trade_orchestrator.py', 'strategies.py'
        ]
        
        found_legacy = []
        for file_name in legacy_files:
            if (self.root_path / file_name).exists():
                found_legacy.append(file_name)
        
        if found_legacy:
            self._add_check(
                "legacy_files", "Legacy —Ñ–∞–π–ª—ã",
                True, f"–ù–∞–π–¥–µ–Ω–æ {len(found_legacy)} legacy —Ñ–∞–π–ª–æ–≤",
                "info", []
            )
        else:
            self._add_check(
                "legacy_files", "Legacy —Ñ–∞–π–ª—ã",
                False, "Legacy —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "critical", ["–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ legacy —Ñ–∞–π–ª—ã –∏–∑ backup –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"]
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
        adapters_file = self.root_path / "src" / "adapters.py"
        if adapters_file.exists():
            self._add_check(
                "adapters", "–ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                True, "–§–∞–π–ª –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω",
                "info", []
            )
        else:
            self._add_check(
                "adapters", "–ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                False, "–ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º"]
            )
    
    def _check_new_architecture_readiness(self) -> None:
        """üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        
        # Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        core_files = [
            "src/core/interfaces.py",
            "src/core/models.py", 
            "src/core/exceptions.py"
        ]
        
        existing_core = []
        for file_path in core_files:
            if (self.root_path / file_path).exists():
                existing_core.append(file_path)
        
        if len(existing_core) >= 1:
            self._add_check(
                "core_components", "Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                True, f"–ù–∞–π–¥–µ–Ω–æ {len(existing_core)} –∏–∑ {len(core_files)} —Ñ–∞–π–ª–æ–≤",
                "info", []
            )
        else:
            self._add_check(
                "core_components", "Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
                False, f"–ù–µ–¥–æ—Å—Ç–∞–µ—Ç core —Ñ–∞–π–ª–æ–≤: {len(core_files)}",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ core —Ñ–∞–π–ª—ã (interfaces, models, exceptions)"]
            )
        
        # DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        di_file = self.root_path / "src" / "core" / "di_container.py"
        if di_file.exists():
            self._add_check(
                "dependency_injection", "Dependency Injection",
                True, "DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω",
                "info", []
            )
        else:
            self._add_check(
                "dependency_injection", "Dependency Injection",
                False, "DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"]
            )
    
    def _check_dependencies_integrity(self) -> None:
        """üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dep_analysis_file = self.root_path / "dependency_analysis.json"
        if dep_analysis_file.exists():
            try:
                with open(dep_analysis_file, 'r', encoding='utf-8') as f:
                    analysis = json.load(f)
                
                cycles_count = len(analysis.get('cycles', []))
                components_count = analysis.get('metrics', {}).get('total_components', 0)
                
                if cycles_count == 0:
                    self._add_check(
                        "dependency_cycles", "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                        True, "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        "info", []
                    )
                elif cycles_count <= 3:
                    self._add_check(
                        "dependency_cycles", "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                        False, f"–ù–∞–π–¥–µ–Ω–æ {cycles_count} —Ü–∏–∫–ª–æ–≤",
                        "warning", ["–†–∞–∑—Ä–µ—à–∏—Ç–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"]
                    )
                else:
                    self._add_check(
                        "dependency_cycles", "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                        False, f"–ú–Ω–æ–≥–æ —Ü–∏–∫–ª–æ–≤: {cycles_count}",
                        "critical", ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"]
                    )
                
                if components_count > 0:
                    self._add_check(
                        "dependency_analysis", "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                        True, f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {components_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                        "info", []
                    )
                
            except Exception as e:
                self._add_check(
                    "dependency_analysis", "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                    False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}",
                    "warning", ["–ó–∞–ø—É—Å—Ç–∏—Ç–µ dependency_analyzer.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"]
                )
        else:
            self._add_check(
                "dependency_analysis", "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                False, "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è",
                "warning", ["–ó–∞–ø—É—Å—Ç–∏—Ç–µ dependency_analyzer.py –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"]
            )
    
    def _check_api_integration(self) -> None:
        """üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª–∏–µ–Ω—Ç
        api_client_file = self.root_path / "api_client.py"
        if api_client_file.exists():
            try:
                content = api_client_file.read_text()
                
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã EXMO API
                required_methods = [
                    'user_info', 'order_create', 'order_cancel', 
                    'user_trades', 'ticker'
                ]
                
                found_methods = [method for method in required_methods if method in content]
                
                if len(found_methods) >= len(required_methods) // 2:
                    self._add_check(
                        "api_methods", "API –º–µ—Ç–æ–¥—ã",
                        True, f"–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(found_methods)}/{len(required_methods)}",
                        "info", []
                    )
                else:
                    self._add_check(
                        "api_methods", "API –º–µ—Ç–æ–¥—ã",
                        False, f"–ú–∞–ª–æ API –º–µ—Ç–æ–¥–æ–≤: {len(found_methods)}/{len(required_methods)}",
                        "warning", ["–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API –º–µ—Ç–æ–¥—ã"]
                    )
                
            except Exception as e:
                self._add_check(
                    "api_client", "API –∫–ª–∏–µ–Ω—Ç",
                    False, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ API –∫–ª–∏–µ–Ω—Ç–∞: {e}",
                    "warning", ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É api_client.py"]
                )
        else:
            self._add_check(
                "api_client", "API –∫–ª–∏–µ–Ω—Ç", 
                False, "api_client.py –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "critical", ["–°–æ–∑–¥–∞–π—Ç–µ API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏—Ä–∂–µ–π"]
            )
        
        # Rate Limiter
        rate_limiter_file = self.root_path / "rate_limiter.py"
        if rate_limiter_file.exists():
            self._add_check(
                "rate_limiter", "Rate Limiter",
                True, "Rate Limiter –Ω–∞–π–¥–µ–Ω",
                "info", []
            )
        else:
            self._add_check(
                "rate_limiter", "Rate Limiter",
                False, "Rate Limiter –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                "critical", ["Rate Limiter –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"]
            )
    
    def _check_data_migration_readiness(self) -> None:
        """üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data_dir = self.root_path / "data"
        if data_dir.exists():
            data_files = list(data_dir.glob("*.json"))
            
            if data_files:
                self._add_check(
                    "existing_data", "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
                    True, f"–ù–∞–π–¥–µ–Ω–æ {len(data_files)} —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                    "info", []
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
                important_files = ['positions.json', 'trades_history.json']
                found_important = [f for f in important_files 
                                 if (data_dir / f).exists()]
                
                if found_important:
                    self._add_check(
                        "important_data", "–í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        True, f"–ù–∞–π–¥–µ–Ω—ã: {', '.join(found_important)}",
                        "info", []
                    )
                else:
                    self._add_check(
                        "important_data", "–í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        False, "–í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                        "warning", ["–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ—Ä–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"]
                    )
            else:
                self._add_check(
                    "existing_data", "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
                    False, "–§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "warning", ["–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ"]
                )
        else:
            self._add_check(
                "existing_data", "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ",
                False, "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"]
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backup –¥–∞–Ω–Ω—ã—Ö
        backup_data_dir = self.root_path / "backup_before_migration" / "data"
        if backup_data_dir.exists():
            backup_files = list(backup_data_dir.glob("*.json"))
            self._add_check(
                "data_backup", "Backup –¥–∞–Ω–Ω—ã—Ö",
                True, f"Backup —Å–æ–¥–µ—Ä–∂–∏—Ç {len(backup_files)} —Ñ–∞–π–ª–æ–≤",
                "info", []
            )
        else:
            self._add_check(
                "data_backup", "Backup –¥–∞–Ω–Ω—ã—Ö",
                False, "Backup –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "warning", ["–°–æ–∑–¥–∞–π—Ç–µ backup –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"]
            )
    
    def _check_module_available(self, module_name: str) -> bool:
        """üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
        try:
            __import__(module_name)
            return True
        except ImportError:
            return False
    
    def _add_check(self, name: str, description: str, status: bool, 
                   details: str, severity: str, recommendations: List[str]) -> None:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        check = IntegrationCheck(
            name=name,
            description=description,
            status=status,
            details=details,
            severity=severity,
            recommendations=recommendations
        )
        self.checks.append(check)
    
    def _generate_integration_report(self) -> Dict[str, Any]:
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_checks = len(self.checks)
        passed_checks = sum(1 for check in self.checks if check.status)
        failed_checks = total_checks - passed_checks
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        critical_issues = [c for c in self.checks if not c.status and c.severity == "critical"]
        warnings = [c for c in self.checks if not c.status and c.severity == "warning"]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        readiness_score = (passed_checks / max(total_checks, 1)) * 100
        
        if len(critical_issues) == 0 and readiness_score >= 80:
            readiness_level = "ready"
            readiness_message = "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏"
        elif len(critical_issues) <= 2 and readiness_score >= 60:
            readiness_level = "conditionally_ready"
            readiness_message = "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É—Å–ª–æ–≤–Ω–æ –≥–æ—Ç–æ–≤–∞ (–∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã)"
        else:
            readiness_level = "not_ready"
            readiness_message = "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏"
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        priority_actions = []
        for issue in critical_issues[:3]:  # –¢–æ–ø 3 –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö
            priority_actions.extend(issue.recommendations)
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps = []
        if critical_issues:
            next_steps.append("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        if warnings:
            next_steps.append("2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        next_steps.extend([
            "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ component_inventory.py",
            "4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ dependency_analyzer.py", 
            "5. –°–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω",
            "6. –ù–∞—á–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é —Å Core —Å–ª–æ—è"
        ])
        
        return {
            'summary': {
                'total_checks': total_checks,
                'passed_checks': passed_checks,
                'failed_checks': failed_checks,
                'readiness_score': round(readiness_score, 1),
                'readiness_level': readiness_level,
                'readiness_message': readiness_message
            },
            'issues': {
                'critical': len(critical_issues),
                'warnings': len(warnings),
                'critical_details': [
                    {
                        'name': issue.name,
                        'description': issue.description,
                        'details': issue.details,
                        'recommendations': issue.recommendations
                    }
                    for issue in critical_issues
                ],
                'warning_details': [
                    {
                        'name': warning.name,
                        'description': warning.description,
                        'details': warning.details,
                        'recommendations': warning.recommendations
                    }
                    for warning in warnings
                ]
            },
            'checks_by_category': {
                'environment': [self._check_to_dict(c) for c in self.checks if c.name in ['python_version', 'write_permissions', 'disk_space']],
                'files': [self._check_to_dict(c) for c in self.checks if 'file' in c.name or 'structure' in c.name],
                'modules': [self._check_to_dict(c) for c in self.checks if 'module' in c.name],
                'configuration': [self._check_to_dict(c) for c in self.checks if 'config' in c.name or 'env' in c.name],
                'architecture': [self._check_to_dict(c) for c in self.checks if 'architecture' in c.name or 'core' in c.name],
                'integration': [self._check_to_dict(c) for c in self.checks if 'api' in c.name or 'dependency' in c.name]
            },
            'priority_actions': priority_actions[:5],
            'next_steps': next_steps,
            'all_checks': [self._check_to_dict(check) for check in self.checks]
        }
    
    def _check_to_dict(self, check: IntegrationCheck) -> Dict[str, Any]:
        """üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'name': check.name,
            'description': check.description,
            'status': check.status,
            'details': check.details,
            'severity': check.severity,
            'recommendations': check.recommendations
        }
    
    def save_report(self, report: Dict[str, Any], output_file: str = "integration_readiness_report.json") -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = IntegrationChecker()
    report = checker.run_comprehensive_check()
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üîç –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    
    summary = report['summary']
    print(f"üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {summary['total_checks']}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {summary['passed_checks']}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {summary['failed_checks']}")
    print(f"üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {summary['readiness_score']}%")
    print(f"üéØ –°—Ç–∞—Ç—É—Å: {summary['readiness_message']}")
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    issues = report['issues']
    if issues['critical'] > 0:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({issues['critical']}):")
        for issue in issues['critical_details'][:3]:
            print(f"  ‚ùå {issue['description']}: {issue['details']}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if issues['warnings'] > 0:
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({issues['warnings']}):")
        for warning in issues['warning_details'][:3]:
            print(f"  ‚ö†Ô∏è {warning['description']}: {warning['details']}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    priority_actions = report['priority_actions']
    if priority_actions:
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        for i, action in enumerate(priority_actions[:3], 1):
            print(f"  {i}. {action}")
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    next_steps = report['next_steps']
    print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    for step in next_steps[:5]:
        print(f"  {step}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    checker.save_report(report)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if summary['readiness_level'] == 'ready':
        print(f"\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏!")
        return True
    elif summary['readiness_level'] == 'conditionally_ready':
        print(f"\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π")
        return False
    else:
        print(f"\n‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")
        return False


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)