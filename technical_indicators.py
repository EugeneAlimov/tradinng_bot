# technical_indicators.py
import statistics
from typing import List, Tuple


class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""

    @staticmethod
    def sma(prices: List[float], period: int) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        if len(prices) < period:
            return sum(prices) / len(prices) if prices else 0
        return sum(prices[-period:]) / period

    @staticmethod
    def ema(prices: List[float], period: int) -> float:
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        if not prices:
            return 0
        if len(prices) == 1:
            return prices[0]

        multiplier = 2 / (period + 1)
        ema = prices[0]

        for price in prices[1:]:
            ema = (price * multiplier) + (ema * (1 - multiplier))

        return ema

    @staticmethod
    def rsi(prices: List[float], period: int = 14) -> float:
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç RSI —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≥–ª—é–∫–æ–≤"""

        # üõ°Ô∏è –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not prices or len(prices) < 2:
            return 50.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –î–ª—è RSI –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º period + 1 –∑–Ω–∞—á–µ–Ω–∏–π
        if len(prices) < period + 1:
            return 50.0  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        if len(prices) > period * 3:
            prices = prices[-(period * 2):]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

        # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        changes = []
        for i in range(1, len(prices)):
            change = prices[i] - prices[i - 1]
            changes.append(change)

        # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not changes:
            return 50.0

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏
        max_change = max(abs(c) for c in changes)
        if max_change < 0.000001:  # –¶–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
            return 50.0  # RSI –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω

        # üìà –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–æ—Å—Ç –∏ –ø–∞–¥–µ–Ω–∏—è
        gains = []
        losses = []

        for change in changes:
            if change > 0:
                gains.append(change)
                losses.append(0.0)
            elif change < 0:
                gains.append(0.0)
                losses.append(-change)  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            else:
                gains.append(0.0)
                losses.append(0.0)

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ period –∑–Ω–∞—á–µ–Ω–∏–π
        if len(gains) > period:
            gains = gains[-period:]
            losses = losses[-period:]

        # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_gain = sum(gains) / len(gains) if gains else 0.0
        avg_loss = sum(losses) / len(losses) if losses else 0.0

        # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if avg_loss == 0.0:
            if avg_gain == 0.0:
                return 50.0  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            else:
                return 100.0  # –¢–æ–ª—å–∫–æ —Ä–æ—Å—Ç

        if avg_gain == 0.0:
            return 0.0  # –¢–æ–ª—å–∫–æ –ø–∞–¥–µ–Ω–∏—è

        # üìà –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç RSI
        rs = avg_gain / avg_loss
        rsi = 100.0 - (100.0 / (1.0 + rs))

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        rsi = max(0.0, min(100.0, rsi))

        # üõ°Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if rsi < 0.1 or rsi > 99.9:
            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –æ—à–∏–±–∫—É
            return 50.0

        return rsi

    @staticmethod
    def bollinger_bands(prices: List[float], period: int = 20, std_dev: float = 2) -> Tuple[float, float, float]:
        """–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ (–≤–µ—Ä—Ö–Ω—è—è, —Å—Ä–µ–¥–Ω—è—è, –Ω–∏–∂–Ω—è—è)"""
        if len(prices) < period:
            sma = sum(prices) / len(prices) if prices else 0
            return sma, sma, sma

        recent_prices = prices[-period:]
        sma = sum(recent_prices) / period
        variance = sum((price - sma) ** 2 for price in recent_prices) / period
        std = variance ** 0.5

        upper = sma + (std * std_dev)
        lower = sma - (std * std_dev)

        return upper, sma, lower

    # üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ RSI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    @staticmethod
    def debug_rsi(prices: List[float], period: int = 14) -> dict:
        """üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI"""

        if len(prices) < period + 1:
            return {
                'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
                'prices_count': len(prices),
                'required': period + 1
            }

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        recent_prices = prices[-(period + 5):] if len(prices) > period + 5 else prices

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = []
        for i in range(1, len(recent_prices)):
            change = recent_prices[i] - recent_prices[i - 1]
            changes.append(change)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        gains = [c for c in changes if c > 0]
        losses = [-c for c in changes if c < 0]  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

        recent_changes = changes[-10:] if len(changes) > 10 else changes

        return {
            'prices_count': len(recent_prices),
            'changes_count': len(changes),
            'recent_prices': [round(p, 6) for p in recent_prices[-5:]],
            'recent_changes': [round(c, 6) for c in recent_changes],
            'gains_count': len(gains),
            'losses_count': len(losses),
            'avg_gain': sum(gains[-period:]) / min(period, len(gains)) if gains else 0,
            'avg_loss': sum(losses[-period:]) / min(period, len(losses)) if losses else 0,
            'max_change': max(abs(c) for c in changes) if changes else 0,
            'price_range': max(recent_prices) - min(recent_prices)
        }