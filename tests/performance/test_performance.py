import pytest
import time
import asyncio
from decimal import Decimal

@pytest.mark.performance
@pytest.mark.slow
def test_strategy_analysis_performance(mock_strategy, sample_candles):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    iterations = 100
    start_time = time.time()
    
    for _ in range(iterations):
        result = mock_strategy.analyze(sample_candles)
        assert result is not None
    
    end_time = time.time()
    total_time = end_time - start_time
    avg_time = total_time / iterations
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 10ms –≤ —Å—Ä–µ–¥–Ω–µ–º)
    assert avg_time < 0.01, f"–°—Ä–µ–¥–Ωee –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {avg_time:.4f}s"
    
    print(f"\nüìä Performance: {iterations} –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ {total_time:.3f}s (avg: {avg_time:.4f}s)")

@pytest.mark.performance
@pytest.mark.asyncio
async def test_api_calls_performance(mock_api_client):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API –≤—ã–∑–æ–≤–æ–≤"""
    calls = 50
    start_time = time.time()
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    tasks = []
    for _ in range(calls):
        task = mock_api_client.get_ticker()
        tasks.append(task)
    
    results = await asyncio.gather(*tasks)
    
    end_time = time.time()
    total_time = end_time - start_time
    avg_time = total_time / calls
    
    assert len(results) == calls
    assert avg_time < 0.1, f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API –≤—ã–∑–æ–≤–∞: {avg_time:.4f}s"
    
    print(f"\nüìä API Performance: {calls} –≤—ã–∑–æ–≤–æ–≤ –∑–∞ {total_time:.3f}s (avg: {avg_time:.4f}s)")

@pytest.mark.performance
def test_decimal_calculations_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å Decimal"""
    iterations = 1000
    start_time = time.time()
    
    base_price = Decimal('0.18000')
    amounts = [Decimal(str(i)) for i in range(1, 101)]
    
    for _ in range(iterations):
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        total_cost = sum(amount * base_price for amount in amounts)
        total_amount = sum(amounts)
        avg_price = total_cost / total_amount if total_amount > 0 else Decimal('0')
        
        assert avg_price > 0
    
    end_time = time.time()
    total_time = end_time - start_time
    
    assert total_time < 5.0, f"–†–∞—Å—á–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ: {total_time:.3f}s"
    
    print(f"\nüìä Decimal Performance: {iterations} —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ {total_time:.3f}s")

@pytest.mark.performance
@pytest.mark.slow
@pytest.mark.asyncio
async def test_concurrent_trading_cycles(mock_api_client, mock_strategy):
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–∏–∫–ª–æ–≤"""
    cycles_count = 10
    start_time = time.time()
    
    async def trading_cycle():
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        ticker = await mock_api_client.get_ticker()
        analysis = mock_strategy.analyze(ticker)
        
        if analysis['action'] in ['buy', 'sell']:
            order = await mock_api_client.create_order(
                pair='DOGE_EUR',
                type=analysis['action'],
                amount='100',
                price='0.18'
            )
            return order
        return None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [trading_cycle() for _ in range(cycles_count)]
    results = await asyncio.gather(*tasks)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    completed_cycles = sum(1 for r in results if r is not None)
    
    assert total_time < 10.0, f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ü–∏–∫–ª—ã —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ: {total_time:.3f}s"
    
    print(f"\nüìä Concurrent Performance: {cycles_count} —Ü–∏–∫–ª–æ–≤ –∑–∞ {total_time:.3f}s, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_cycles}")

@pytest.mark.performance
def test_memory_usage_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    try:
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        large_data = []
        for i in range(1000):
            data = {
                'timestamp': time.time(),
                'price': Decimal(f'0.{18000 + i:05d}'),
                'volume': Decimal(f'{1000000 + i}'),
                'metadata': f'test_data_{i}' * 100
            }
            large_data.append(data)
        
        peak_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –û—á–∏—â–∞–µ–º
        large_data.clear()
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = peak_memory - initial_memory
        
        assert memory_increase < 100, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_increase:.1f}MB"
        
        print(f"\nüìä Memory Usage: Initial: {initial_memory:.1f}MB, Peak: {peak_memory:.1f}MB, Final: {final_memory:.1f}MB")
        
    except ImportError:
        pytest.skip("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏")
