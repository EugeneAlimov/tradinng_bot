#!/usr/bin/env python3
"""üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã"""

import pytest
import asyncio


class TestBasicFunctionality:
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    
    def test_python_version(self):
        """–¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ Python"""
        import sys
        assert sys.version_info >= (3, 8), "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+"
    
    def test_imports(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        import json
        import asyncio
        import logging
        import pathlib
        assert True
    
    def test_async_support(self):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ async/await"""
        async def async_func():
            await asyncio.sleep(0.01)
            return "success"
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(async_func())
            assert result == "success"
        finally:
            loop.close()
    
    def test_json_operations(self):
        """–¢–µ—Å—Ç JSON –æ–ø–µ—Ä–∞—Ü–∏–π"""
        import json
        
        test_data = {"test": "value", "number": 123}
        json_str = json.dumps(test_data)
        parsed_data = json.loads(json_str)
        
        assert parsed_data == test_data
    
    def test_file_operations(self, tmp_path):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        import json
        
        test_file = tmp_path / "test.json"
        test_data = {"bot": "DOGE Trading Bot"}
        
        # –ó–∞–ø–∏—Å—å
        with open(test_file, 'w') as f:
            json.dump(test_data, f)
        
        # –ß—Ç–µ–Ω–∏–µ
        with open(test_file, 'r') as f:
            loaded_data = json.load(f)
        
        assert loaded_data == test_data


class TestConfiguration:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_sample_config(self, sample_config):
        """–¢–µ—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        assert sample_config["pair"] == "DOGE_EUR"
        assert sample_config["test_mode"] is True
    
    def test_sample_market_data(self, sample_market_data):
        """–¢–µ—Å—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        assert sample_market_data["current_price"] > 0
        assert sample_market_data["balance"] > 0


@pytest.mark.asyncio
async def test_async_with_pytest():
    """–¢–µ—Å—Ç async —Ñ—É–Ω–∫—Ü–∏–π —Å pytest-asyncio"""
    async def async_operation():
        await asyncio.sleep(0.01)
        return "async_result"
    
    result = await async_operation()
    assert result == "async_result"
