#!/usr/bin/env python3
"""üß™ Integration —Ç–µ—Å—Ç—ã API"""
import pytest
import asyncio
from unittest.mock import AsyncMock, patch

@pytest.mark.integration
@pytest.mark.api
@pytest.mark.asyncio
async def test_api_client_full_cycle(mock_api_client):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ API"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä
    ticker = await mock_api_client.get_ticker()
    assert 'DOGE_EUR' in ticker
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    balance = await mock_api_client.get_balance()
    assert 'EUR' in balance
    assert 'DOGE' in balance
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
    order = await mock_api_client.create_order(
        pair='DOGE_EUR',
        type='buy',
        amount='100',
        price='0.18'
    )
    assert order['order_id'] is not None
    assert order['status'] == 'open'

@pytest.mark.integration
@pytest.mark.api
@pytest.mark.asyncio
async def test_api_error_handling(mock_api_client):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏
    mock_api_client.get_ticker.side_effect = Exception("API Connection Error")
    
    with pytest.raises(Exception, match="API Connection Error"):
        await mock_api_client.get_ticker()

@pytest.mark.integration
@pytest.mark.slow
@pytest.mark.asyncio
async def test_api_timeout_handling(mock_api_client):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    import asyncio
    
    async def slow_response():
        await asyncio.sleep(2)
        return {"result": "slow"}
    
    mock_api_client.get_ticker = slow_response
    
    # –¢–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        result = await asyncio.wait_for(mock_api_client.get_ticker(), timeout=1.0)
        assert False, "–î–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ç–∞–π–º–∞—É—Ç"
    except asyncio.TimeoutError:
        pass  # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

@pytest.mark.integration
@pytest.mark.asyncio
async def test_concurrent_api_calls(mock_api_client):
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        mock_api_client.get_ticker(),
        mock_api_client.get_balance(),
        mock_api_client.get_ticker(),
        mock_api_client.get_balance()
    ]
    
    results = await asyncio.gather(*tasks)
    
    assert len(results) == 4
    for result in results:
        assert result is not None
