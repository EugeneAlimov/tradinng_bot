#!/usr/bin/env python3
"""üß™ Integration —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
import pytest
import asyncio
from unittest.mock import Mock

@pytest.mark.integration
@pytest.mark.asyncio
async def test_trading_system_integration(mock_api_client, mock_strategy, mock_risk_manager):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_data = await mock_api_client.get_ticker()
    assert market_data is not None
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    analysis = mock_strategy.analyze(market_data)
    assert analysis['action'] in ['buy', 'sell', 'hold']
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
    risk_ok = mock_risk_manager.check_position_size(100)
    assert risk_ok is True
    
    # 4. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å - —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
    if analysis['action'] in ['buy', 'sell']:
        order = await mock_api_client.create_order(
            pair='DOGE_EUR',
            type=analysis['action'],
            amount='100',
            price='0.18'
        )
        assert order['order_id'] is not None

@pytest.mark.integration
@pytest.mark.dca
@pytest.mark.asyncio
async def test_dca_system_integration(mock_api_client, mock_dca_state, mock_dca_config):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DCA —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DCA
    assert mock_dca_state['current_step'] == 2
    assert mock_dca_state['total_invested'] > 0
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ DCA
    current_price = 0.17000  # –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –µ—â–µ –±–æ–ª—å—à–µ
    base_price = mock_dca_state['base_price']
    step_trigger_price = base_price * (1 - mock_dca_config.step_percent / 100)
    
    if current_price <= step_trigger_price:
        # –î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        next_investment = mock_dca_config.step_multiplier * 100
        
        order = await mock_api_client.create_order(
            pair='DOGE_EUR',
            type='buy',
            amount=str(next_investment / current_price),
            price=str(current_price)
        )
        
        assert order['order_id'] is not None

@pytest.mark.integration
def test_strategy_risk_integration(mock_strategy, mock_risk_manager, mock_market_data):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    signal = mock_strategy.analyze(mock_market_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
    if signal['action'] == 'buy':
        position_size = 100  # EUR
        risk_approved = mock_risk_manager.check_position_size(position_size)
        daily_limits_ok = mock_risk_manager.check_daily_limits()
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –¥–ª—è –º–æ–∫–∞
        assert risk_approved is True
        assert daily_limits_ok is True

@pytest.mark.integration
@pytest.mark.slow
@pytest.mark.asyncio
async def test_full_trading_cycle(mock_api_client, mock_strategy, mock_risk_manager):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
    cycles_completed = 0
    max_cycles = 3
    
    for cycle in range(max_cycles):
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ticker = await mock_api_client.get_ticker()
        balance = await mock_api_client.get_balance()
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis = mock_strategy.analyze(ticker)
        
        # 3. –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if analysis['action'] != 'hold' and analysis['confidence'] > 0.7:
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
            risk_check = mock_risk_manager.check_daily_limits()
            
            if risk_check:
                # 5. –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
                order = await mock_api_client.create_order(
                    pair='DOGE_EUR',
                    type=analysis['action'],
                    amount='100',
                    price='0.18'
                )
                
                # 6. –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
                await asyncio.sleep(0.1)
                
                # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = await mock_api_client.get_order_status(order['order_id'])
                
                if status['status'] == 'filled':
                    cycles_completed += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    assert cycles_completed >= 0
