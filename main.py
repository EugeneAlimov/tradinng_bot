#!/usr/bin/env python3
"""üöÄ –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

import sys
import os
import argparse
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def parse_arguments():
    """üìã –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="ü§ñ DOGE Trading Bot v4.1-refactored")

    parser.add_argument(
        '--mode', '-m',
        choices=['new', 'legacy', 'hybrid'],
        default='hybrid',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: new (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞), legacy (—Å—Ç–∞—Ä—ã–π –±–æ—Ç), hybrid (–∞–¥–∞–ø—Ç–µ—Ä)'
    )

    parser.add_argument(
        '--profile', '-p',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
    )

    parser.add_argument(
        '--config', '-c',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--validate', '-v',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--test-mode', '-t',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'
    )

    return parser.parse_args()

async def run_new_architecture(args):
    """üÜï –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("üÜï –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    print("‚ö†Ô∏è –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º")
    return await run_hybrid_mode(args)

async def run_legacy_mode(args):
    """üìú –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
    print("üìú –ó–∞–ø—É—Å–∫ –≤ legacy —Ä–µ–∂–∏–º–µ...")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
        if Path("hybrid_bot.py").exists():
            from hybrid_bot import HybridTradingBot
            bot = HybridTradingBot()
        elif Path("bot.py").exists():
            from bot import TradingBot
            bot = TradingBot()
        else:
            raise ImportError("–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print("‚úÖ –°—Ç–∞—Ä—ã–π –±–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
        bot.run()

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º --mode hybrid")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

    return True

async def run_hybrid_mode(args):
    """üé≠ –ó–∞–ø—É—Å–∫ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üé≠ –ó–∞–ø—É—Å–∫ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config.settings import get_settings
        settings = get_settings()
        settings.validate()

        print("‚úÖ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        from adapters import LegacyBotAdapter
        adapter = LegacyBotAdapter(use_hybrid=True)

        print("üîÑ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä...")

        # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        cycles = 0
        while cycles < 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                result = await adapter.run_trading_cycle()
                print(f"üìä –¶–∏–∫–ª {cycles + 1}: {result.get('reason', 'OK')}")

                cycles += 1
                await asyncio.sleep(10)  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

            except KeyboardInterrupt:
                print("\n‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                break

        print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å legacy —Ä–µ–∂–∏–º...")
        return await run_legacy_mode(args)

async def validate_configuration(args):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        from config.settings import get_settings
        settings = get_settings()
        settings.validate()

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {getattr(settings, 'profile_name', 'unknown')}")
        print(f"üí± API –∫–ª—é—á: {settings.exmo_api_key[:8]}..." if settings.exmo_api_key else "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ DOGE TRADING BOT v4.1-refactored")
    print("=" * 50)

    args = parse_arguments()

    print(f"üéØ –†–µ–∂–∏–º: {args.mode}")
    print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {args.profile}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.validate:
        success = await validate_configuration(args)
        return 0 if success else 1

    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    try:
        if args.mode == 'new':
            success = await run_new_architecture(args)
        elif args.mode == 'legacy':
            success = await run_legacy_mode(args)
        else:  # hybrid
            success = await run_hybrid_mode(args)

        return 0 if success else 1

    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return 0
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
