import asyncio
import sys
import os
import argparse
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

try:
    # Core –∏–º–ø–æ—Ä—Ç—ã
    from src.core.di_container import DependencyContainer
    from src.core.models import TradingPair
    from src.core.exceptions import TradingSystemError, ConfigurationError

    # Configuration
    from src.config.settings import get_settings, TradingSystemSettings

    # Application Services
    from src.application.services.trading_orchestrator import TradingOrchestrator
    from src.application.services.position_service import PositionService
    from src.application.services.risk_management_service import RiskManagementService
    from src.application.services.analytics_service import AnalyticsService

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ src/ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    sys.exit(1)


class TradingBotApplication:
    """ü§ñ –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self):
        self.container: Optional[DependencyContainer] = None
        self.settings: Optional[TradingSystemSettings] = None
        self.trading_orchestrator: Optional[TradingOrchestrator] = None
        self.position_service: Optional[PositionService] = None
        self.risk_service: Optional[RiskManagementService] = None
        self.analytics_service: Optional[AnalyticsService] = None

        # –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_initialized = False
        self.is_running = False

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        self.logger = logging.getLogger(__name__)

    async def initialize(self) -> None:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOGE Trading Bot v4.1-refactored...")

            # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            self._setup_logging()

            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.settings = get_settings()
            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await self._validate_configuration()

            # 4. –°–æ–∑–¥–∞–Ω–∏–µ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            self.container = DependencyContainer()
            await self._configure_dependencies()
            self.logger.info("‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await self._initialize_services()

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
            await self._system_health_check()

            self.is_initialized = True
            self.logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            if self.logger:
                self.logger.critical(error_msg)
            else:
                print(error_msg)
            raise

    async def run_trading_session(self, session_duration_minutes: Optional[int] = None) -> None:
        """üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.is_initialized:
            raise TradingSystemError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_id = await self.trading_orchestrator.start_trading_session()
            self.is_running = True

            self.logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {session_id}")

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            cycle_count = 0
            start_time = datetime.now()

            while self.is_running:
                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                    result = await self.trading_orchestrator.execute_trading_cycle()
                    cycle_count += 1

                    self.logger.debug(f"üîÑ –¶–∏–∫–ª #{cycle_count}: {result.action}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if session_duration_minutes:
                        elapsed_minutes = (datetime.now() - start_time).total_seconds() / 60
                        if elapsed_minutes >= session_duration_minutes:
                            self.logger.info(f"‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {session_duration_minutes} –º–∏–Ω—É—Ç")
                            break

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    await asyncio.sleep(self.settings.system.update_interval_seconds)

                except KeyboardInterrupt:
                    self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    break
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ —Å –ø–∞—É–∑–æ–π
                    await asyncio.sleep(30)

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
            await self.trading_orchestrator.stop_trading_session()
            self.is_running = False

            self.logger.info(f"üèÅ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {cycle_count}")

        except Exception as e:
            self.logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
            await self._emergency_shutdown()
            raise

    async def run_analytics_mode(self) -> None:
        """üìä –†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.is_initialized:
            raise TradingSystemError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        try:
            self.logger.info("üìä –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            reports = []

            # –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            daily_report = await self.analytics_service.generate_report('daily')
            reports.append(('daily', daily_report))

            # –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            weekly_report = await self.analytics_service.generate_report('weekly')
            reports.append(('weekly', weekly_report))

            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = await self.analytics_service.get_performance_summary()

            # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
            risk_metrics = await self.analytics_service.get_risk_metrics()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
            insights = await self.analytics_service.generate_automated_insights()

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print("\n" + "=" * 60)
            print("üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
            print("=" * 60)

            print(f"\nüìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            if 'current_metrics' in performance:
                metrics = performance['current_metrics']
                print(f"  üí∞ –û–±—â–∏–π P&L: {metrics.get('total_pnl', 'N/A')}")
                print(f"  üéØ –í–∏–Ω—Ä–µ–π—Ç: {metrics.get('win_rate', 'N/A')}%")
                print(f"  üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics.get('total_trades', 'N/A')}")
                print(f"  ‚ö° Profit Factor: {metrics.get('profit_factor', 'N/A')}")

            print(f"\nüõ°Ô∏è –†–ò–°–ö-–ú–ï–¢–†–ò–ö–ò:")
            if 'drawdown' in risk_metrics:
                print(f"  üìâ –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {risk_metrics['drawdown'].get('current', 'N/A')}")
                print(f"  üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {risk_metrics['drawdown'].get('maximum', 'N/A')}")
            if 'volatility' in risk_metrics:
                print(f"  üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk_metrics['volatility'].get('daily', 'N/A')}")

            if insights:
                print(f"\nüí° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´:")
                for insight in insights:
                    print(f"  {insight}")

            print(f"\nüìã –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –û–¢–ß–ï–¢–´:")
            for report_type, report in reports:
                print(f"  üìÑ {report_type.upper()}: {len(report.to_dict())} –º–µ—Ç—Ä–∏–∫")

            print("\n‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            raise

    async def validate_system(self) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            settings = get_settings()
            print(f"  üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: OK")
            print(f"  üìä –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {settings.profile.value}")
            print(f"  üéØ –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {settings.trading.trading_pair}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            if not settings.api.api_key or not settings.api.api_secret:
                print("  ‚ùå API –∫–ª—é—á–∏ EXMO –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False
            print("  üîë API –∫–ª—é—á–∏: OK")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            required_dirs = ['data', 'logs']
            for dir_name in required_dirs:
                dir_path = Path(dir_name)
                if not dir_path.exists():
                    dir_path.mkdir(exist_ok=True)
                    print(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
                else:
                    print(f"  üìÅ {dir_name}: OK")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            try:
                from src.core.interfaces import ITradingStrategy
                from src.domain.trading.trading_service import TradingService
                print("  üèóÔ∏è –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: OK")
            except ImportError as e:
                print(f"  ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π: {e}")
                return False

            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False

    async def show_status(self) -> None:
        """üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.is_initialized:
                print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return

            print("\n" + "=" * 50)
            print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
            print("=" * 50)

            # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            if self.trading_orchestrator:
                session_stats = self.trading_orchestrator.get_session_statistics()
                print(f"üîÑ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è:")
                print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if session_stats.get('is_running') else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
                print(f"  ‚Ä¢ –°–µ—Å—Å–∏—è: {session_stats.get('session_id', 'N/A')}")
                print(f"  ‚Ä¢ –¶–∏–∫–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {session_stats.get('execution_count', 0)}")

            # –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
            if self.position_service:
                current_position = await self.position_service.get_current_position()
                if current_position and not current_position.is_empty:
                    print(f"üìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:")
                    print(f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_position.quantity}")
                    print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {current_position.average_price}")
                    print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {current_position.status.value}")
                else:
                    print(f"üìä –ü–æ–∑–∏—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            # –°—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤
            if self.risk_service:
                risk_report = await self.risk_service.get_risk_report()
                if 'status' in risk_report:
                    status = risk_report['status']
                    emergency_active = status.get('emergency_stop_active', False)
                    trading_blocked = status.get('trading_blocked', False)

                    print(f"üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:")
                    print(f"  ‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {'üö® –ê–∫—Ç–∏–≤–Ω–∞' if emergency_active else '‚úÖ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
                    print(f"  ‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' if trading_blocked else '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∞'}")

            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:")
            print(f"  ‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Clean Architecture v4.1")
            print(f"  ‚Ä¢ –†–µ–∂–∏–º: {'üî¥ Paper Trading' if self.settings.test_mode else 'üü¢ Live Trading'}")
            print(f"  ‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: {self.settings.profile.value}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def shutdown(self) -> None:
        """üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

            if self.is_running and self.trading_orchestrator:
                await self.trading_orchestrator.stop_trading_session()
                self.is_running = False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.analytics_service:
                final_metrics = await self.analytics_service.calculate_current_metrics()
                if self.logger:  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                    self.logger.info(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: P&L={final_metrics.total_pnl}")

            if self.logger:  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
                self.logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã completed")

        except Exception as e:
            if self.logger:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =================

    def _setup_logging(self) -> None:
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.FileHandler(logs_dir / 'trading_bot.log', encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )

        self.logger = logging.getLogger(__name__)
        self.logger.info("üìù –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def _validate_configuration(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.settings.validate()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not self.settings.api.api_key or not self.settings.api.api_secret:
                raise ConfigurationError("API –∫–ª—é—á–∏ EXMO –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
            if not self.settings.trading.trading_pair:
                raise ConfigurationError("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

            self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

        except Exception as e:
            raise ConfigurationError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    async def _configure_dependencies(self) -> None:
        """üíâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ Infrastructure —Å–ª–æ–π –Ω–µ –≥–æ—Ç–æ–≤
        self.logger.info("üíâ DI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∏)")

    async def _initialize_services(self) -> None:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
            trading_pair = TradingPair("DOGE", "EUR")

            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–Ω–∞—è Infrastructure –Ω–µ –≥–æ—Ç–æ–≤–∞
            # –í –±—É–¥—É—â–µ–º —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

            self.logger.info("üîß –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (–∑–∞–≥–ª—É—à–∫–∏)")

        except Exception as e:
            raise TradingSystemError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")

    async def _system_health_check(self) -> None:
        """üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            health_checks = [
                ("Configuration", self.settings is not None),
                ("DI Container", self.container is not None),
                ("Logging", self.logger is not None)
            ]

            for check_name, is_healthy in health_checks:
                if not is_healthy:
                    raise TradingSystemError(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {check_name} –Ω–µ –≥–æ—Ç–æ–≤")

            self.logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞")

        except Exception as e:
            raise TradingSystemError(f"–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ: {e}")

    async def _emergency_shutdown(self) -> None:
        """üö® –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            self.logger.critical("üö® –ê–í–ê–†–ò–ô–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")

            self.is_running = False

            if self.trading_orchestrator:
                await self.trading_orchestrator.stop_trading_session()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.logger.critical("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


def create_argument_parser() -> argparse.ArgumentParser:
    """üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="ü§ñ DOGE Trading Bot v4.1-refactored",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --validate          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  python main.py --trade             # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
  python main.py --analytics         # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  python main.py --status           # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  python main.py --trade --duration 60  # –¢–æ—Ä–≥–æ–≤–ª—è 60 –º–∏–Ω—É—Ç
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    parser.add_argument('--validate', action='store_true',
                       help='–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞')
    
    parser.add_argument('--trade', action='store_true',
                       help='–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏')
    
    parser.add_argument('--analytics', action='store_true',
                       help='–†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏')
    
    parser.add_argument('--status', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--duration', type=int, metavar='MINUTES',
                       help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö')
    
    parser.add_argument('--profile', choices=['conservative', 'balanced', 'aggressive'],
                       help='–¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å')
    
    parser.add_argument('--dry-run', action='store_true',
                       help='–†–µ–∂–∏–º paper trading')
    
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    return parser


async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = create_argument_parser()
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    if len(sys.argv) == 1:
        parser.print_help()
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = TradingBotApplication()
    
    try:
        # –†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if args.validate:
            is_valid = await app.validate_system()
            sys.exit(0 if is_valid else 1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        await app.initialize()
        
        # –†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞
        if args.status:
            await app.show_status()
            return
        
        # –†–µ–∂–∏–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if args.analytics:
            await app.run_analytics_mode()
            return
        
        # –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
        if args.trade:
            duration = args.duration if args.duration else None
            await app.run_trading_session(duration)
            return
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        sys.exit(1)
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await app.shutdown()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\nüí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
