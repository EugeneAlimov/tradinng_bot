# dca_limiter.py
"""
üõ°Ô∏è –ü–ê–¢–ß 2: –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å DCA –ø–æ–∫—É–ø–æ–∫
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
"""

import time
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime, timedelta


class DCALimiter:
    """üõ°Ô∏è –£–º–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å DCA –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # üõ°Ô∏è –õ–∏–º–∏—Ç—ã DCA
        self.MAX_CONSECUTIVE_DCA = 3        # –ú–∞–∫—Å–∏–º—É–º 3 DCA –ø–æ–¥—Ä—è–¥
        self.MAX_DCA_PER_DAY = 5           # –ú–∞–∫—Å–∏–º—É–º 5 DCA –≤ –¥–µ–Ω—å
        self.MIN_INTERVAL_BETWEEN_DCA = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É DCA
        self.MAX_POSITION_SIZE_WITH_DCA = 0.65  # 65% –¥–µ–ø–æ–∑–∏—Ç–∞ –º–∞–∫—Å–∏–º—É–º
        
        # üìö –ò—Å—Ç–æ—Ä–∏—è DCA –æ–ø–µ—Ä–∞—Ü–∏–π
        self.dca_history = []
        self.last_dca_time = 0
        
        # üö® –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–ª–æ—Ö–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
        self.blocked_until = 0
        self.block_reason = ""
        
        self.logger.info("üõ°Ô∏è DCALimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥—Ä—è–¥: {self.MAX_CONSECUTIVE_DCA}")
        self.logger.info(f"   üìÖ –ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å: {self.MAX_DCA_PER_DAY}")
        self.logger.info(f"   ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.MIN_INTERVAL_BETWEEN_DCA//60} –º–∏–Ω—É—Ç")
    
    def can_execute_dca(self, current_price: float, position_data: Dict[str, Any],
                       balance_info: Dict[str, Any]) -> Tuple[bool, str]:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DCA"""
        
        # üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if time.time() < self.blocked_until:
            remaining = (self.blocked_until - time.time()) / 60
            return False, f"DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {self.block_reason} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f}–º–∏–Ω)"
        
        # ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        time_since_last = time.time() - self.last_dca_time
        if time_since_last < self.MIN_INTERVAL_BETWEEN_DCA:
            remaining = (self.MIN_INTERVAL_BETWEEN_DCA - time_since_last) / 60
            return False, f"–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è DCA (–æ—Å—Ç–∞–ª–æ—Å—å {remaining:.0f}–º–∏–Ω)"
        
        # üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö DCA
        consecutive_count = self._count_consecutive_dca()
        if consecutive_count >= self.MAX_CONSECUTIVE_DCA:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç DCA –ø–æ–¥—Ä—è–¥: {consecutive_count}/{self.MAX_CONSECUTIVE_DCA}"
        
        # üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        daily_count = self._count_daily_dca()
        if daily_count >= self.MAX_DCA_PER_DAY:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç DCA: {daily_count}/{self.MAX_DCA_PER_DAY}"
        
        # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        if position_data and 'quantity' in position_data:
            current_position_value = position_data['quantity'] * current_price
            total_balance = balance_info.get('total_value', 0)
            
            if total_balance > 0:
                position_percentage = current_position_value / total_balance
                if position_percentage >= self.MAX_POSITION_SIZE_WITH_DCA:
                    return False, f"–ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {position_percentage*100:.1f}% >= {self.MAX_POSITION_SIZE_WITH_DCA*100:.0f}%"
        
        # üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —É–±—ã—Ç–æ–∫ > 8%, –±–ª–æ–∫–∏—Ä—É–µ–º DCA)
        if position_data and 'avg_price' in position_data:
            avg_price = position_data['avg_price']
            loss_percent = (current_price - avg_price) / avg_price
            
            if loss_percent <= -0.08:  # –£–±—ã—Ç–æ–∫ –±–æ–ª—å—à–µ 8%
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 2 —á–∞—Å–∞
                self._block_dca_temporarily(2 * 3600, f"–ë–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫: {loss_percent*100:.1f}%")
                return False, f"DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —É–±—ã—Ç–∫–∞: {loss_percent*100:.1f}%"
        
        return True, "DCA —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
    
    def register_dca_execution(self, price: float, quantity: float, 
                              result: str = "success") -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π DCA –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        
        dca_record = {
            'timestamp': time.time(),
            'price': price,
            'quantity': quantity,
            'result': result,
            'datetime': datetime.now().isoformat()
        }
        
        self.dca_history.append(dca_record)
        self.last_dca_time = time.time()
        
        # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        cutoff_time = time.time() - (7 * 24 * 3600)
        self.dca_history = [r for r in self.dca_history if r['timestamp'] > cutoff_time]
        
        self.logger.info(f"üìù DCA –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {quantity:.6f} –ø–æ {price:.8f}")
        self.logger.info(f"   üìä –ü–æ–¥—Ä—è–¥: {self._count_consecutive_dca()}/{self.MAX_CONSECUTIVE_DCA}")
        self.logger.info(f"   üìÖ –ó–∞ –¥–µ–Ω—å: {self._count_daily_dca()}/{self.MAX_DCA_PER_DAY}")
    
    def register_successful_sell(self) -> None:
        """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏)"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
        sell_record = {
            'timestamp': time.time(),
            'type': 'successful_sell',
            'datetime': datetime.now().isoformat()
        }
        
        self.dca_history.append(sell_record)
        
        # –°–Ω–∏–º–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
        if time.time() < self.blocked_until:
            self.logger.info("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ DCA —Å–Ω—è—Ç–∞ –∏–∑-–∑–∞ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏")
            self.blocked_until = 0
            self.block_reason = ""
        
        self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, —Å—á–µ—Ç—á–∏–∫–∏ DCA —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _count_consecutive_dca(self) -> int:
        """üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö DCA –æ–ø–µ—Ä–∞—Ü–∏–π"""
        
        if not self.dca_history:
            return 0
        
        consecutive = 0
        # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        for record in reversed(self.dca_history):
            if record.get('type') == 'successful_sell':
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –Ω–∞ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
            elif 'quantity' in record and record.get('result') == 'success':
                consecutive += 1
            else:
                break
        
        return consecutive
    
    def _count_daily_dca(self) -> int:
        """üìÖ –ü–æ–¥—Å—á–µ—Ç DCA –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_timestamp = today_start.timestamp()
        
        daily_count = 0
        for record in self.dca_history:
            if (record['timestamp'] >= today_timestamp and 
                'quantity' in record and 
                record.get('result') == 'success'):
                daily_count += 1
        
        return daily_count
    
    def _block_dca_temporarily(self, duration_seconds: int, reason: str) -> None:
        """üö® –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ DCA"""
        
        self.blocked_until = time.time() + duration_seconds
        self.block_reason = reason
        
        hours = duration_seconds / 3600
        self.logger.warning(f"üö® DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {hours:.1f}—á: {reason}")
    
    def get_dca_status(self) -> Dict[str, Any]:
        """üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å DCA –ª–∏–º–∏—Ç–µ—Ä–∞"""
        
        status = {
            'consecutive_dca': self._count_consecutive_dca(),
            'max_consecutive': self.MAX_CONSECUTIVE_DCA,
            'daily_dca': self._count_daily_dca(),
            'max_daily': self.MAX_DCA_PER_DAY,
            'is_blocked': time.time() < self.blocked_until,
            'block_reason': self.block_reason if time.time() < self.blocked_until else "",
            'time_since_last_dca': time.time() - self.last_dca_time,
            'min_interval': self.MIN_INTERVAL_BETWEEN_DCA
        }
        
        if status['is_blocked']:
            status['block_remaining_minutes'] = (self.blocked_until - time.time()) / 60
        
        return status