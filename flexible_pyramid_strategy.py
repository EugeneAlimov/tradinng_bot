# flexible_pyramid_strategy.py
"""
üèóÔ∏è –ü–ê–¢–ß 4: –ì–∏–±–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
–ó–∞–º–µ–Ω—è–µ—Ç –∂–µ—Å—Ç–∫—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–∞ —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã—Ö–æ–¥–∞
"""

import time
import logging
from typing import Dict, Any, List, Tuple, Optional


class FlexiblePyramidStrategy:
    """üèóÔ∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∞–≤–∞—Ä–∏–π–Ω—ã–º–∏ –≤—ã—Ö–æ–¥–∞–º–∏"""
    
    def __init__(self, config, api_service, position_manager):
        self.config = config
        self.api_service = api_service
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)
        
        # üèóÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã (–∫–∞–∫ –±—ã–ª–æ)
        self.pyramid_levels = [
            {'name': 'fast', 'profit_target': 0.008, 'sell_percentage': 0.25, 'min_profit_eur': 0.10},
            {'name': 'medium', 'profit_target': 0.020, 'sell_percentage': 0.35, 'min_profit_eur': 0.20},
            {'name': 'good', 'profit_target': 0.040, 'sell_percentage': 0.25, 'min_profit_eur': 0.30},
            {'name': 'excellent', 'profit_target': 0.070, 'sell_percentage': 0.15, 'min_profit_eur': 0.50}
        ]
        
        # üö® –ù–û–í–´–ï –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        self.emergency_levels = [
            {
                'name': 'partial_exit',
                'loss_threshold': -0.08,    # –ü—Ä–∏ —É–±—ã—Ç–∫–µ 8%
                'sell_percentage': 0.30,    # –ü—Ä–æ–¥–∞–µ–º 30%
                'condition': 'time_based',  # + –¥–µ—Ä–∂–∏–º –±–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤
                'time_hours': 4,
                'description': '–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º —É–±—ã—Ç–∫–µ'
            },
            {
                'name': 'damage_control',
                'loss_threshold': -0.12,    # –ü—Ä–∏ —É–±—ã—Ç–∫–µ 12%
                'sell_percentage': 0.50,    # –ü—Ä–æ–¥–∞–µ–º 50%
                'condition': 'immediate',   # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å —É—â–µ—Ä–±–∞'
            },
            {
                'name': 'emergency_exit',
                'loss_threshold': -0.15,    # –ü—Ä–∏ —É–±—ã—Ç–∫–µ 15%
                'sell_percentage': 1.00,    # –ü—Ä–æ–¥–∞–µ–º –≤—Å–µ
                'condition': 'immediate',   # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                'description': '–ü–æ–ª–Ω—ã–π –∞–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥'
            }
        ]
        
        # üìä –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–π
        self.position_start_times = {}
        self.last_emergency_sell = 0
        self.cooldown_between_emergency = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–≤–∞—Ä–∏–π–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
        
        self.logger.info("üèóÔ∏è FlexiblePyramidStrategy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"   üéØ –û–±—ã—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {len(self.pyramid_levels)}")
        self.logger.info(f"   üö® –ê–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {len(self.emergency_levels)}")
    
    def analyze_sell_opportunity(self, current_price: float, 
                               position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ (–æ–±—ã—á–Ω–æ–π –∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π)"""
        
        if not position_data or position_data.get('quantity', 0) == 0:
            return {'should_sell': False, 'reason': '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏'}
        
        avg_price = position_data['avg_price']
        quantity = position_data['quantity']
        profit_percent = (current_price - avg_price) / avg_price
        
        # üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        emergency_result = self._check_emergency_conditions(
            current_price, position_data, profit_percent
        )
        if emergency_result['should_sell']:
            return emergency_result
        
        # üèóÔ∏è –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—ã—á–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–±—ã–ª–∏)
        if profit_percent > 0:
            pyramid_result = self._check_pyramid_levels(
                current_price, position_data, profit_percent
            )
            if pyramid_result['should_sell']:
                return pyramid_result
        
        # üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        return {
            'should_sell': False,
            'reason': f'–£–±—ã—Ç–æ–∫ {profit_percent*100:.1f}% - –æ–∂–∏–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π',
            'current_profit_percent': profit_percent * 100,
            'emergency_status': self._get_emergency_status(profit_percent, position_data)
        }
    
    def _check_emergency_conditions(self, current_price: float, 
                                  position_data: Dict[str, Any], 
                                  profit_percent: float) -> Dict[str, Any]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø—Ä–æ–¥–∞–∂–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∞–≤–∞—Ä–∏–π–Ω—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
        if time.time() - self.last_emergency_sell < self.cooldown_between_emergency:
            remaining_cooldown = (self.cooldown_between_emergency - 
                                (time.time() - self.last_emergency_sell)) / 60
            return {
                'should_sell': False,
                'reason': f'–ö—É–ª–¥–∞—É–Ω –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: {remaining_cooldown:.0f}–º–∏–Ω'
            }
        
        currency = self.config.CURRENCY_1
        position_age_hours = self._get_position_age_hours(currency)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–≤–∞—Ä–∏–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        for level in self.emergency_levels:
            if profit_percent <= level['loss_threshold']:
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                if level['condition'] == 'time_based':
                    if position_age_hours < level.get('time_hours', 0):
                        continue  # –ï—â–µ –Ω–µ –≤—Ä–µ–º—è
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø—Ä–æ–¥–∞–∂–µ
                quantity = position_data['quantity']
                sell_quantity = quantity * level['sell_percentage']
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                aggressive_price = current_price * 0.995  # –°–∫–∏–¥–∫–∞ 0.5%
                
                self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–´–ô –£–†–û–í–ï–ù–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
                self.logger.critical(f"   –£—Ä–æ–≤–µ–Ω—å: {level['name']}")
                self.logger.critical(f"   –£–±—ã—Ç–æ–∫: {profit_percent*100:.1f}%")
                self.logger.critical(f"   –ü—Ä–æ–¥–∞–µ–º: {sell_quantity:.6f} ({level['sell_percentage']*100:.0f}%)")
                self.logger.critical(f"   –í–æ–∑—Ä–∞—Å—Ç –ø–æ–∑–∏—Ü–∏–∏: {position_age_hours:.1f}—á")
                
                return {
                    'should_sell': True,
                    'sell_type': 'emergency',
                    'level_name': level['name'],
                    'quantity_to_sell': sell_quantity,
                    'suggested_price': aggressive_price,
                    'reason': f"{level['description']}: —É–±—ã—Ç–æ–∫ {profit_percent*100:.1f}%",
                    'emergency_level': level,
                    'profit_percent': profit_percent * 100
                }
        
        return {'should_sell': False}
    
    def _check_pyramid_levels(self, current_price: float, 
                            position_data: Dict[str, Any], 
                            profit_percent: float) -> Dict[str, Any]:
        """üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        
        # –≠—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∏—Ä–∞–º–∏–¥—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–±—ã–ª–∏)
        best_level = None
        max_profit_eur = 0
        
        for level in self.pyramid_levels:
            if profit_percent >= level['profit_target']:
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –≤ EUR –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
                quantity = position_data['quantity']
                sell_quantity = quantity * level['sell_percentage']
                profit_per_coin = current_price - position_data['avg_price']
                total_profit_eur = sell_quantity * profit_per_coin
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                if total_profit_eur >= level['min_profit_eur']:
                    if total_profit_eur > max_profit_eur:
                        max_profit_eur = total_profit_eur
                        best_level = level
        
        if best_level:
            quantity = position_data['quantity']
            sell_quantity = quantity * best_level['sell_percentage']
            
            return {
                'should_sell': True,
                'sell_type': 'pyramid',
                'level_name': best_level['name'],
                'quantity_to_sell': sell_quantity,
                'suggested_price': current_price,
                'reason': f"–ü–∏—Ä–∞–º–∏–¥–∞ {best_level['name']}: –ø—Ä–∏–±—ã–ª—å {max_profit_eur:.2f} EUR",
                'profit_eur': max_profit_eur,
                'profit_percent': profit_percent * 100
            }
        
        return {'should_sell': False}
    
    def execute_sell(self, sell_data: Dict[str, Any]) -> Dict[str, Any]:
        """üíº –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ (–æ–±—ã—á–Ω–æ–π –∏–ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π)"""
        
        try:
            quantity = sell_data['quantity_to_sell']
            price = sell_data['suggested_price']
            sell_type = sell_data['sell_type']
            
            self.logger.info(f"üèóÔ∏è –ò—Å–ø–æ–ª–Ω—è–µ–º {sell_type} –ø—Ä–æ–¥–∞–∂—É:")
            self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
            self.logger.info(f"   –¶–µ–Ω–∞: {price:.8f}")
            self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {sell_data['reason']}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            result = self.api_service.create_sell_order(
                quantity=quantity,
                price=price
            )
            
            if result['success']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.position_manager.update_position(
                    currency=self.config.CURRENCY_1,
                    trade_info={
                        'type': f'{sell_type}_sell',
                        'quantity': -quantity,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                        'price': price,
                        'reason': sell_data['reason'],
                        'level': sell_data.get('level_name', 'unknown')
                    }
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∞–≤–∞—Ä–∏–π–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π
                if sell_type == 'emergency':
                    self.last_emergency_sell = time.time()
                
                return {
                    'success': True,
                    'sell_type': sell_type,
                    'quantity_sold': quantity,
                    'price': price,
                    'order_id': result.get('order_id'),
                    'profit_eur': sell_data.get('profit_eur', 0)
                }
            else:
                return {'success': False, 'error': result.get('error')}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def _get_position_age_hours(self, currency: str) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        
        if currency not in self.position_start_times:
            # –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ
            self.position_start_times[currency] = time.time()
            return 0.0
        
        age_seconds = time.time() - self.position_start_times[currency]
        return age_seconds / 3600
    
    def register_position_start(self, currency: str) -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        self.position_start_times[currency] = time.time()
        self.logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª–æ –ø–æ–∑–∏—Ü–∏–∏ {currency}")
    
    def _get_emergency_status(self, profit_percent: float, 
                            position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        
        currency = self.config.CURRENCY_1
        position_age_hours = self._get_position_age_hours(currency)
        
        status = {
            'position_age_hours': position_age_hours,
            'profit_percent': profit_percent * 100,
            'next_emergency_level': None,
            'time_until_emergency': None
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∞–≤–∞—Ä–∏–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        for level in self.emergency_levels:
            if profit_percent > level['loss_threshold']:
                if level['condition'] == 'time_based':
                    required_hours = level.get('time_hours', 0)
                    if position_age_hours < required_hours:
                        status['next_emergency_level'] = level['name']
                        status['time_until_emergency'] = required_hours - position_age_hours
                        break
        
        return status