#!/usr/bin/env python3
"""üì¶ Dependency Injection Container –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from typing import Dict, Any, TypeVar, Type, Callable, Optional, Union
import inspect
from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum

from .exceptions import DependencyError, ConfigurationError

T = TypeVar('T')


class Lifetime(Enum):
    """üîÑ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    SINGLETON = "singleton"     # –û–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    TRANSIENT = "transient"     # –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–∂–¥—ã–π —Ä–∞–∑
    SCOPED = "scoped"          # –û–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞ scope


@dataclass
class ServiceDescriptor:
    """üìã –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
    service_type: Type
    implementation_type: Optional[Type] = None
    factory: Optional[Callable] = None
    instance: Optional[Any] = None
    lifetime: Lifetime = Lifetime.TRANSIENT
    
    @property
    def is_factory(self) -> bool:
        """üè≠ –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–±—Ä–∏–∫–æ–π"""
        return self.factory is not None
    
    @property
    def is_instance(self) -> bool:
        """üì¶ –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ—Ç–æ–≤—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º"""
        return self.instance is not None


class IDependencyContainer(ABC):
    """üèóÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    @abstractmethod
    def register_singleton(self, service_type: Type[T], implementation_type: Type[T]) -> None:
        """üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è singleton —Å–µ—Ä–≤–∏—Å–∞"""
        pass
    
    @abstractmethod
    def register_transient(self, service_type: Type[T], implementation_type: Type[T]) -> None:
        """üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è transient —Å–µ—Ä–≤–∏—Å–∞"""
        pass
    
    @abstractmethod
    def register_instance(self, service_type: Type[T], instance: T) -> None:
        """üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        pass
    
    @abstractmethod
    def register_factory(self, service_type: Type[T], factory: Callable[..., T]) -> None:
        """üè≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏"""
        pass
    
    @abstractmethod
    def resolve(self, service_type: Type[T]) -> T:
        """üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        pass
    
    @abstractmethod
    def is_registered(self, service_type: Type) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        pass


class DependencyContainer(IDependencyContainer):
    """üì¶ –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self._services: Dict[Type, ServiceDescriptor] = {}
        self._instances: Dict[Type, Any] = {}  # –ö—ç—à singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        self._building: set = set()  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    def register_singleton(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'DependencyContainer':
        """üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è singleton —Å–µ—Ä–≤–∏—Å–∞"""
        impl_type = implementation_type or service_type
        self._services[service_type] = ServiceDescriptor(
            service_type=service_type,
            implementation_type=impl_type,
            lifetime=Lifetime.SINGLETON
        )
        return self
    
    def register_transient(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'DependencyContainer':
        """üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è transient —Å–µ—Ä–≤–∏—Å–∞"""
        impl_type = implementation_type or service_type
        self._services[service_type] = ServiceDescriptor(
            service_type=service_type,
            implementation_type=impl_type,
            lifetime=Lifetime.TRANSIENT
        )
        return self
    
    def register_instance(self, service_type: Type[T], instance: T) -> 'DependencyContainer':
        """üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        self._services[service_type] = ServiceDescriptor(
            service_type=service_type,
            instance=instance,
            lifetime=Lifetime.SINGLETON
        )
        # –°—Ä–∞–∑—É –∫—ç—à–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._instances[service_type] = instance
        return self
    
    def register_factory(self, service_type: Type[T], factory: Callable[..., T], lifetime: Lifetime = Lifetime.TRANSIENT) -> 'DependencyContainer':
        """üè≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏"""
        self._services[service_type] = ServiceDescriptor(
            service_type=service_type,
            factory=factory,
            lifetime=lifetime
        )
        return self
    
    def resolve(self, service_type: Type[T]) -> T:
        """üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if service_type in self._building:
            dependency_chain = " -> ".join([str(t) for t in self._building])
            raise DependencyError(
                service_type.__name__, 
                f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dependency_chain} -> {service_type.__name__}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not self.is_registered(service_type):
            raise DependencyError(
                service_type.__name__, 
                f"–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {service_type.__name__}"
            )
        
        descriptor = self._services[service_type]
        
        # Singleton - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if descriptor.lifetime == Lifetime.SINGLETON:
            if service_type in self._instances:
                return self._instances[service_type]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è
        self._building.add(service_type)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            instance = self._create_instance(descriptor)
            
            # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è singleton
            if descriptor.lifetime == Lifetime.SINGLETON:
                self._instances[service_type] = instance
            
            return instance
            
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ—è—â–∏—Ö—Å—è
            self._building.discard(service_type)
    
    def _create_instance(self, descriptor: ServiceDescriptor) -> Any:
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        
        # –ì–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if descriptor.is_instance:
            return descriptor.instance
        
        # –§–∞–±—Ä–∏–∫–∞
        if descriptor.is_factory:
            return self._call_factory(descriptor.factory)
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
        if descriptor.implementation_type:
            return self._create_from_constructor(descriptor.implementation_type)
        
        raise DependencyError(
            descriptor.service_type.__name__,
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä - –Ω–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, —Ñ–∞–±—Ä–∏–∫–∏ –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"
        )
    
    def _create_from_constructor(self, implementation_type: Type) -> Any:
        """üî® –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        constructor = implementation_type.__init__
        signature = inspect.signature(constructor)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        args = {}
        for param_name, param in signature.parameters.items():
            if param_name == 'self':
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞
            if param.annotation == inspect.Parameter.empty:
                if param.default == inspect.Parameter.empty:
                    raise DependencyError(
                        implementation_type.__name__,
                        f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –Ω–µ –∏–º–µ–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                    )
                continue
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            try:
                args[param_name] = self.resolve(param.annotation)
            except DependencyError:
                # –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if param.default != inspect.Parameter.empty:
                    args[param_name] = param.default
                else:
                    raise
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        return implementation_type(**args)
    
    def _call_factory(self, factory: Callable) -> Any:
        """üè≠ –í—ã–∑–æ–≤ —Ñ–∞–±—Ä–∏–∫–∏"""
        
        signature = inspect.signature(factory)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏
        args = {}
        for param_name, param in signature.parameters.items():
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞
            if param.annotation == inspect.Parameter.empty:
                if param.default == inspect.Parameter.empty:
                    continue
                else:
                    args[param_name] = param.default
                    continue
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            try:
                args[param_name] = self.resolve(param.annotation)
            except DependencyError:
                # –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if param.default != inspect.Parameter.empty:
                    args[param_name] = param.default
                else:
                    raise
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
        return factory(**args)
    
    def is_registered(self, service_type: Type) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return service_type in self._services
    
    def get_registration_info(self, service_type: Type) -> Optional[ServiceDescriptor]:
        """üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return self._services.get(service_type)
    
    def get_all_registrations(self) -> Dict[Type, ServiceDescriptor]:
        """üìã –í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return self._services.copy()
    
    def clear(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        self._services.clear()
        self._instances.clear()
        self._building.clear()
    
    def remove_registration(self, service_type: Type) -> None:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if service_type in self._services:
            del self._services[service_type]
        
        if service_type in self._instances:
            del self._instances[service_type]
    
    def create_scope(self) -> 'ScopedContainer':
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        return ScopedContainer(self)


class ScopedContainer(IDependencyContainer):
    """üéØ Scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, parent: DependencyContainer):
        self.parent = parent
        self._scoped_instances: Dict[Type, Any] = {}
    
    def register_singleton(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'ScopedContainer':
        """üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        self.parent.register_singleton(service_type, implementation_type)
        return self
    
    def register_transient(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'ScopedContainer':
        """üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        self.parent.register_transient(service_type, implementation_type)
        return self
    
    def register_instance(self, service_type: Type[T], instance: T) -> 'ScopedContainer':
        """üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ scoped –æ–±–ª–∞—Å—Ç–∏"""
        self._scoped_instances[service_type] = instance
        return self
    
    def register_factory(self, service_type: Type[T], factory: Callable[..., T]) -> 'ScopedContainer':
        """üè≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
        self.parent.register_factory(service_type, factory)
        return self
    
    def resolve(self, service_type: Type[T]) -> T:
        """üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º scope"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scoped —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        if service_type in self._scoped_instances:
            return self._scoped_instances[service_type]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if self.parent.is_registered(service_type):
            descriptor = self.parent.get_registration_info(service_type)
            
            # –î–ª—è scoped —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ scope
            if descriptor.lifetime == Lifetime.SCOPED:
                instance = self.parent._create_instance(descriptor)
                self._scoped_instances[service_type] = instance
                return instance
        
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
        return self.parent.resolve(service_type)
    
    def is_registered(self, service_type: Type) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return (
            service_type in self._scoped_instances or 
            self.parent.is_registered(service_type)
        )
    
    def dispose(self) -> None:
        """üóëÔ∏è –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ scope"""
        # –í—ã–∑—ã–≤–∞–µ–º dispose –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
        for instance in self._scoped_instances.values():
            if hasattr(instance, 'dispose'):
                try:
                    instance.dispose()
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ dispose {type(instance)}: {e}")
        
        self._scoped_instances.clear()


class ServiceLocator:
    """üåê Service Locator –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    _container: Optional[DependencyContainer] = None
    
    @classmethod
    def set_container(cls, container: DependencyContainer) -> None:
        """üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        cls._container = container
    
    @classmethod
    def get_container(cls) -> DependencyContainer:
        """üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        if cls._container is None:
            raise DependencyError("ServiceLocator", "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return cls._container
    
    @classmethod
    def resolve(cls, service_type: Type[T]) -> T:
        """üîç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        return cls.get_container().resolve(service_type)
    
    @classmethod
    def is_registered(cls, service_type: Type) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if cls._container is None:
            return False
        return cls._container.is_registered(service_type)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å DI

def injectable(cls):
    """üíâ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∞—Å—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç DI
    cls._injectable = True
    return cls


def singleton(service_type: Type = None):
    """üìå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è singleton —Å–µ—Ä–≤–∏—Å–æ–≤"""
    def decorator(cls):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if hasattr(ServiceLocator, '_container') and ServiceLocator._container:
            target_type = service_type or cls
            ServiceLocator._container.register_singleton(target_type, cls)
        
        cls._lifetime = Lifetime.SINGLETON
        cls._service_type = service_type
        return cls
    
    return decorator


def transient(service_type: Type = None):
    """üîÑ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è transient —Å–µ—Ä–≤–∏—Å–æ–≤"""
    def decorator(cls):
        if hasattr(ServiceLocator, '_container') and ServiceLocator._container:
            target_type = service_type or cls
            ServiceLocator._container.register_transient(target_type, cls)
        
        cls._lifetime = Lifetime.TRANSIENT
        cls._service_type = service_type
        return cls
    
    return decorator


def factory(service_type: Type, lifetime: Lifetime = Lifetime.TRANSIENT):
    """üè≠ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ–∞–±—Ä–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        if hasattr(ServiceLocator, '_container') and ServiceLocator._container:
            ServiceLocator._container.register_factory(service_type, func, lifetime)
        
        func._factory_for = service_type
        func._lifetime = lifetime
        return func
    
    return decorator


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

class ContainerBuilder:
    """üèóÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    
    def __init__(self):
        self.container = DependencyContainer()
    
    def register_singleton(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'ContainerBuilder':
        """üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è singleton"""
        self.container.register_singleton(service_type, implementation_type)
        return self
    
    def register_transient(self, service_type: Type[T], implementation_type: Type[T] = None) -> 'ContainerBuilder':
        """üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è transient"""
        self.container.register_transient(service_type, implementation_type)
        return self
    
    def register_instance(self, service_type: Type[T], instance: T) -> 'ContainerBuilder':
        """üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        self.container.register_instance(service_type, instance)
        return self
    
    def register_factory(self, service_type: Type[T], factory: Callable[..., T], lifetime: Lifetime = Lifetime.TRANSIENT) -> 'ContainerBuilder':
        """üè≠ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏"""
        self.container.register_factory(service_type, factory, lifetime)
        return self
    
    def auto_register_module(self, module) -> 'ContainerBuilder':
        """ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è"""
        import inspect
        
        for name, obj in inspect.getmembers(module):
            if inspect.isclass(obj):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
                if hasattr(obj, '_lifetime'):
                    service_type = getattr(obj, '_service_type', obj)
                    
                    if obj._lifetime == Lifetime.SINGLETON:
                        self.container.register_singleton(service_type, obj)
                    elif obj._lifetime == Lifetime.TRANSIENT:
                        self.container.register_transient(service_type, obj)
            
            elif inspect.isfunction(obj):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                if hasattr(obj, '_factory_for'):
                    service_type = obj._factory_for
                    lifetime = getattr(obj, '_lifetime', Lifetime.TRANSIENT)
                    self.container.register_factory(service_type, obj, lifetime)
        
        return self
    
    def build(self) -> DependencyContainer:
        """üî® –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ ServiceLocator
        ServiceLocator.set_container(self.container)
        return self.container


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è scope

class DependencyScope:
    """üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è dependency scope"""
    
    def __init__(self, parent_container: DependencyContainer):
        self.parent_container = parent_container
        self.scoped_container: Optional[ScopedContainer] = None
        self.original_container: Optional[DependencyContainer] = None
    
    def __enter__(self) -> ScopedContainer:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.original_container = ServiceLocator._container
        
        # –°–æ–∑–¥–∞–µ–º scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.scoped_container = self.parent_container.create_scope()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
        ServiceLocator.set_container(self.scoped_container)
        
        return self.scoped_container
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã scope
        if self.scoped_container:
            self.scoped_container.dispose()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        if self.original_container:
            ServiceLocator.set_container(self.original_container)


# –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ DI

class DependencyValidator:
    """‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    def __init__(self, container: DependencyContainer):
        self.container = container
    
    def validate_all(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        errors = []
        
        for service_type, descriptor in self.container.get_all_registrations().items():
            try:
                self._validate_service(service_type, descriptor)
            except Exception as e:
                errors.append(f"{service_type.__name__}: {e}")
        
        if errors:
            raise DependencyError("Validation", f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {'; '.join(errors)}")
    
    def _validate_service(self, service_type: Type, descriptor: ServiceDescriptor) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if descriptor.is_instance:
            if not isinstance(descriptor.instance, service_type):
                raise DependencyError(
                    service_type.__name__,
                    f"–≠–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º {service_type.__name__}"
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
        if descriptor.is_factory:
            self._validate_factory(service_type, descriptor.factory)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        if descriptor.implementation_type:
            self._validate_implementation(service_type, descriptor.implementation_type)
            return
        
        raise DependencyError(
            service_type.__name__,
            "–ù–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, —Ñ–∞–±—Ä–∏–∫–∏ –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"
        )
    
    def _validate_implementation(self, service_type: Type, implementation_type: Type) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ/—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if not issubclass(implementation_type, service_type):
            # –î–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if hasattr(service_type, '__protocol__'):
                # –≠—Ç–æ Protocol - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
                self._validate_protocol_implementation(service_type, implementation_type)
            else:
                raise DependencyError(
                    service_type.__name__,
                    f"–¢–∏–ø {implementation_type.__name__} –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç {service_type.__name__}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        self._validate_constructor(implementation_type)
    
    def _validate_protocol_implementation(self, protocol_type: Type, implementation_type: Type) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        import inspect
        
        protocol_methods = [
            name for name, method in inspect.getmembers(protocol_type, inspect.isfunction)
            if not name.startswith('_')
        ]
        
        implementation_methods = [
            name for name, method in inspect.getmembers(implementation_type, inspect.ismethod)
            if not name.startswith('_')
        ]
        
        missing_methods = set(protocol_methods) - set(implementation_methods)
        if missing_methods:
            raise DependencyError(
                protocol_type.__name__,
                f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è {implementation_type.__name__} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã: {', '.join(missing_methods)}"
            )
    
    def _validate_constructor(self, implementation_type: Type) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞"""
        import inspect
        
        try:
            constructor = implementation_type.__init__
            signature = inspect.signature(constructor)
            
            for param_name, param in signature.parameters.items():
                if param_name == 'self':
                    continue
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if param.annotation == inspect.Parameter.empty:
                    if param.default == inspect.Parameter.empty:
                        raise DependencyError(
                            implementation_type.__name__,
                            f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' –Ω–µ –∏–º–µ–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                        )
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    if not self.container.is_registered(param.annotation):
                        if param.default == inspect.Parameter.empty:
                            raise DependencyError(
                                implementation_type.__name__,
                                f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '{param.annotation.__name__}' –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ '{param_name}' –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
                            )
        
        except TypeError as e:
            raise DependencyError(
                implementation_type.__name__,
                f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞: {e}"
            )
    
    def _validate_factory(self, service_type: Type, factory: Callable) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏"""
        import inspect
        
        try:
            signature = inspect.signature(factory)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø
            if signature.return_annotation != inspect.Parameter.empty:
                if not issubclass(signature.return_annotation, service_type):
                    raise DependencyError(
                        service_type.__name__,
                        f"–§–∞–±—Ä–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {signature.return_annotation.__name__}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {service_type.__name__}"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–±—Ä–∏–∫–∏
            for param_name, param in signature.parameters.items():
                if param.annotation != inspect.Parameter.empty:
                    if not self.container.is_registered(param.annotation):
                        if param.default == inspect.Parameter.empty:
                            raise DependencyError(
                                service_type.__name__,
                                f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '{param.annotation.__name__}' –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞"
                            )
        
        except TypeError as e:
            raise DependencyError(
                service_type.__name__,
                f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–±—Ä–∏–∫–∏: {e}"
            )


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def resolve(service_type: Type[T]) -> T:
    """üîç –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    return ServiceLocator.resolve(service_type)


def create_container() -> ContainerBuilder:
    """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    return ContainerBuilder()


def scope(container: DependencyContainer = None) -> DependencyScope:
    """üéØ –°–æ–∑–¥–∞–Ω–∏–µ scope"""
    target_container = container or ServiceLocator.get_container()
    return DependencyScope(target_container)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dependency Injection Container")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    from abc import ABC, abstractmethod
    
    class IRepository(ABC):
        @abstractmethod
        def save(self, data: str) -> None:
            pass
    
    class DatabaseRepository(IRepository):
        def __init__(self, connection_string: str = "default"):
            self.connection_string = connection_string
        
        def save(self, data: str) -> None:
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î ({self.connection_string}): {data}")
    
    @injectable
    class UserService:
        def __init__(self, repository: IRepository):
            self.repository = repository
        
        def create_user(self, name: str) -> None:
            self.repository.save(f"User: {name}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = (create_container()
                .register_singleton(IRepository, DatabaseRepository)
                .register_transient(UserService)
                .build())
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
    validator = DependencyValidator(container)
    try:
        validator.validate_all()
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–∞")
    except DependencyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º
    try:
        user_service = resolve(UserService)
        user_service.create_user("John Doe")
        print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º scope
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
    with scope() as scoped_container:
        scoped_service = scoped_container.resolve(UserService)
        scoped_service.create_user("Jane Doe")
        print("‚úÖ Scoped –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")