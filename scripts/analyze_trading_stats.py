#!/usr/bin/env python3
"""üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
import json
from pathlib import Path
from datetime import datetime, timedelta
from decimal import Decimal
import argparse

def load_trading_data(days=30):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    data_dir = Path("data")
    trades_file = data_dir / "trades.json"
    
    if not trades_file.exists():
        print("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        sample_trades = generate_sample_trades(days)
        return sample_trades
    
    with open(trades_file, "r") as f:
        trades = json.load(f)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    cutoff_date = datetime.now() - timedelta(days=days)
    filtered_trades = [
        trade for trade in trades
        if datetime.fromisoformat(trade["timestamp"]) >= cutoff_date
    ]
    
    return filtered_trades

def generate_sample_trades(days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    import random
    trades = []
    
    for i in range(days * 2):  # 2 —Å–¥–µ–ª–∫–∏ –≤ –¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º
        trade_time = datetime.now() - timedelta(days=days-i//2, hours=random.randint(0, 23))
        trades.append({
            "trade_id": f"sample_{i}",
            "pair": "DOGE_EUR",
            "type": "buy" if i % 2 == 0 else "sell",
            "amount": float(Decimal(str(100 + random.randint(-20, 50)))),
            "price": float(Decimal("0.18") + Decimal(str(random.uniform(-0.02, 0.02)))),
            "pnl": random.uniform(-5, 8),
            "timestamp": trade_time.isoformat()
        })
    
    return trades

def calculate_statistics(trades):
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not trades:
        return {}
    
    total_trades = len(trades)
    profitable_trades = len([t for t in trades if float(t.get("pnl", 0)) > 0])
    win_rate = profitable_trades / total_trades if total_trades > 0 else 0
    
    # PnL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    pnls = [float(t.get("pnl", 0)) for t in trades]
    total_pnl = sum(pnls)
    avg_pnl = total_pnl / len(pnls) if pnls else 0
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    max_profit = max(pnls) if pnls else 0
    max_loss = min(pnls) if pnls else 0
    
    return {
        "total_trades": total_trades,
        "profitable_trades": profitable_trades,
        "win_rate": win_rate,
        "total_pnl": total_pnl,
        "avg_pnl": avg_pnl,
        "max_profit": max_profit,
        "max_loss": max_loss
    }

def generate_report(stats, days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    report = f"""
üìä –û–¢–ß–ï–¢ –ü–û –¢–û–†–ì–û–í–õ–ï (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)
{'='*50}

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}
  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['profitable_trades']}
  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1%}

üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
  ‚Ä¢ –û–±—â–∏–π PnL: {stats['total_pnl']:.2f} EUR
  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL –∑–∞ —Å–¥–µ–ª–∫—É: {stats['avg_pnl']:.2f} EUR
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['max_profit']:.2f} EUR
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {stats['max_loss']:.2f} EUR

üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏
    if stats['win_rate'] >= 0.6:
        report += "  ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç (>60%)\n"
    elif stats['win_rate'] >= 0.5:
        report += "  ‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç (50-60%)\n"
    else:
        report += "  ‚ùå –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç (<50%)\n"
    
    if stats['total_pnl'] > 0:
        report += "  ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n"
    else:
        report += "  ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n"
    
    return report

def main():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    parser.add_argument("--days", type=int, default=30, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--output", default="reports", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    trades = load_trading_data(args.days)
    if not trades:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = calculate_statistics(trades)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_report(stats, args.days)
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    output_dir = Path(args.output)
    output_dir.mkdir(exist_ok=True)
    
    with open(output_dir / f"trading_report_{datetime.now().strftime('%Y%m%d')}.txt", "w") as f:
        f.write(report)
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())
