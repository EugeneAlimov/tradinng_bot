from typing import Optional, List, Dict, Any, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import ITradingStrategy, IDCAStrategy, IPyramidStrategy, IEmergencyExitStrategy
    from ...core.models import (
        TradeSignal, Position, MarketData, TradingPair,
        StrategySignalType, RiskLevel
    )
    from ...core.exceptions import (
        StrategyError, StrategyNotAvailableError, ValidationError
    )
    from ...core.events import DomainEvent, publish_event
    from ...config.settings import get_current_config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class ITradingStrategy: pass
    class IDCAStrategy: pass
    class IPyramidStrategy: pass
    class IEmergencyExitStrategy: pass
    class TradeSignal: pass
    class Position: pass
    class MarketData: pass
    class TradingPair: pass
    class StrategySignalType: pass
    class RiskLevel: pass
    class StrategyError(Exception): pass
    class StrategyNotAvailableError(Exception): pass
    class ValidationError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass
    def get_current_config(): return None


# ================= –¢–ò–ü–´ –°–¢–†–ê–¢–ï–ì–ò–ô =================

class StrategyType(Enum):
    """üéØ –¢–∏–ø—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    DCA = "dca"                    # Dollar Cost Averaging
    PYRAMID = "pyramid"            # –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
    TRAILING_STOP = "trailing_stop" # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
    EMERGENCY_EXIT = "emergency_exit" # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥
    MOMENTUM = "momentum"          # –ú–æ–º–µ–Ω—Ç—É–º
    MEAN_REVERSION = "mean_reversion" # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É


class StrategyStatus(Enum):
    """üìä –°—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    ACTIVE = "active"              # –ê–∫—Ç–∏–≤–Ω–∞
    PAUSED = "paused"              # –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    DISABLED = "disabled"          # –û—Ç–∫–ª—é—á–µ–Ω–∞
    ERROR = "error"                # –û—à–∏–±–∫–∞


@dataclass
class StrategyMetrics:
    """üìà –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    total_signals: int = 0
    executed_signals: int = 0
    successful_trades: int = 0
    total_pnl: Decimal = Decimal('0')
    win_rate: float = 0.0
    average_signal_confidence: float = 0.0
    last_signal_time: Optional[datetime] = None
    execution_errors: int = 0

    @property
    def execution_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        return (self.executed_signals / self.total_signals * 100) if self.total_signals > 0 else 0.0

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return (self.successful_trades / self.executed_signals * 100) if self.executed_signals > 0 else 0.0


@dataclass
class StrategyConfiguration:
    """‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    name: str
    strategy_type: StrategyType
    priority: int
    weight: float  # –í–µ—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    enabled: bool = True
    risk_level: RiskLevel = RiskLevel.MEDIUM
    parameters: Dict[str, Any] = field(default_factory=dict)
    conditions: Dict[str, Any] = field(default_factory=dict)  # –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

    def validate(self) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.priority < 1 or self.priority > 100:
            return False
        if self.weight < 0 or self.weight > 1:
            return False
        return True


@dataclass
class StrategyInstance:
    """üéØ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    id: str
    strategy: ITradingStrategy
    config: StrategyConfiguration
    status: StrategyStatus = StrategyStatus.ACTIVE
    metrics: StrategyMetrics = field(default_factory=StrategyMetrics)
    last_error: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    last_executed_at: Optional[datetime] = None

    @property
    def is_active(self) -> bool:
        """–ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
        return self.status == StrategyStatus.ACTIVE and self.config.enabled

    @property
    def uptime_hours(self) -> float:
        """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö"""
        return (datetime.now() - self.created_at).total_seconds() / 3600


@dataclass
class CombinedSignal:
    """üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    final_signal_type: StrategySignalType
    confidence: float
    contributing_signals: List[Tuple[str, TradeSignal]]  # (strategy_name, signal)
    reasoning: str
    created_at: datetime = field(default_factory=datetime.now)

    @property
    def strategy_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —Å–∏–≥–Ω–∞–ª–µ"""
        return len(self.contributing_signals)


# ================= –û–°–ù–û–í–ù–û–ô –û–†–ö–ï–°–¢–†–ê–¢–û–† =================

class StrategyOrchestrator:
    """üé≠ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self):
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategies: Dict[str, StrategyInstance] = {}

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.active_pairs: Dict[str, List[str]] = {}  # pair -> [strategy_ids]

        # –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_history: List[CombinedSignal] = []
        self.max_history_size = 1000

        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self.total_combined_signals = 0
        self.last_analysis_time: Optional[datetime] = None

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        self.logger.info("üé≠ StrategyOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–Ø–ú–ò =================

    def register_strategy(
        self,
        strategy_id: str,
        strategy: ITradingStrategy,
        config: StrategyConfiguration
    ) -> bool:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not config.validate():
                raise ValidationError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            if strategy_id in self.strategies:
                self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º")

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            instance = StrategyInstance(
                id=strategy_id,
                strategy=strategy,
                config=config
            )

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            self.strategies[strategy_id] = instance

            self.logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {strategy_id} ({config.strategy_type.value})")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}: {e}")
            return False

    def unregister_strategy(self, strategy_id: str) -> bool:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            if strategy_id not in self.strategies:
                self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä
            for pair_strategies in self.active_pairs.values():
                if strategy_id in pair_strategies:
                    pair_strategies.remove(strategy_id)

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            del self.strategies[strategy_id]

            self.logger.info(f"üóëÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} —É–¥–∞–ª–µ–Ω–∞")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id}: {e}")
            return False

    def activate_strategy_for_pair(self, strategy_id: str, pair: str) -> bool:
        """üîõ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""

        try:
            if strategy_id not in self.strategies:
                raise StrategyNotAvailableError(strategy_id, "Strategy not registered")

            instance = self.strategies[strategy_id]
            if not instance.is_active:
                raise StrategyNotAvailableError(strategy_id, f"Strategy status: {instance.status}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
            if pair not in self.active_pairs:
                self.active_pairs[pair] = []

            if strategy_id not in self.active_pairs[pair]:
                self.active_pairs[pair].append(strategy_id)
                self.logger.info(f"üîõ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {pair}")

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_id} –¥–ª—è {pair}: {e}")
            return False

    def deactivate_strategy_for_pair(self, strategy_id: str, pair: str) -> bool:
        """üîö –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""

        try:
            if pair in self.active_pairs and strategy_id in self.active_pairs[pair]:
                self.active_pairs[pair].remove(strategy_id)
                self.logger.info(f"üîö –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {pair}")
                return True

            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    # ================= –ê–ù–ê–õ–ò–ó –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ì–ù–ê–õ–û–í =================

    async def analyze_market(
        self,
        pair: str,
        market_data: MarketData,
        position: Optional[Position] = None
    ) -> CombinedSignal:
        """üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤—Å–µ–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""

        try:
            self.last_analysis_time = datetime.now()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–∞—Ä—ã
            active_strategy_ids = self.active_pairs.get(pair, [])
            if not active_strategy_ids:
                return self._create_hold_signal("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
            signals = []
            for strategy_id in active_strategy_ids:
                try:
                    signal = await self._analyze_with_strategy(
                        strategy_id, market_data, position
                    )
                    if signal:
                        signals.append((strategy_id, signal))

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy_id}: {e}")
                    await self._handle_strategy_error(strategy_id, e)

            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            combined_signal = await self._combine_signals(signals, pair)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_history(combined_signal)

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_signal_event(combined_signal, pair)

            self.total_combined_signals += 1

            return combined_signal

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {pair}: {e}")
            return self._create_hold_signal(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def _analyze_with_strategy(
        self,
        strategy_id: str,
        market_data: MarketData,
        position: Optional[Position]
    ) -> Optional[TradeSignal]:
        """üéØ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""

        try:
            instance = self.strategies[strategy_id]

            if not instance.is_active:
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if not await self._check_strategy_conditions(instance, market_data):
                return None

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            signal = await instance.strategy.analyze(market_data, position)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            if await instance.strategy.validate_signal(signal):
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                instance.metrics.total_signals += 1
                instance.metrics.last_signal_time = datetime.now()
                instance.last_executed_at = datetime.now()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                self._update_average_confidence(instance, signal.confidence)

                return signal
            else:
                self.logger.debug(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç {strategy_id}")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π {strategy_id}: {e}")
            raise StrategyError(f"Strategy analysis failed: {e}", strategy_name=strategy_id)

    async def _combine_signals(
        self,
        signals: List[Tuple[str, TradeSignal]],
        pair: str
    ) -> CombinedSignal:
        """üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

        try:
            if not signals:
                return self._create_hold_signal("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            signal_votes = {
                StrategySignalType.BUY: [],
                StrategySignalType.SELL: [],
                StrategySignalType.HOLD: [],
                StrategySignalType.EMERGENCY_EXIT: []
            }

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø–∞–º —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
            for strategy_id, signal in signals:
                instance = self.strategies[strategy_id]
                weight = instance.config.weight
                weighted_confidence = signal.confidence * weight

                signal_votes[signal.signal_type].append({
                    'strategy_id': strategy_id,
                    'signal': signal,
                    'weight': weight,
                    'weighted_confidence': weighted_confidence
                })

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            final_signal_type = self._determine_final_signal_type(signal_votes)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            final_confidence = self._calculate_combined_confidence(
                signal_votes[final_signal_type]
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            reasoning = self._generate_combination_reasoning(signal_votes, final_signal_type)

            return CombinedSignal(
                final_signal_type=final_signal_type,
                confidence=final_confidence,
                contributing_signals=signals,
                reasoning=reasoning
            )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return self._create_hold_signal(f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def _determine_final_signal_type(
        self,
        signal_votes: Dict[StrategySignalType, List[Dict]]
    ) -> StrategySignalType:
        """üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞"""

        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–º–µ–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if signal_votes[StrategySignalType.EMERGENCY_EXIT]:
            return StrategySignalType.EMERGENCY_EXIT

        # –ü–æ–¥—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        weighted_scores = {}
        for signal_type, votes in signal_votes.items():
            if signal_type == StrategySignalType.EMERGENCY_EXIT:
                continue

            total_score = sum(vote['weighted_confidence'] for vote in votes)
            weighted_scores[signal_type] = total_score

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if not weighted_scores:
            return StrategySignalType.HOLD

        winner = max(weighted_scores.items(), key=lambda x: x[1])

        # –ï—Å–ª–∏ —Å—á–µ—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –∏–ª–∏ –±–ª–∏–∑–∫–∏–π - HOLD
        if winner[1] < 0.3:
            return StrategySignalType.HOLD

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å —Å—á–µ—Ç–æ–≤ (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)
        sorted_scores = sorted(weighted_scores.values(), reverse=True)
        if len(sorted_scores) > 1 and (sorted_scores[0] - sorted_scores[1]) < 0.1:
            return StrategySignalType.HOLD

        return winner[0]

    def _calculate_combined_confidence(self, winning_votes: List[Dict]) -> float:
        """üìä –†–∞—Å—á–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""

        if not winning_votes:
            return 0.0

        # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        total_weight = sum(vote['weight'] for vote in winning_votes)
        if total_weight == 0:
            return 0.0

        weighted_confidence = sum(
            vote['signal'].confidence * vote['weight']
            for vote in winning_votes
        )

        return min(weighted_confidence / total_weight, 1.0)

    # ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =================

    async def _check_strategy_conditions(
        self,
        instance: StrategyInstance,
        market_data: MarketData
    ) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            conditions = instance.config.conditions

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            if 'min_interval_minutes' in conditions:
                if instance.last_executed_at:
                    min_interval = timedelta(minutes=conditions['min_interval_minutes'])
                    if datetime.now() - instance.last_executed_at < min_interval:
                        return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if 'min_volatility' in conditions:
                volatility = market_data.metadata.get('volatility', 0)
                if volatility < conditions['min_volatility']:
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞
            if 'min_volume' in conditions:
                if market_data.volume_24h < Decimal(str(conditions['min_volume'])):
                    return False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            market_conditions = {
                'volatility': market_data.metadata.get('volatility', 0),
                'volume': float(market_data.volume_24h),
                'price_change': market_data.change_24h_percent or 0
            }

            return instance.strategy.can_execute(market_conditions)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    async def _handle_strategy_error(self, strategy_id: str, error: Exception) -> None:
        """üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            instance = self.strategies[strategy_id]
            instance.metrics.execution_errors += 1
            instance.last_error = str(error)

            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if instance.metrics.execution_errors >= 5:
                instance.status = StrategyStatus.ERROR
                self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")

                # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await self._publish_strategy_error_event(strategy_id, error)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    def _create_hold_signal(self, reason: str) -> CombinedSignal:
        """üîÑ –°–æ–∑–¥–∞–Ω–∏–µ HOLD —Å–∏–≥–Ω–∞–ª–∞"""

        return CombinedSignal(
            final_signal_type=StrategySignalType.HOLD,
            confidence=1.0,
            contributing_signals=[],
            reasoning=reason
        )

    def _update_average_confidence(self, instance: StrategyInstance, confidence: float) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        if instance.metrics.average_signal_confidence == 0:
            instance.metrics.average_signal_confidence = confidence
        else:
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            alpha = 0.1
            instance.metrics.average_signal_confidence = (
                alpha * confidence +
                (1 - alpha) * instance.metrics.average_signal_confidence
            )

    def _generate_combination_reasoning(
        self,
        signal_votes: Dict[StrategySignalType, List[Dict]],
        final_signal_type: StrategySignalType
    ) -> str:
        """üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""

        try:
            reasoning_parts = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö
            for signal_type, votes in signal_votes.items():
                if votes:
                    strategies = [vote['strategy_id'] for vote in votes]
                    reasoning_parts.append(f"{signal_type.value}: {', '.join(strategies)}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
            winner_votes = signal_votes[final_signal_type]
            if winner_votes:
                total_confidence = sum(vote['signal'].confidence for vote in winner_votes)
                avg_confidence = total_confidence / len(winner_votes)
                reasoning_parts.append(f"–ò—Ç–æ–≥–æ: {final_signal_type.value} (confidence: {avg_confidence:.2f})")

            return "; ".join(reasoning_parts)

        except Exception:
            return f"Combined signal: {final_signal_type.value}"

    def _add_to_history(self, signal: CombinedSignal) -> None:
        """üìú –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""

        try:
            self.signal_history.append(signal)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.signal_history) > self.max_history_size:
                self.signal_history = self.signal_history[-self.max_history_size:]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

    async def _publish_signal_event(self, signal: CombinedSignal, pair: str) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""

        try:
            event = DomainEvent()
            event.event_type = "combined_signal_generated"
            event.source = "strategy_orchestrator"
            event.metadata = {
                'pair': pair,
                'signal_type': signal.final_signal_type.value,
                'confidence': signal.confidence,
                'strategy_count': signal.strategy_count,
                'reasoning': signal.reasoning
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    async def _publish_strategy_error_event(self, strategy_id: str, error: Exception) -> None:
        """üö® –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ–± –æ—à–∏–±–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            event = DomainEvent()
            event.event_type = "strategy_error"
            event.source = "strategy_orchestrator"
            event.metadata = {
                'strategy_id': strategy_id,
                'error': str(error),
                'error_type': type(error).__name__
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    # ================= –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =================

    def get_strategy_statistics(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

        try:
            total_strategies = len(self.strategies)
            active_strategies = sum(1 for s in self.strategies.values() if s.is_active)

            strategy_stats = {}
            for strategy_id, instance in self.strategies.items():
                strategy_stats[strategy_id] = {
                    'status': instance.status.value,
                    'type': instance.config.strategy_type.value,
                    'priority': instance.config.priority,
                    'weight': instance.config.weight,
                    'uptime_hours': instance.uptime_hours,
                    'metrics': {
                        'total_signals': instance.metrics.total_signals,
                        'execution_rate': instance.metrics.execution_rate,
                        'average_confidence': instance.metrics.average_signal_confidence,
                        'errors': instance.metrics.execution_errors
                    }
                }

            return {
                'summary': {
                    'total_strategies': total_strategies,
                    'active_strategies': active_strategies,
                    'total_combined_signals': self.total_combined_signals,
                    'active_pairs': len(self.active_pairs),
                    'last_analysis': self.last_analysis_time.isoformat() if self.last_analysis_time else None
                },
                'strategies': strategy_stats,
                'active_pairs': {
                    pair: strategy_ids for pair, strategy_ids in self.active_pairs.items()
                },
                'recent_signals': len([
                    s for s in self.signal_history[-10:]
                    if s.final_signal_type != StrategySignalType.HOLD
                ])
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def pause_strategy(self, strategy_id: str) -> bool:
        """‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            if strategy_id in self.strategies:
                self.strategies[strategy_id].status = StrategyStatus.PAUSED
                self.logger.info(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    def resume_strategy(self, strategy_id: str) -> bool:
        """‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            if strategy_id in self.strategies:
                instance = self.strategies[strategy_id]
                if instance.status in [StrategyStatus.PAUSED, StrategyStatus.ERROR]:
                    instance.status = StrategyStatus.ACTIVE
                    instance.last_error = None
                    self.logger.info(f"‚ñ∂Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False
