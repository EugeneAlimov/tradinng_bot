#!/usr/bin/env python3
"""üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å - Domain —Å–ª–æ–π"""

from typing import Optional, List, Dict, Any
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import ITradingStrategy, IRiskManager, IMarketDataProvider
    from ...core.models import (
        TradeSignal, Position, MarketData, TradingPair,
        Money, Price, OrderResult, StrategySignalType
    )
    from ...core.exceptions import (
        TradingError, ValidationError, RiskManagementError,
        InsufficientBalanceError, InvalidSignalError
    )
    from ...core.events import DomainEvent, publish_event
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class ITradingStrategy: pass
    class IRiskManager: pass
    class IMarketDataProvider: pass
    class TradeSignal: pass
    class Position: pass
    class MarketData: pass
    class TradingPair: pass
    class Money: pass
    class Price: pass
    class OrderResult: pass
    class StrategySignalType: pass
    class TradingError(Exception): pass
    class ValidationError(Exception): pass
    class RiskManagementError(Exception): pass
    class InsufficientBalanceError(Exception): pass
    class InvalidSignalError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass


# ================= –î–û–ú–ï–ù–ù–´–ï –¢–ò–ü–´ =================

class TradingMode(Enum):
    """üéØ –†–µ–∂–∏–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    PAPER = "paper"          # –ë—É–º–∞–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    LIVE = "live"            # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
    SIMULATION = "simulation" # –°–∏–º—É–ª—è—Ü–∏—è


class TradingStatus(Enum):
    """üìä –°—Ç–∞—Ç—É—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    IDLE = "idle"                    # –ü—Ä–æ—Å—Ç–æ–π
    ANALYZING = "analyzing"          # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    EXECUTING = "executing"          # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    RISK_CHECK = "risk_check"        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
    EMERGENCY_STOP = "emergency_stop" # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞


@dataclass
class TradingContext:
    """üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    trading_pair: TradingPair
    current_price: Price
    position: Optional[Position]
    available_balance: Money
    market_data: MarketData
    risk_level: str

    @property
    def has_position(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è"""
        return self.position is not None and not self.position.is_empty

    @property
    def position_value(self) -> Optional[Money]:
        """–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.has_position:
            return None

        value = self.position.quantity * self.current_price.value
        return Money(value, self.trading_pair.quote)


@dataclass
class TradingDecision:
    """üéØ –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
    signal: TradeSignal
    risk_assessment: Dict[str, Any]
    execution_plan: Dict[str, Any]
    confidence: float
    strategy_name: str
    reasoning: str

    @property
    def is_actionable(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"""
        return self.signal.is_actionable and self.confidence > 0.5

    @property
    def estimated_value(self) -> Optional[Money]:
        """–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        return self.signal.estimate_trade_value()


# ================= –¢–û–†–ì–û–í–´–ô –°–ï–†–í–ò–° =================

class TradingService:
    """üìà –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å"""

    def __init__(
        self,
        strategies: List[ITradingStrategy],
        risk_manager: IRiskManager,
        market_data_provider: IMarketDataProvider,
        trading_mode: TradingMode = TradingMode.PAPER
    ):
        self.strategies = strategies
        self.risk_manager = risk_manager
        self.market_data_provider = market_data_provider
        self.trading_mode = trading_mode

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.status = TradingStatus.IDLE
        self.last_analysis_time: Optional[datetime] = None
        self.active_strategies: Dict[str, ITradingStrategy] = {}
        self.trading_statistics = TradingStatistics()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self._initialize_strategies()

    def _initialize_strategies(self) -> None:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        for strategy in self.strategies:
            try:
                strategy_name = strategy.get_strategy_name()
                self.active_strategies[strategy_name] = strategy
                self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def analyze_market(
        self,
        trading_pair: TradingPair,
        position: Optional[Position] = None
    ) -> TradingDecision:
        """üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""

        try:
            self.status = TradingStatus.ANALYZING
            self.logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è {trading_pair}")

            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.market_data_provider.get_market_data(str(trading_pair))

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏
            context = await self._create_trading_context(trading_pair, market_data, position)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            signals = await self._analyze_with_strategies(market_data, position)

            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            best_signal = self._select_best_signal(signals)

            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∏—Å–∫–∏
            risk_assessment = await self._assess_risks(best_signal, context)

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_plan = self._create_execution_plan(best_signal, context)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = TradingDecision(
                signal=best_signal,
                risk_assessment=risk_assessment,
                execution_plan=execution_plan,
                confidence=self._calculate_confidence(best_signal, risk_assessment),
                strategy_name=best_signal.strategy_name,
                reasoning=self._generate_reasoning(best_signal, risk_assessment)
            )

            self.last_analysis_time = datetime.now()
            self.status = TradingStatus.IDLE

            return decision

        except Exception as e:
            self.status = TradingStatus.IDLE
            raise TradingError(
                f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}",
                context={'trading_pair': str(trading_pair)}
            ) from e

    async def execute_decision(
        self,
        decision: TradingDecision,
        dry_run: bool = None
    ) -> OrderResult:
        """‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""

        if dry_run is None:
            dry_run = self.trading_mode != TradingMode.LIVE

        try:
            self.status = TradingStatus.EXECUTING
            self.logger.info(f"‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {decision.signal.signal_type}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
            self._validate_decision(decision)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
            if not await self._final_risk_check(decision):
                raise RiskManagementError("–†–µ—à–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")

            # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
            if dry_run:
                result = self._simulate_execution(decision)
                self.logger.info(f"üìÑ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            else:
                result = await self._execute_real_trade(decision)
                self.logger.info(f"üí∞ –†–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ: {result}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.trading_statistics.record_trade(decision, result)

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_trade_event(decision, result)

            self.status = TradingStatus.IDLE
            return result

        except Exception as e:
            self.status = TradingStatus.IDLE
            self.trading_statistics.record_error(e)
            raise TradingError(
                f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}",
                context={'decision': decision.signal.to_dict() if hasattr(decision.signal, 'to_dict') else str(decision.signal)}
            ) from e

    async def _create_trading_context(
        self,
        trading_pair: TradingPair,
        market_data: MarketData,
        position: Optional[Position]
    ) -> TradingContext:
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = Price(
            value=market_data.current_price,
            pair=trading_pair,
            timestamp=market_data.timestamp
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º)
        available_balance = Money(Decimal('1000'), trading_pair.quote)  # –ó–∞–≥–ª—É—à–∫–∞

        # –û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        risk_level = "medium"  # –ó–∞–≥–ª—É—à–∫–∞

        return TradingContext(
            trading_pair=trading_pair,
            current_price=current_price,
            position=position,
            available_balance=available_balance,
            market_data=market_data,
            risk_level=risk_level
        )

    async def _analyze_with_strategies(
        self,
        market_data: MarketData,
        position: Optional[Position]
    ) -> List[TradeSignal]:
        """üéØ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""

        signals = []

        for strategy_name, strategy in self.active_strategies.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                market_conditions = {
                    'volatility': market_data.metadata.get('volatility', 0),
                    'volume': float(market_data.volume_24h),
                    'price_change': market_data.change_24h_percent or 0
                }

                if not strategy.can_execute(market_conditions):
                    self.logger.debug(f"‚è∏Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                    continue

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                signal = await strategy.analyze(market_data, position)

                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                if await strategy.validate_signal(signal):
                    signals.append(signal)
                    self.logger.debug(f"üìä –°–∏–≥–Ω–∞–ª –æ—Ç {strategy_name}: {signal.signal_type}")
                else:
                    self.logger.debug(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç {strategy_name}")

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                continue

        return signals

    def _select_best_signal(self, signals: List[TradeSignal]) -> TradeSignal:
        """üèÜ –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""

        if not signals:
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª HOLD –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö
            return TradeSignal(
                signal_type=StrategySignalType.HOLD,
                strategy_name="default",
                reason="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
            )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        signals.sort(key=lambda s: (s.confidence, self._get_strategy_priority(s.strategy_name)), reverse=True)

        best_signal = signals[0]
        self.logger.debug(f"üèÜ –í—ã–±—Ä–∞–Ω —Å–∏–≥–Ω–∞–ª: {best_signal.signal_type} –æ—Ç {best_signal.strategy_name}")

        return best_signal

    def _get_strategy_priority(self, strategy_name: str) -> int:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        strategy = self.active_strategies.get(strategy_name)
        if strategy and hasattr(strategy, 'get_priority'):
            return strategy.get_priority()
        return 50  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç

    async def _assess_risks(
        self,
        signal: TradeSignal,
        context: TradingContext
    ) -> Dict[str, Any]:
        """üõ°Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"""

        try:
            risk_assessment = await self.risk_manager.assess_trade_risk(signal, context.position)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            risk_assessment.update({
                'balance_sufficient': self._check_balance_sufficiency(signal, context),
                'position_limits_ok': self._check_position_limits(signal, context),
                'daily_limits_ok': await self.risk_manager.check_daily_limits()
            })

            return risk_assessment

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
            return {
                'risk_level': 'high',
                'approved': False,
                'reason': f'–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}'
            }

    def _check_balance_sufficiency(
        self,
        signal: TradeSignal,
        context: TradingContext
    ) -> bool:
        """üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""

        if signal.signal_type == StrategySignalType.BUY:
            required = signal.quantity * signal.price if signal.price else Decimal('0')
            return context.available_balance.amount >= required

        return True  # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω—É–∂–µ–Ω

    def _check_position_limits(
        self,
        signal: TradeSignal,
        context: TradingContext
    ) -> bool:
        """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏"""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        return True

    async def _final_risk_check(self, decision: TradingDecision) -> bool:
        """üîí –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if await self.risk_manager.emergency_stop_check():
                self.logger.warning("üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
            if await self.risk_manager.should_block_trading():
                self.logger.warning("üö´ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏—è
            risk_level = decision.risk_assessment.get('risk_level', 'unknown')
            if risk_level == 'critical':
                self.logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞")
                return False

            return decision.risk_assessment.get('approved', False)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
            return False

    def _create_execution_plan(
        self,
        signal: TradeSignal,
        context: TradingContext
    ) -> Dict[str, Any]:
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""

        return {
            'order_type': 'market' if not signal.price else 'limit',
            'quantity': signal.quantity,
            'price': signal.price,
            'estimated_cost': signal.estimate_trade_value(),
            'execution_time': datetime.now(),
            'stop_loss': getattr(signal, 'stop_loss', None),
            'take_profit': getattr(signal, 'take_profit', None)
        }

    def _calculate_confidence(
        self,
        signal: TradeSignal,
        risk_assessment: Dict[str, Any]
    ) -> float:
        """üéØ –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""

        base_confidence = signal.confidence
        risk_factor = 1.0

        # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        risk_level = risk_assessment.get('risk_level', 'medium')
        if risk_level == 'high':
            risk_factor = 0.7
        elif risk_level == 'critical':
            risk_factor = 0.3

        # –£—á–∏—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if not risk_assessment.get('approved', False):
            risk_factor *= 0.5

        return min(base_confidence * risk_factor, 1.0)

    def _generate_reasoning(
        self,
        signal: TradeSignal,
        risk_assessment: Dict[str, Any]
    ) -> str:
        """üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"""

        parts = [
            f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {signal.strategy_name}",
            f"–°–∏–≥–Ω–∞–ª: {signal.signal_type}",
            f"–ü—Ä–∏—á–∏–Ω–∞: {signal.reason}",
            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {signal.confidence:.1%}",
            f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_assessment.get('risk_level', 'unknown')}"
        ]

        if risk_assessment.get('approved'):
            parts.append("‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")
        else:
            parts.append("‚ùå –ù–µ –æ–¥–æ–±—Ä–µ–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º")

        return "; ".join(parts)

    def _validate_decision(self, decision: TradingDecision) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""

        if not decision.signal:
            raise ValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")

        if decision.signal.signal_type == StrategySignalType.HOLD:
            return  # HOLD –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω

        if not decision.signal.pair:
            raise ValidationError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞")

        if decision.signal.quantity <= 0:
            raise ValidationError(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                field="quantity",
                value=decision.signal.quantity
            )

        if decision.confidence < 0.3:
            raise ValidationError(
                "–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
                field="confidence",
                value=decision.confidence
            )

    def _simulate_execution(self, decision: TradingDecision) -> OrderResult:
        """üìÑ –°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""

        from ...core.models import OrderType, OrderStatus

        return OrderResult(
            order_id=f"sim_{datetime.now().timestamp()}",
            pair=decision.signal.pair or TradingPair.from_string("DOGE_EUR"),
            order_type=OrderType.BUY if decision.signal.signal_type == StrategySignalType.BUY else OrderType.SELL,
            status=OrderStatus.FILLED,
            requested_quantity=decision.signal.quantity,
            executed_quantity=decision.signal.quantity,
            requested_price=decision.signal.price,
            executed_price=decision.signal.price,
            total_cost=decision.signal.quantity * (decision.signal.price or Decimal('0')),
            commission=Decimal('0')
        )

    async def _execute_real_trade(self, decision: TradingDecision) -> OrderResult:
        """üí∞ –†–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        self.logger.warning("‚ö†Ô∏è –†–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è")
        return self._simulate_execution(decision)

    async def _publish_trade_event(
        self,
        decision: TradingDecision,
        result: OrderResult
    ) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""

        try:
            event = DomainEvent()
            event.event_type = "trade_executed"
            event.source = "trading_service"
            event.metadata = {
                'strategy': decision.strategy_name,
                'signal_type': decision.signal.signal_type,
                'order_id': result.order_id,
                'success': result.is_successful
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    # ================= –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =================

    def get_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return self.trading_statistics.to_dict()

    def get_status(self) -> Dict[str, Any]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            'status': self.status.value,
            'trading_mode': self.trading_mode.value,
            'active_strategies': list(self.active_strategies.keys()),
            'last_analysis': self.last_analysis_time.isoformat() if self.last_analysis_time else None,
            'statistics': self.get_statistics()
        }


# ================= –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò =================

class TradingStatistics:
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self):
        self.total_trades = 0
        self.successful_trades = 0
        self.total_volume = Decimal('0')
        self.total_pnl = Decimal('0')
        self.trades_by_strategy: Dict[str, int] = {}
        self.errors_count = 0
        self.start_time = datetime.now()

    def record_trade(self, decision: TradingDecision, result: OrderResult) -> None:
        """üìù –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏"""
        self.total_trades += 1

        if result.is_successful:
            self.successful_trades += 1
            self.total_volume += result.total_cost

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        strategy_name = decision.strategy_name
        self.trades_by_strategy[strategy_name] = self.trades_by_strategy.get(strategy_name, 0) + 1

    def record_error(self, error: Exception) -> None:
        """‚ùå –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.errors_count += 1

    @property
    def success_rate(self) -> float:
        """üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if self.total_trades == 0:
            return 0.0
        return (self.successful_trades / self.total_trades) * 100

    @property
    def uptime_hours(self) -> float:
        """‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö"""
        return (datetime.now() - self.start_time).total_seconds() / 3600

    def to_dict(self) -> Dict[str, Any]:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'total_trades': self.total_trades,
            'successful_trades': self.successful_trades,
            'success_rate': self.success_rate,
            'total_volume': str(self.total_volume),
            'total_pnl': str(self.total_pnl),
            'trades_by_strategy': self.trades_by_strategy,
            'errors_count': self.errors_count,
            'uptime_hours': self.uptime_hours
        }
