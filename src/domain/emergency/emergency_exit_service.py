from typing import Optional, List, Dict, Any, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import IEmergencyExitStrategy, ITradeExecutor, IPositionManager, IRiskManager
    from ...core.models import (
        Position, TradeSignal, OrderResult, TradingPair,
        StrategySignalType, RiskLevel
    )
    from ...core.exceptions import (
        EmergencyStopError, TradingError, RiskManagementError,
        PositionError, ValidationError
    )
    from ...core.events import DomainEvent, publish_event
    from ...config.settings import get_current_config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class IEmergencyExitStrategy: pass
    class ITradeExecutor: pass
    class IPositionManager: pass
    class IRiskManager: pass
    class Position: pass
    class TradeSignal: pass
    class OrderResult: pass
    class TradingPair: pass
    class StrategySignalType: pass
    class RiskLevel: pass
    class EmergencyStopError(Exception): pass
    class TradingError(Exception): pass
    class RiskManagementError(Exception): pass
    class PositionError(Exception): pass
    class ValidationError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass
    def get_current_config(): return None


# ================= –¢–ò–ü–´ –ê–í–ê–†–ò–ô–ù–´–• –í–´–•–û–î–û–í =================

class EmergencyTrigger(Enum):
    """üö® –¢—Ä–∏–≥–≥–µ—Ä—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
    STOP_LOSS = "stop_loss"                    # –°—Ç–æ–ø-–ª–æ—Å—Å
    DRAWDOWN_LIMIT = "drawdown_limit"          # –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
    DAILY_LOSS_LIMIT = "daily_loss_limit"      # –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤
    POSITION_LOSS = "position_loss"            # –£–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    MARKET_CRASH = "market_crash"              # –û–±–≤–∞–ª —Ä—ã–Ω–∫–∞
    CORRELATION_SPIKE = "correlation_spike"    # –í—Å–ø–ª–µ—Å–∫ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    LIQUIDITY_CRISIS = "liquidity_crisis"      # –ö—Ä–∏–∑–∏—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    MANUAL_TRIGGER = "manual_trigger"          # –†—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
    SYSTEM_ERROR = "system_error"              # –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞


class EmergencyLevel(Enum):
    """üìä –£—Ä–æ–≤–Ω–∏ –∞–≤–∞—Ä–∏–π–Ω–æ—Å—Ç–∏"""
    YELLOW = "yellow"      # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    ORANGE = "orange"      # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    RED = "red"           # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    BLACK = "black"       # –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞


class ExitStrategy(Enum):
    """üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞"""
    IMMEDIATE = "immediate"            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
    GRADUAL = "gradual"               # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
    SELECTIVE = "selective"           # –°–µ–ª–µ–∫—Ç–∏–≤–Ω—ã–π –≤—ã—Ö–æ–¥
    PARTIAL = "partial"               # –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã—Ö–æ–¥
    HOLD_AND_MONITOR = "hold_monitor" # –£–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º


@dataclass
class EmergencyCondition:
    """‚ö†Ô∏è –£—Å–ª–æ–≤–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
    id: str
    trigger: EmergencyTrigger
    level: EmergencyLevel
    threshold_value: Decimal
    current_value: Decimal
    description: str
    is_active: bool = True
    cooldown_minutes: int = 30
    last_triggered: Optional[datetime] = None

    @property
    def is_triggered(self) -> bool:
        """–°—Ä–∞–±–æ—Ç–∞–ª–æ –ª–∏ —É—Å–ª–æ–≤–∏–µ"""
        if not self.is_active:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self.last_triggered:
            cooldown_period = timedelta(minutes=self.cooldown_minutes)
            if datetime.now() - self.last_triggered < cooldown_period:
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
        return self.current_value >= self.threshold_value

    @property
    def severity_score(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ (0-100)"""
        if self.threshold_value <= 0:
            return 0.0

        ratio = float(self.current_value / self.threshold_value)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        level_multipliers = {
            EmergencyLevel.YELLOW: 25,
            EmergencyLevel.ORANGE: 50,
            EmergencyLevel.RED: 75,
            EmergencyLevel.BLACK: 100
        }

        base_score = level_multipliers.get(self.level, 50)
        return min(base_score * ratio, 100.0)


@dataclass
class EmergencyAction:
    """üéØ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    id: str
    trigger: EmergencyTrigger
    strategy: ExitStrategy
    target_positions: List[str]  # –í–∞–ª—é—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞
    exit_percentage: float       # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
    priority: int               # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    max_slippage: Decimal       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ª–∏–ø–ø–∞–∂
    timeout_seconds: int        # –¢–∞–π–º–∞—É—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    description: str
    created_at: datetime = field(default_factory=datetime.now)
    executed_at: Optional[datetime] = None
    is_executed: bool = False
    execution_results: List[OrderResult] = field(default_factory=list)

    @property
    def execution_time_seconds(self) -> Optional[float]:
        """–í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.executed_at:
            return (self.executed_at - self.created_at).total_seconds()
        return None


@dataclass
class MarketConditions:
    """üìä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
    btc_change_24h: Decimal = Decimal('0')
    market_fear_index: int = 50  # 0-100
    volume_spike_ratio: Decimal = Decimal('1')
    correlation_to_btc: Decimal = Decimal('0')
    liquidity_score: Decimal = Decimal('100')
    volatility_index: Decimal = Decimal('0')

    def get_danger_level(self) -> EmergencyLevel:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        danger_score = 0

        # BTC –ø–∞–¥–µ–Ω–∏–µ
        if self.btc_change_24h < Decimal('-10'):
            danger_score += 30
        elif self.btc_change_24h < Decimal('-5'):
            danger_score += 15

        # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞
        if self.market_fear_index < 20:
            danger_score += 25
        elif self.market_fear_index < 40:
            danger_score += 10

        # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        if self.liquidity_score < 30:
            danger_score += 25
        elif self.liquidity_score < 60:
            danger_score += 10

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        if self.volatility_index > Decimal('50'):
            danger_score += 20

        if danger_score >= 70:
            return EmergencyLevel.BLACK
        elif danger_score >= 50:
            return EmergencyLevel.RED
        elif danger_score >= 30:
            return EmergencyLevel.ORANGE
        else:
            return EmergencyLevel.YELLOW


# ================= –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° =================

class EmergencyExitService(IEmergencyExitStrategy):
    """üö® –°–µ—Ä–≤–∏—Å –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

    def __init__(
        self,
        trade_executor: ITradeExecutor,
        position_manager: IPositionManager,
        risk_manager: IRiskManager
    ):
        self.trade_executor = trade_executor
        self.position_manager = position_manager
        self.risk_manager = risk_manager

        # –£—Å–ª–æ–≤–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        self.emergency_conditions: Dict[str, EmergencyCondition] = {}

        # –ò—Å—Ç–æ—Ä–∏—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.emergency_history: List[EmergencyAction] = []

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_emergency_active = False
        self.emergency_level = EmergencyLevel.YELLOW
        self.last_market_check = datetime.now()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_concurrent_exits = 5
        self.default_exit_timeout = 30  # —Å–µ–∫—É–Ω–¥
        self.market_check_interval = timedelta(minutes=1)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._initialize_default_conditions()

        self.logger.info("üö® EmergencyExitService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ================= –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê =================

    async def assess_emergency_conditions(
        self,
        position: Position,
        current_price: Decimal,
        market_data: Dict[str, Any]
    ) -> Tuple[bool, str, float]:
        """üîç –û—Ü–µ–Ω–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            market_conditions = self._parse_market_data(market_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._update_position_conditions(position, current_price)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            await self._update_market_conditions(market_conditions)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
            triggered_conditions = []
            max_severity = 0.0

            for condition in self.emergency_conditions.values():
                if condition.is_triggered:
                    triggered_conditions.append(condition)
                    max_severity = max(max_severity, condition.severity_score)

            if triggered_conditions:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
                exit_percentage = self._calculate_exit_percentage(max_severity)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω
                reasons = [cond.description for cond in triggered_conditions]
                reason_text = "; ".join(reasons)

                self.logger.warning(f"üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {reason_text}")

                return True, reason_text, exit_percentage

            return False, "–ê–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", 0.0

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return True, f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}", 100.0  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –ø–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥

    async def get_exit_price(
        self,
        position: Position,
        current_price: Decimal
    ) -> Decimal:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = get_current_config()

            if config and hasattr(config, 'emergency'):
                max_slippage = config.emergency.max_slippage_percent / 100
            else:
                max_slippage = Decimal('0.02')  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –î–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ª–∏–ø–ø–∞–∂ –≤ —Ö—É–¥—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            emergency_price = current_price * (Decimal('1') - max_slippage)

            self.logger.debug(f"üí∞ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {emergency_price} (—Å–ª–∏–ø–ø–∞–∂: {max_slippage*100}%)")

            return emergency_price

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –≤—ã—Ö–æ–¥–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—É —Å 5% —Å–ª–∏–ø–ø–∞–∂–µ–º
            return current_price * Decimal('0.95')

    async def execute_emergency_exit(
        self,
        positions: List[Position],
        trigger: EmergencyTrigger,
        exit_percentage: float = 100.0
    ) -> List[OrderResult]:
        """üö® –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        try:
            self.logger.critical(f"üö® –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ê–í–ê–†–ò–ô–ù–´–ô –í–´–•–û–î: {trigger.value}")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
            self.is_emergency_active = True

            # –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action = EmergencyAction(
                id=f"emergency_{datetime.now().timestamp()}",
                trigger=trigger,
                strategy=ExitStrategy.IMMEDIATE,
                target_positions=[pos.currency for pos in positions],
                exit_percentage=exit_percentage,
                priority=1,
                max_slippage=Decimal('0.05'),  # 5% –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ª–∏–ø–ø–∞–∂
                timeout_seconds=self.default_exit_timeout,
                description=f"Emergency exit triggered by {trigger.value}"
            )

            # –ò—Å–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            results = []

            for position in positions:
                try:
                    result = await self._execute_position_exit(position, action)
                    if result:
                        results.append(result)
                        action.execution_results.append(result)

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ {position.currency}: {e}")
                    continue

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action.executed_at = datetime.now()
            action.is_executed = True
            self.emergency_history.append(action)

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_emergency_event(action, results)

            self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–´–ô –í–´–•–û–î –ó–ê–í–ï–†–®–ï–ù: {len(results)} –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ")

            return results

        except Exception as e:
            self.logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–í–ê–†–ò–ô–ù–û–ì–û –í–´–•–û–î–ê: {e}")
            raise EmergencyStopError(f"Emergency exit failed: {e}")
        finally:
            self.is_emergency_active = False

    async def check_system_health(self) -> Dict[str, Any]:
        """üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""

        try:
            health_status = {
                'is_emergency_active': self.is_emergency_active,
                'emergency_level': self.emergency_level.value,
                'active_conditions': len([c for c in self.emergency_conditions.values() if c.is_active]),
                'triggered_conditions': len([c for c in self.emergency_conditions.values() if c.is_triggered]),
                'last_emergency': None,
                'system_status': 'healthy'
            }

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–º –≤—ã—Ö–æ–¥–µ
            if self.emergency_history:
                last_emergency = self.emergency_history[-1]
                health_status['last_emergency'] = {
                    'trigger': last_emergency.trigger.value,
                    'executed_at': last_emergency.executed_at.isoformat() if last_emergency.executed_at else None,
                    'positions_affected': len(last_emergency.target_positions),
                    'success_rate': len(last_emergency.execution_results) / len(last_emergency.target_positions) if last_emergency.target_positions else 0
                }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            triggered_count = health_status['triggered_conditions']

            if triggered_count >= 3:
                health_status['system_status'] = 'critical'
            elif triggered_count >= 2:
                health_status['system_status'] = 'warning'
            elif triggered_count >= 1:
                health_status['system_status'] = 'caution'

            return health_status

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {
                'system_status': 'error',
                'error': str(e),
                'is_emergency_active': self.is_emergency_active
            }

    # ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–õ–û–í–ò–Ø–ú–ò =================

    def add_emergency_condition(self, condition: EmergencyCondition) -> bool:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        try:
            self.emergency_conditions[condition.id] = condition

            self.logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {condition.id}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {e}")
            return False

    def remove_emergency_condition(self, condition_id: str) -> bool:
        """‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        try:
            if condition_id in self.emergency_conditions:
                del self.emergency_conditions[condition_id]
                self.logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ: {condition_id}")
                return True

            return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {e}")
            return False

    def activate_condition(self, condition_id: str) -> bool:
        """üîõ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ª–æ–≤–∏—è"""

        if condition_id in self.emergency_conditions:
            self.emergency_conditions[condition_id].is_active = True
            self.logger.info(f"üîõ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ: {condition_id}")
            return True

        return False

    def deactivate_condition(self, condition_id: str) -> bool:
        """üîö –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—Å–ª–æ–≤–∏—è"""

        if condition_id in self.emergency_conditions:
            self.emergency_conditions[condition_id].is_active = False
            self.logger.info(f"üîö –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ: {condition_id}")
            return True

        return False

    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =================

    def _initialize_default_conditions(self) -> None:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""

        default_conditions = [
            EmergencyCondition(
                id="daily_loss_limit",
                trigger=EmergencyTrigger.DAILY_LOSS_LIMIT,
                level=EmergencyLevel.RED,
                threshold_value=Decimal('500'),  # 500 EUR –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫
                current_value=Decimal('0'),
                description="–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–æ–≤",
                cooldown_minutes=60
            ),

            EmergencyCondition(
                id="position_loss_20",
                trigger=EmergencyTrigger.POSITION_LOSS,
                level=EmergencyLevel.ORANGE,
                threshold_value=Decimal('20'),  # 20% —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                current_value=Decimal('0'),
                description="–£–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏–ª 20%",
                cooldown_minutes=30
            ),

            EmergencyCondition(
                id="position_loss_30",
                trigger=EmergencyTrigger.POSITION_LOSS,
                level=EmergencyLevel.RED,
                threshold_value=Decimal('30'),  # 30% —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                current_value=Decimal('0'),
                description="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ 30%",
                cooldown_minutes=15
            ),

            EmergencyCondition(
                id="market_crash",
                trigger=EmergencyTrigger.MARKET_CRASH,
                level=EmergencyLevel.BLACK,
                threshold_value=Decimal('15'),  # BTC –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ 15%
                current_value=Decimal('0'),
                description="–û–±–≤–∞–ª —Ä—ã–Ω–∫–∞ - BTC –ø–∞–¥–µ–Ω–∏–µ >15%",
                cooldown_minutes=180
            )
        ]

        for condition in default_conditions:
            self.emergency_conditions[condition.id] = condition

    async def _execute_position_exit(
        self,
        position: Position,
        action: EmergencyAction
    ) -> Optional[OrderResult]:
        """üèÉ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""

        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            exit_quantity = position.quantity * Decimal(str(action.exit_percentage / 100))

            if exit_quantity <= 0:
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞
            current_price = Decimal('0.1')  # –ó–∞–≥–ª—É—à–∫–∞ - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç market data
            exit_price = current_price * (Decimal('1') - action.max_slippage)

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
            emergency_signal = TradeSignal(
                signal_type=StrategySignalType.EMERGENCY_EXIT,
                pair=TradingPair(position.currency, 'EUR'),
                quantity=exit_quantity,
                price=exit_price,
                confidence=1.0,
                strategy_name="emergency_exit",
                reason=action.description,
                risk_level=RiskLevel.CRITICAL
            )

            # –ò—Å–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ trade executor
            result = await self.trade_executor.execute_signal(emergency_signal)

            self.logger.warning(f"üèÉ –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ {position.currency}: {exit_quantity}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ {position.currency}: {e}")
            return None

    async def _update_position_conditions(
        self,
        position: Position,
        current_price: Decimal
    ) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏"""

        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –ø—Ä–æ—Ü–µ–Ω—Ç
            pnl_percent = position.calculate_pnl_percentage(current_price)

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —É–±—ã—Ç–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            for condition in self.emergency_conditions.values():
                if condition.trigger == EmergencyTrigger.POSITION_LOSS:
                    condition.current_value = Decimal(str(abs(pnl_percent))) if pnl_percent < 0 else Decimal('0')

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø–æ–∑–∏—Ü–∏–∏: {e}")

    async def _update_market_conditions(self, market_conditions: MarketConditions) -> None:
        """üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            for condition in self.emergency_conditions.values():
                if condition.trigger == EmergencyTrigger.MARKET_CRASH:
                    condition.current_value = abs(market_conditions.btc_change_24h)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–≤–∞—Ä–∏–π–Ω–æ—Å—Ç–∏
            self.emergency_level = market_conditions.get_danger_level()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")

    def _parse_market_data(self, market_data: Dict[str, Any]) -> MarketConditions:
        """üìä –ü–∞—Ä—Å–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        return MarketConditions(
            btc_change_24h=Decimal(str(market_data.get('btc_change_24h', 0))),
            market_fear_index=market_data.get('fear_index', 50),
            volume_spike_ratio=Decimal(str(market_data.get('volume_spike', 1))),
            correlation_to_btc=Decimal(str(market_data.get('btc_correlation', 0))),
            liquidity_score=Decimal(str(market_data.get('liquidity', 100))),
            volatility_index=Decimal(str(market_data.get('volatility', 0)))
        )

    def _calculate_exit_percentage(self, severity_score: float) -> float:
        """üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"""

        if severity_score >= 90:
            return 100.0  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥
        elif severity_score >= 75:
            return 75.0   # 75% –≤—ã—Ö–æ–¥
        elif severity_score >= 50:
            return 50.0   # –ü–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        elif severity_score >= 25:
            return 25.0   # –ß–µ—Ç–≤–µ—Ä—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        else:
            return 10.0   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥

    async def _publish_emergency_event(
        self,
        action: EmergencyAction,
        results: List[OrderResult]
    ) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        try:
            event = DomainEvent()
            event.event_type = "emergency_exit_executed"
            event.source = "emergency_exit_service"
            event.metadata = {
                'trigger': action.trigger.value,
                'strategy': action.strategy.value,
                'positions_count': len(action.target_positions),
                'exit_percentage': action.exit_percentage,
                'successful_exits': len(results),
                'execution_time': action.execution_time_seconds,
                'description': action.description
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    # ================= –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê =================

    def get_emergency_statistics(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤"""

        try:
            total_emergencies = len(self.emergency_history)
            successful_emergencies = len([a for a in self.emergency_history if a.is_executed])

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º
            trigger_stats = {}
            for action in self.emergency_history:
                trigger = action.trigger.value
                trigger_stats[trigger] = trigger_stats.get(trigger, 0) + 1

            # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞
            avg_exit_percentage = 0.0
            if self.emergency_history:
                avg_exit_percentage = sum(a.exit_percentage for a in self.emergency_history) / len(self.emergency_history)

            return {
                'total_emergencies': total_emergencies,
                'successful_emergencies': successful_emergencies,
                'success_rate': (successful_emergencies / total_emergencies * 100) if total_emergencies > 0 else 0,
                'trigger_statistics': trigger_stats,
                'average_exit_percentage': avg_exit_percentage,
                'active_conditions': len([c for c in self.emergency_conditions.values() if c.is_active]),
                'current_emergency_level': self.emergency_level.value,
                'last_emergency': (
                    self.emergency_history[-1].executed_at.isoformat()
                    if self.emergency_history and self.emergency_history[-1].executed_at else None
                )
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def get_conditions_status(self) -> List[Dict[str, Any]]:
        """üìã –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π"""

        conditions_status = []

        for condition in self.emergency_conditions.values():
            conditions_status.append({
                'id': condition.id,
                'trigger': condition.trigger.value,
                'level': condition.level.value,
                'is_active': condition.is_active,
                'is_triggered': condition.is_triggered,
                'threshold': str(condition.threshold_value),
                'current': str(condition.current_value),
                'severity_score': condition.severity_score,
                'description': condition.description,
                'last_triggered': (
                    condition.last_triggered.isoformat()
                    if condition.last_triggered else None
                )
            })

        return conditions_status

    async def manual_emergency_trigger(
        self,
        reason: str,
        target_currencies: Optional[List[str]] = None,
        exit_percentage: float = 50.0
    ) -> List[OrderResult]:
        """üî¥ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        try:
            self.logger.warning(f"üî¥ –†–£–ß–ù–û–ô –ê–í–ê–†–ò–ô–ù–´–ô –í–´–•–û–î: {reason}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            all_positions = await self.position_manager.get_all_positions()

            if target_currencies:
                positions = [p for p in all_positions if p.currency in target_currencies]
            else:
                positions = all_positions

            # –ò—Å–ø–æ–ª–Ω—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥
            return await self.execute_emergency_exit(
                positions=positions,
                trigger=EmergencyTrigger.MANUAL_TRIGGER,
                exit_percentage=exit_percentage
            )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {e}")
            raise EmergencyStopError(f"Manual emergency exit failed: {e}")
