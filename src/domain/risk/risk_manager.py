#!/usr/bin/env python3
"""üõ°Ô∏è –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ - Domain —Å–ª–æ–π (–ß–∞—Å—Ç—å 1)"""

from typing import Optional, Dict, Any, List, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import IRiskManager
    from ...core.models import TradeSignal, Position, Money, TradingPair, StrategySignalType
    from ...core.exceptions import (
        RiskManagementError, RiskLimitExceededError, EmergencyStopError,
        ValidationError
    )
    from ...core.events import DomainEvent, publish_event
    from ...config.settings import get_current_config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class IRiskManager: pass
    class TradeSignal: pass
    class Position: pass
    class Money: pass
    class TradingPair: pass
    class StrategySignalType: pass
    class RiskManagementError(Exception): pass
    class RiskLimitExceededError(Exception): pass
    class EmergencyStopError(Exception): pass
    class ValidationError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass
    def get_current_config(): return None


# ================= –¢–ò–ü–´ –†–ò–°–ö–û–í =================

class RiskType(Enum):
    """üõ°Ô∏è –¢–∏–ø—ã —Ä–∏—Å–∫–æ–≤"""
    POSITION_SIZE = "position_size"        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    DAILY_LOSS = "daily_loss"             # –î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
    DRAWDOWN = "drawdown"                 # –ü—Ä–æ—Å–∞–¥–∫–∞
    CORRELATION = "correlation"           # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    VOLATILITY = "volatility"             # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    LIQUIDITY = "liquidity"               # –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    EMERGENCY = "emergency"               # –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è


class RiskSeverity(Enum):
    """üìä –£—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫–∞"""
    LOW = "low"                           # –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫
    MEDIUM = "medium"                     # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
    HIGH = "high"                         # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
    CRITICAL = "critical"                 # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫


class RiskAction(Enum):
    """‚ö° –î–µ–π—Å—Ç–≤–∏—è –ø–æ —Ä–∏—Å–∫–∞–º"""
    ALLOW = "allow"                       # –†–∞–∑—Ä–µ—à–∏—Ç—å
    WARN = "warn"                         # –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å
    LIMIT = "limit"                       # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    BLOCK = "block"                       # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    EMERGENCY_EXIT = "emergency_exit"     # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥


# ================= –ú–û–î–ï–õ–ò –†–ò–°–ö–û–í =================

@dataclass
class RiskAssessment:
    """üìä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞"""
    risk_type: RiskType
    severity: RiskSeverity
    action: RiskAction
    score: float  # 0.0 - 1.0
    description: str
    recommendation: str
    metadata: Dict[str, Any] = field(default_factory=dict)

    @property
    def is_critical(self) -> bool:
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"""
        return self.severity == RiskSeverity.CRITICAL

    @property
    def requires_action(self) -> bool:
        """–¢—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"""
        return self.action in [RiskAction.LIMIT, RiskAction.BLOCK, RiskAction.EMERGENCY_EXIT]


@dataclass
class RiskLimits:
    """üìè –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–æ–≤"""
    max_position_size_percent: Decimal = Decimal('10.0')    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    max_daily_loss_percent: Decimal = Decimal('5.0')        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
    max_drawdown_percent: Decimal = Decimal('15.0')         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
    max_correlation_threshold: Decimal = Decimal('0.8')     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    emergency_stop_percent: Decimal = Decimal('20.0')       # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    max_trades_per_hour: int = 20                           # –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
    max_trades_per_day: int = 100                           # –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    min_balance_eur: Decimal = Decimal('5.0')               # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        if self.max_position_size_percent <= 0:
            raise ValidationError("Max position size must be positive")
        if self.max_daily_loss_percent <= 0:
            raise ValidationError("Max daily loss must be positive")


@dataclass
class RiskMetrics:
    """üìà –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–æ–≤"""
    current_balance: Decimal = Decimal('0')
    total_positions_value: Decimal = Decimal('0')
    daily_pnl: Decimal = Decimal('0')
    total_pnl: Decimal = Decimal('0')
    max_drawdown: Decimal = Decimal('0')
    trades_today: int = 0
    trades_this_hour: int = 0
    last_trade_time: Optional[datetime] = None
    emergency_stops_today: int = 0

    @property
    def portfolio_value(self) -> Decimal:
        """–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return self.current_balance + self.total_positions_value

    @property
    def daily_return_percent(self) -> float:
        """–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.current_balance <= 0:
            return 0.0
        return float(self.daily_pnl / self.current_balance * 100)


# ================= –û–°–ù–û–í–ù–û–ô –ú–ï–ù–ï–î–ñ–ï–† –†–ò–°–ö–û–í =================

class RiskManager(IRiskManager):
    """üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤"""

    def __init__(self, risk_limits: Optional[RiskLimits] = None):
        self.limits = risk_limits or RiskLimits()
        self.metrics = RiskMetrics()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_emergency_stopped = False
        self.trading_blocked = False
        self.block_reason = ""

        # –ò—Å—Ç–æ—Ä–∏—è
        self.risk_history: List[RiskAssessment] = []
        self.daily_reset_date = datetime.now().date()

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.trades_by_hour: Dict[int, int] = {}
        self.last_hour_reset = datetime.now().hour

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        self.logger.info("üõ°Ô∏è RiskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._reset_daily_metrics_if_needed()

    # ================= –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê =================

    async def assess_trade_risk(
        self,
        signal: TradeSignal,
        position: Optional[Position] = None
    ) -> Dict[str, Any]:
        """üîç –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""

        try:
            self._reset_daily_metrics_if_needed()
            self._reset_hourly_metrics_if_needed()

            assessments = []

            # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_risk = await self._assess_position_size_risk(signal, position)
            assessments.append(position_risk)

            # –û—Ü–µ–Ω–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            daily_risk = await self._assess_daily_limits_risk(signal)
            assessments.append(daily_risk)

            # –û—Ü–µ–Ω–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–¥–µ–ª–æ–∫
            trading_risk = await self._assess_trading_frequency_risk()
            assessments.append(trading_risk)

            # –û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance_risk = await self._assess_balance_risk(signal)
            assessments.append(balance_risk)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            overall_assessment = self._calculate_overall_risk(assessments)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.risk_history.append(overall_assessment)

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —Ä–∏—Å–∫ –≤—ã—Å–æ–∫–∏–π
            if overall_assessment.severity in [RiskSeverity.HIGH, RiskSeverity.CRITICAL]:
                await self._publish_risk_event(overall_assessment, signal)

            return {
                'risk_level': overall_assessment.severity.value,
                'risk_score': overall_assessment.score,
                'approved': overall_assessment.action == RiskAction.ALLOW,
                'assessments': [self._assessment_to_dict(a) for a in assessments],
                'overall_assessment': self._assessment_to_dict(overall_assessment),
                'recommendation': overall_assessment.recommendation
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            raise RiskManagementError(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}") from e

    async def should_block_trading(self, reason: Optional[str] = None) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        if self.is_emergency_stopped:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if self.trading_blocked:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        if await self._check_critical_conditions():
            return True

        return False

    async def calculate_position_size(
        self,
        signal: TradeSignal,
        available_balance: Decimal
    ) -> Decimal:
        """üìê –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""

        try:
            if signal.signal_type != StrategySignalType.BUY:
                return signal.quantity  # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = get_current_config()
            if config:
                max_position_percent = config.trading.position_size_percent
            else:
                max_position_percent = self.limits.max_position_size_percent

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            max_position_value = available_balance * (max_position_percent / 100)

            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
            if signal.price and signal.price > 0:
                max_quantity = max_position_value / signal.price
            else:
                max_quantity = signal.quantity

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            risk_factor = await self._calculate_risk_factor(signal)
            adjusted_quantity = max_quantity * Decimal(str(risk_factor))

            self.logger.debug(f"üìê –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {adjusted_quantity} (–º–∞–∫—Å: {max_quantity}, —Ñ–∞–∫—Ç–æ—Ä: {risk_factor})")

            return min(adjusted_quantity, signal.quantity)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return Decimal('0')

    async def check_daily_limits(self) -> Dict[str, Any]:
        """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""

        self._reset_daily_metrics_if_needed()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å
        daily_loss_limit = self.metrics.current_balance * (self.limits.max_daily_loss_percent / 100)
        daily_loss_exceeded = abs(self.metrics.daily_pnl) > daily_loss_limit if self.metrics.daily_pnl < 0 else False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫
        trades_limit_exceeded = self.metrics.trades_today >= self.limits.max_trades_per_day

        return {
            'daily_pnl': str(self.metrics.daily_pnl),
            'daily_loss_limit': str(daily_loss_limit),
            'daily_loss_exceeded': daily_loss_exceeded,
            'trades_today': self.metrics.trades_today,
            'trades_limit': self.limits.max_trades_per_day,
            'trades_limit_exceeded': trades_limit_exceeded,
            'limits_ok': not (daily_loss_exceeded or trades_limit_exceeded)
        }

    async def get_risk_level(self, signal: TradeSignal) -> str:
        """‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""

        assessment = await self.assess_trade_risk(signal)
        return assessment['risk_level']

    async def emergency_stop_check(self) -> bool:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

        # –£–∂–µ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if self.is_emergency_stopped:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–µ—Ä–∏
        if self._check_emergency_loss_conditions():
            await self._trigger_emergency_stop("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–µ—Ä–∏")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        if self._check_emergency_drawdown_conditions():
            await self._trigger_emergency_stop("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞")
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å
        if self.metrics.current_balance < self.limits.min_balance_eur:
            await self._trigger_emergency_stop("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å")
            return True

        return False

    async def check_position_limits(
        self,
        new_position_size: Decimal,
        current_balance: Decimal
    ) -> bool:
        """üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–∏"""

        max_position_value = current_balance * (self.limits.max_position_size_percent / 100)
        return new_position_size <= max_position_value

    async def should_emergency_exit(
        self,
        position: Position,
        current_price: Decimal
    ) -> Tuple[bool, str]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""

        if not position or position.is_empty:
            return False, "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–±—ã—Ç–æ–∫
        current_pnl = position.calculate_pnl(current_price)
        pnl_percent = position.calculate_pnl_percentage(current_price)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫
        if pnl_percent <= -float(self.limits.emergency_stop_percent):
            return True, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫: {pnl_percent:.1f}%"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ —É–±—ã—Ç–∫–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ)
        if pnl_percent <= -8.0:  # 8% —É–±—ã—Ç–æ–∫
            time_in_loss = self._get_time_in_loss(position)
            if time_in_loss and time_in_loss > timedelta(hours=4):
                return True, f"–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ {pnl_percent:.1f}% –≤ —Ç–µ—á–µ–Ω–∏–µ {time_in_loss}"

        return False, "–£—Å–ª–æ–≤–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"

    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –û–¶–ï–ù–ö–ò –†–ò–°–ö–û–í =================

    async def _assess_position_size_risk(
        self,
        signal: TradeSignal,
        position: Optional[Position]
    ) -> RiskAssessment:
        """üìä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""

        if signal.signal_type != StrategySignalType.BUY:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.LOW,
                action=RiskAction.ALLOW,
                score=0.1,
                description="–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é",
                recommendation="–†–∞–∑—Ä–µ—à–µ–Ω–æ"
            )

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        current_position_value = Decimal('0')
        if position and not position.is_empty:
            current_position_value = position.quantity * (signal.price or Decimal('0'))

        new_position_value = signal.quantity * (signal.price or Decimal('0'))
        total_position_value = current_position_value + new_position_value

        max_allowed = self.metrics.current_balance * (self.limits.max_position_size_percent / 100)
        position_ratio = float(total_position_value / max_allowed) if max_allowed > 0 else 1.0

        if position_ratio <= 0.5:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.LOW,
                action=RiskAction.ALLOW,
                score=position_ratio * 0.5,
                description=f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_ratio:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞",
                recommendation="–†–∞–∑—Ä–µ—à–µ–Ω–æ"
            )
        elif position_ratio <= 0.8:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.MEDIUM,
                action=RiskAction.WARN,
                score=position_ratio * 0.7,
                description=f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_ratio:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞",
                recommendation="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏"
            )
        elif position_ratio <= 1.0:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.HIGH,
                action=RiskAction.LIMIT,
                score=position_ratio * 0.9,
                description=f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_ratio:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞",
                recommendation="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"
            )
        else:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.CRITICAL,
                action=RiskAction.BLOCK,
                score=1.0,
                description=f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_ratio:.1%} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç",
                recommendation="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
            )

    async def _assess_daily_limits_risk(self, signal: TradeSignal) -> RiskAssessment:
        """üìÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        if self.metrics.daily_pnl < 0:
            daily_loss_limit = self.metrics.current_balance * (self.limits.max_daily_loss_percent / 100)
            loss_ratio = float(abs(self.metrics.daily_pnl) / daily_loss_limit) if daily_loss_limit > 0 else 0

            if loss_ratio >= 1.0:
                return RiskAssessment(
                    risk_type=RiskType.DAILY_LOSS,
                    severity=RiskSeverity.CRITICAL,
                    action=RiskAction.BLOCK,
                    score=1.0,
                    description=f"–î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ {loss_ratio:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞",
                    recommendation="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                )
            elif loss_ratio >= 0.8:
                return RiskAssessment(
                    risk_type=RiskType.DAILY_LOSS,
                    severity=RiskSeverity.HIGH,
                    action=RiskAction.WARN,
                    score=loss_ratio,
                    description=f"–î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ {loss_ratio:.1%} –æ—Ç –ª–∏–º–∏—Ç–∞",
                    recommendation="–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏"
                )

        return RiskAssessment(
            risk_type=RiskType.DAILY_LOSS,
            severity=RiskSeverity.LOW,
            action=RiskAction.ALLOW,
            score=0.1,
            description="–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –≤ –Ω–æ—Ä–º–µ",
            recommendation="–†–∞–∑—Ä–µ—à–µ–Ω–æ"
        )

    async def _assess_trading_frequency_risk(self) -> RiskAssessment:
        """‚è∞ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
        current_hour = datetime.now().hour
        trades_this_hour = self.trades_by_hour.get(current_hour, 0)

        if trades_this_hour >= self.limits.max_trades_per_hour:
            return RiskAssessment(
                risk_type=RiskType.LIQUIDITY,
                severity=RiskSeverity.HIGH,
                action=RiskAction.BLOCK,
                score=0.9,
                description=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {trades_this_hour}",
                recommendation="–ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if self.metrics.trades_today >= self.limits.max_trades_per_day:
            return RiskAssessment(
                risk_type=RiskType.LIQUIDITY,
                severity=RiskSeverity.CRITICAL,
                action=RiskAction.BLOCK,
                score=1.0,
                description=f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {self.metrics.trades_today}",
                recommendation="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            )

        return RiskAssessment(
            risk_type=RiskType.LIQUIDITY,
            severity=RiskSeverity.LOW,
            action=RiskAction.ALLOW,
            score=0.1,
            description="–ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–æ—Ä–º–µ",
            recommendation="–†–∞–∑—Ä–µ—à–µ–Ω–æ"
        )

    async def _assess_balance_risk(self, signal: TradeSignal) -> RiskAssessment:
        """üí∞ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""

        if self.metrics.current_balance < self.limits.min_balance_eur:
            return RiskAssessment(
                risk_type=RiskType.LIQUIDITY,
                severity=RiskSeverity.CRITICAL,
                action=RiskAction.EMERGENCY_EXIT,
                score=1.0,
                description=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: {self.metrics.current_balance}",
                recommendation="–ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if signal.signal_type == StrategySignalType.BUY:
            required_amount = signal.quantity * (signal.price or Decimal('0'))
            if required_amount > self.metrics.current_balance:
                return RiskAssessment(
                    risk_type=RiskType.LIQUIDITY,
                    severity=RiskSeverity.HIGH,
                    action=RiskAction.BLOCK,
                    score=0.8,
                    description=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {required_amount}, –µ—Å—Ç—å {self.metrics.current_balance}",
                    recommendation="–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"
                )

        return RiskAssessment(
            risk_type=RiskType.LIQUIDITY,
            severity=RiskSeverity.LOW,
            action=RiskAction.ALLOW,
            score=0.1,
            description="–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω",
            recommendation="–†–∞–∑—Ä–µ—à–µ–Ω–æ"
        )

    def _calculate_overall_risk(self, assessments: List[RiskAssessment]) -> RiskAssessment:
        """üéØ –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∏—Å–∫–∞"""

        if not assessments:
            return RiskAssessment(
                risk_type=RiskType.POSITION_SIZE,
                severity=RiskSeverity.MEDIUM,
                action=RiskAction.WARN,
                score=0.5,
                description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏",
                recommendation="–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
            )

        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫
        max_severity = max(a.severity for a in assessments)
        max_score = max(a.score for a in assessments)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
        critical_assessments = [a for a in assessments if a.requires_action]

        if any(a.action == RiskAction.EMERGENCY_EXIT for a in critical_assessments):
            action = RiskAction.EMERGENCY_EXIT
        elif any(a.action == RiskAction.BLOCK for a in critical_assessments):
            action = RiskAction.BLOCK
        elif any(a.action == RiskAction.LIMIT for a in critical_assessments):
            action = RiskAction.LIMIT
        elif any(a.action == RiskAction.WARN for a in assessments):
            action = RiskAction.WARN
        else:
            action = RiskAction.ALLOW

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        critical_descriptions = [a.description for a in critical_assessments]
        description = "; ".join(critical_descriptions) if critical_descriptions else "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"

        return RiskAssessment(
            risk_type=RiskType.POSITION_SIZE,  # –û–±—â–∏–π —Ç–∏–ø
            severity=max_severity,
            action=action,
            score=max_score,
            description=description,
            recommendation=self._get_recommendation_for_action(action),
            metadata={'individual_assessments': len(assessments)}
        )

    # ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =================

    async def _calculate_risk_factor(self, signal: TradeSignal) -> float:
        """üéØ –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""

        base_factor = 1.0

        # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(signal, 'metadata') and 'volatility' in signal.metadata:
            volatility = signal.metadata['volatility']
            if volatility > 0.05:  # 5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                base_factor *= 0.7

        # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if signal.confidence < 0.7:
            base_factor *= signal.confidence

        # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—è—Ö
        if self.metrics.daily_pnl < 0:
            loss_factor = 1.0 - min(abs(float(self.metrics.daily_pnl)) / float(self.metrics.current_balance), 0.3)
            base_factor *= loss_factor

        return max(base_factor, 0.1)  # –ú–∏–Ω–∏–º—É–º 10%

    async def _check_critical_conditions(self) -> bool:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if await self.emergency_stop_check():
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫
        if len(self.risk_history) >= 10:
            recent_risks = self.risk_history[-10:]
            critical_count = sum(1 for risk in recent_risks if risk.is_critical)
            if critical_count >= 5:  # 50% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
                self.logger.warning("üö® –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤")
                return True

        return False

    def _check_emergency_loss_conditions(self) -> bool:
        """üí∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—å"""

        if self.metrics.current_balance <= 0:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        daily_loss_threshold = self.metrics.current_balance * (self.limits.emergency_stop_percent / 100)
        if self.metrics.daily_pnl < -daily_loss_threshold:
            return True

        return False

    def _check_emergency_drawdown_conditions(self) -> bool:
        """üìâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""

        drawdown_threshold = self.limits.max_drawdown_percent / 100
        return float(self.metrics.max_drawdown) >= drawdown_threshold

    async def _trigger_emergency_stop(self, reason: str) -> None:
        """üö® –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

        if not self.is_emergency_stopped:
            self.is_emergency_stopped = True
            self.metrics.emergency_stops_today += 1

            self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {reason}")

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_emergency_event(reason)

            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            self.trading_blocked = True
            self.block_reason = f"Emergency stop: {reason}"

    def _get_time_in_loss(self, position: Position) -> Optional[timedelta]:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —É–±—ã—Ç–∫–µ"""

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–±—ã—Ç–∫–∞
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞–ª–∞ —É–±—ã—Ç–æ—á–Ω–æ–π
        return None

    def _reset_daily_metrics_if_needed(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

        current_date = datetime.now().date()
        if current_date != self.daily_reset_date:
            self.logger.info(f"üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {self.daily_reset_date} -> {current_date}")

            self.metrics.daily_pnl = Decimal('0')
            self.metrics.trades_today = 0
            self.metrics.emergency_stops_today = 0
            self.daily_reset_date = current_date

    def _reset_hourly_metrics_if_needed(self) -> None:
        """üîÑ –°–±—Ä–æ—Å —á–∞—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

        current_hour = datetime.now().hour
        if current_hour != self.last_hour_reset:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞—Å—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
            hours_to_keep = [current_hour, (current_hour - 1) % 24]
            self.trades_by_hour = {h: count for h, count in self.trades_by_hour.items() if h in hours_to_keep}

            self.last_hour_reset = current_hour

    def _assessment_to_dict(self, assessment: RiskAssessment) -> Dict[str, Any]:
        """üì§ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å"""

        return {
            'risk_type': assessment.risk_type.value,
            'severity': assessment.severity.value,
            'action': assessment.action.value,
            'score': assessment.score,
            'description': assessment.description,
            'recommendation': assessment.recommendation,
            'metadata': assessment.metadata
        }

    async def _publish_risk_event(self, assessment: RiskAssessment, signal: TradeSignal) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–∞"""

        try:
            event = DomainEvent()
            event.event_type = "risk_assessment"
            event.source = "risk_manager"
            event.metadata = {
                'risk_type': assessment.risk_type.value,
                'severity': assessment.severity.value,
                'action': assessment.action.value,
                'score': assessment.score,
                'signal_type': signal.signal_type if hasattr(signal, 'signal_type') else 'unknown',
                'strategy': signal.strategy_name if hasattr(signal, 'strategy_name') else 'unknown'
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–∞: {e}")

    async def _publish_emergency_event(self, reason: str) -> None:
        """üö® –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

        try:
            event = DomainEvent()
            event.event_type = "emergency_stop"
            event.source = "risk_manager"
            event.metadata = {
                'reason': reason,
                'current_balance': str(self.metrics.current_balance),
                'daily_pnl': str(self.metrics.daily_pnl),
                'trades_today': self.metrics.trades_today
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

    def _get_recommendation_for_action(self, action: RiskAction) -> str:
        """üí° –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
        recommendations = {
            RiskAction.ALLOW: "–û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞",
            RiskAction.WARN: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å",
            RiskAction.LIMIT: "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏",
            RiskAction.BLOCK: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
            RiskAction.EMERGENCY_EXIT: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"
        }
        return recommendations.get(action, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    # ================= –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø =================

    def update_balance(self, new_balance: Decimal) -> None:
        """üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        old_balance = self.metrics.current_balance
        self.metrics.current_balance = new_balance

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–π P&L
        if old_balance > 0:
            balance_change = new_balance - old_balance
            self.metrics.daily_pnl += balance_change

        self.logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {old_balance} -> {new_balance}")

    def record_trade(self, pnl: Decimal) -> None:
        """üìù –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""

        self._reset_daily_metrics_if_needed()
        self._reset_hourly_metrics_if_needed()

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.metrics.trades_today += 1
        self.metrics.last_trade_time = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        current_hour = datetime.now().hour
        self.trades_by_hour[current_hour] = self.trades_by_hour.get(current_hour, 0) + 1

        # –û–±–Ω–æ–≤–ª—è–µ–º P&L
        self.metrics.daily_pnl += pnl
        self.metrics.total_pnl += pnl

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        if pnl < 0:
            current_drawdown = abs(pnl) / self.metrics.current_balance if self.metrics.current_balance > 0 else Decimal('0')
            self.metrics.max_drawdown = max(self.metrics.max_drawdown, current_drawdown)

        self.logger.debug(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: P&L {pnl}, –≤—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è {self.metrics.trades_today}")

    def manual_emergency_stop(self, reason: str = "Manual stop") -> None:
        """üö® –†—É—á–Ω–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""

        self.logger.warning(f"üö® –†—É—á–Ω–∞—è –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {reason}")
        self.is_emergency_stopped = True
        self.trading_blocked = True
        self.block_reason = reason
        self.metrics.emergency_stops_today += 1

    def reset_emergency_stop(self, reason: str = "Manual reset") -> None:
        """üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

        if self.is_emergency_stopped:
            self.logger.info(f"üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {reason}")
            self.is_emergency_stopped = False
            self.trading_blocked = False
            self.block_reason = ""

    def get_risk_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏—Å–∫–æ–≤"""

        return {
            'metrics': {
                'current_balance': str(self.metrics.current_balance),
                'daily_pnl': str(self.metrics.daily_pnl),
                'total_pnl': str(self.metrics.total_pnl),
                'daily_return_percent': self.metrics.daily_return_percent,
                'max_drawdown': str(self.metrics.max_drawdown),
                'trades_today': self.metrics.trades_today,
                'trades_this_hour': self.trades_by_hour.get(datetime.now().hour, 0),
                'emergency_stops_today': self.metrics.emergency_stops_today,
                'portfolio_value': str(self.metrics.portfolio_value)
            },
            'status': {
                'is_emergency_stopped': self.is_emergency_stopped,
                'trading_blocked': self.trading_blocked,
                'block_reason': self.block_reason
            },
            'limits': {
                'max_position_size_percent': str(self.limits.max_position_size_percent),
                'max_daily_loss_percent': str(self.limits.max_daily_loss_percent),
                'emergency_stop_percent': str(self.limits.emergency_stop_percent),
                'max_trades_per_hour': self.limits.max_trades_per_hour,
                'max_trades_per_day': self.limits.max_trades_per_day
            },
            'recent_assessments': [
                self._assessment_to_dict(assessment)
                for assessment in self.risk_history[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ü–µ–Ω–æ–∫
            ]
        }
