from typing import Optional, Dict, Any, List, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import IExchangeAPI
    from ...core.models import Money, TradingPair, Trade, Position
    from ...core.exceptions import (
        TradingSystemError, InsufficientBalanceError,
        DataError, ValidationError
    )
    from ...core.events import DomainEvent, publish_event
    from ...config.settings import get_current_config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class IExchangeAPI: pass
    class Money: pass
    class TradingPair: pass
    class Trade: pass
    class Position: pass
    class TradingSystemError(Exception): pass
    class InsufficientBalanceError(Exception): pass
    class DataError(Exception): pass
    class ValidationError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass
    def get_current_config(): return None


# ================= –¢–ò–ü–´ –ë–ê–õ–ê–ù–°–û–í =================

class BalanceType(Enum):
    """üí∞ –¢–∏–ø—ã –±–∞–ª–∞–Ω—Å–æ–≤"""
    AVAILABLE = "available"      # –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
    RESERVED = "reserved"        # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –æ—Ä–¥–µ—Ä–∞—Ö
    TOTAL = "total"             # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
    FROZEN = "frozen"           # –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å


class ReservationReason(Enum):
    """üîí –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    OPEN_ORDER = "open_order"           # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
    RISK_MANAGEMENT = "risk_management" # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
    MANUAL_LOCK = "manual_lock"         # –†—É—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    MAINTENANCE = "maintenance"         # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ


@dataclass
class BalanceInfo:
    """üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ"""
    currency: str
    available: Decimal
    reserved: Decimal
    total: Decimal
    last_updated: datetime = field(default_factory=datetime.now)
    frozen: Decimal = Decimal('0')
    pending_deposits: Decimal = Decimal('0')
    pending_withdrawals: Decimal = Decimal('0')

    @property
    def free_balance(self) -> Decimal:
        """–°–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å (–¥–æ—Å—Ç—É–ø–Ω—ã–π - –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
        return max(self.available - self.reserved, Decimal('0'))

    @property
    def utilization_percent(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
        if self.total <= 0:
            return 0.0
        return float((self.total - self.available) / self.total * 100)

    def to_money(self) -> Money:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ Money –æ–±—ä–µ–∫—Ç"""
        return Money(self.available, self.currency)


@dataclass
class BalanceReservation:
    """üîí –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    id: str
    currency: str
    amount: Decimal
    reason: ReservationReason
    description: str
    created_at: datetime = field(default_factory=datetime.now)
    expires_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)

    @property
    def is_expired(self) -> bool:
        """–ò—Å—Ç–µ–∫–ª–æ –ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        return self.expires_at is not None and datetime.now() > self.expires_at

    @property
    def age_minutes(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        return (datetime.now() - self.created_at).total_seconds() / 60


@dataclass
class PortfolioSummary:
    """üìä –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    total_value_eur: Decimal
    total_value_usd: Decimal
    balances: Dict[str, BalanceInfo]
    largest_holding: str
    diversification_score: float
    last_updated: datetime = field(default_factory=datetime.now)

    @property
    def currencies_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        return len([b for b in self.balances.values() if b.total > 0])

    @property
    def dominant_currency_percent(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π –≤–∞–ª—é—Ç—ã"""
        if not self.balances or self.total_value_eur <= 0:
            return 0.0

        max_value = max(
            balance.total for balance in self.balances.values()
        )
        return float(max_value / self.total_value_eur * 100)


# ================= –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° =================

class BalanceService:
    """üí∞ –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏"""

    def __init__(
        self,
        exchange_api: Optional[IExchangeAPI] = None,
        cache_ttl_seconds: int = 30
    ):
        self.exchange_api = exchange_api
        self.cache_ttl = timedelta(seconds=cache_ttl_seconds)

        # –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤
        self.balance_cache: Dict[str, Tuple[datetime, BalanceInfo]] = {}

        # –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        self.reservations: Dict[str, BalanceReservation] = {}

        # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.balance_history: List[Dict[str, Any]] = []
        self.max_history_size = 1000

        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
        self.exchange_rates: Dict[str, Decimal] = {
            'EUR': Decimal('1.0'),
            'USD': Decimal('0.85'),
            'BTC': Decimal('45000.0'),
            'ETH': Decimal('2500.0'),
            'DOGE': Decimal('0.08')
        }

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        self.logger.info("üí∞ BalanceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ================= –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ =================

    async def get_balance(self, currency: str) -> BalanceInfo:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã"""

        try:
            currency = currency.upper()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if currency in self.balance_cache:
                cached_time, cached_balance = self.balance_cache[currency]
                if datetime.now() - cached_time < self.cache_ttl:
                    return cached_balance

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = await self._fetch_balance(currency)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            balance = await self._apply_reservations(balance)

            # –ö—ç—à–∏—Ä—É–µ–º
            self.balance_cache[currency] = (datetime.now(), balance)

            return balance

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
            raise DataError(f"Failed to get balance for {currency}: {e}")

    async def get_all_balances(self) -> Dict[str, BalanceInfo]:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""

        try:
            if self.exchange_api:
                # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ API
                raw_balances = await self.exchange_api.get_balances()

                balances = {}
                for currency, amount in raw_balances.items():
                    balance_info = BalanceInfo(
                        currency=currency.upper(),
                        available=Decimal(str(amount)),
                        reserved=Decimal('0'),
                        total=Decimal(str(amount))
                    )

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                    balance_info = await self._apply_reservations(balance_info)
                    balances[currency.upper()] = balance_info

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                for currency, balance in balances.items():
                    self.balance_cache[currency] = (datetime.now(), balance)

                return balances

            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
                return await self._get_fallback_balances()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}

    async def check_balance_sufficiency(
        self,
        currency: str,
        required_amount: Decimal,
        include_reserved: bool = False
    ) -> Tuple[bool, Decimal]:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞"""

        try:
            balance = await self.get_balance(currency)

            available_amount = balance.total if include_reserved else balance.free_balance

            is_sufficient = available_amount >= required_amount
            deficit = max(required_amount - available_amount, Decimal('0'))

            return is_sufficient, deficit

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
            return False, required_amount

    async def reserve_balance(
        self,
        currency: str,
        amount: Decimal,
        reason: ReservationReason,
        description: str,
        duration_minutes: Optional[int] = None
    ) -> str:
        """üîí –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
            is_sufficient, deficit = await self.check_balance_sufficiency(currency, amount)

            if not is_sufficient:
                raise InsufficientBalanceError(
                    required=amount,
                    available=amount - deficit,
                    currency=currency
                )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
            reservation_id = f"res_{currency}_{datetime.now().timestamp()}"

            expires_at = None
            if duration_minutes:
                expires_at = datetime.now() + timedelta(minutes=duration_minutes)

            reservation = BalanceReservation(
                id=reservation_id,
                currency=currency.upper(),
                amount=amount,
                reason=reason,
                description=description,
                expires_at=expires_at
            )

            self.reservations[reservation_id] = reservation

            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            if currency.upper() in self.balance_cache:
                del self.balance_cache[currency.upper()]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self._record_balance_change(
                currency, "reserve", amount, f"Reserved: {description}"
            )

            self.logger.info(f"üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {amount} {currency}: {description}")

            return reservation_id

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è {amount} {currency}: {e}")
            raise

    async def release_reservation(self, reservation_id: str) -> bool:
        """üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""

        try:
            if reservation_id not in self.reservations:
                self.logger.warning(f"‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

            reservation = self.reservations[reservation_id]

            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
            del self.reservations[reservation_id]

            # –û—á–∏—â–∞–µ–º –∫—ç—à
            if reservation.currency in self.balance_cache:
                del self.balance_cache[reservation.currency]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self._record_balance_change(
                reservation.currency, "release", reservation.amount,
                f"Released: {reservation.description}"
            )

            self.logger.info(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ {reservation_id}: {reservation.amount} {reservation.currency}")

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è {reservation_id}: {e}")
            return False

    async def get_portfolio_summary(self) -> PortfolioSummary:
        """üìä –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""

        try:
            balances = await self.get_all_balances()

            total_value_eur = Decimal('0')
            total_value_usd = Decimal('0')

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            for currency, balance in balances.items():
                if balance.total > 0:
                    eur_rate = self.exchange_rates.get(currency, Decimal('0'))
                    usd_rate = eur_rate * self.exchange_rates.get('USD', Decimal('0.85'))

                    total_value_eur += balance.total * eur_rate
                    total_value_usd += balance.total * usd_rate

            # –ù–∞—Ö–æ–¥–∏–º –∫—Ä—É–ø–Ω–µ–π—à—É—é –ø–æ–∑–∏—Ü–∏—é
            largest_holding = ""
            max_value = Decimal('0')

            for currency, balance in balances.items():
                if balance.total > 0:
                    eur_rate = self.exchange_rates.get(currency, Decimal('0'))
                    value = balance.total * eur_rate
                    if value > max_value:
                        max_value = value
                        largest_holding = currency

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (–ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å)
            diversification_score = self._calculate_diversification_score(balances)

            return PortfolioSummary(
                total_value_eur=total_value_eur,
                total_value_usd=total_value_usd,
                balances=balances,
                largest_holding=largest_holding,
                diversification_score=diversification_score
            )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            raise DataError(f"Failed to get portfolio summary: {e}")

    async def update_balance_after_trade(self, trade: Trade) -> None:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏"""

        try:
            base_currency = trade.pair.base
            quote_currency = trade.pair.quote

            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç
            for currency in [base_currency, quote_currency]:
                if currency in self.balance_cache:
                    del self.balance_cache[currency]

            if trade.order_type.value.lower() == 'buy':
                # –ü–æ–∫—É–ø–∫–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º base, —É–º–µ–Ω—å—à–∞–µ–º quote
                await self._record_balance_change(
                    base_currency, "increase", trade.quantity,
                    f"Buy trade: {trade.id}"
                )
                await self._record_balance_change(
                    quote_currency, "decrease", trade.total_cost + trade.commission,
                    f"Buy trade cost: {trade.id}"
                )
            else:
                # –ü—Ä–æ–¥–∞–∂–∞: —É–º–µ–Ω—å—à–∞–µ–º base, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º quote
                await self._record_balance_change(
                    base_currency, "decrease", trade.quantity,
                    f"Sell trade: {trade.id}"
                )
                await self._record_balance_change(
                    quote_currency, "increase", trade.total_cost - trade.commission,
                    f"Sell trade proceeds: {trade.id}"
                )

            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
            await self._publish_balance_update_event(trade)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏ {trade.id}: {e}")

    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =================

    async def _fetch_balance(self, currency: str) -> BalanceInfo:
        """üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –±–∏—Ä–∂–∏"""

        try:
            if self.exchange_api:
                balance_amount = await self.exchange_api.get_balance(currency)

                return BalanceInfo(
                    currency=currency,
                    available=balance_amount,
                    reserved=Decimal('0'),
                    total=balance_amount
                )
            else:
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return BalanceInfo(
                    currency=currency,
                    available=Decimal('1000'),  # –ó–∞–≥–ª—É—à–∫–∞
                    reserved=Decimal('0'),
                    total=Decimal('1000')
                )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency} –æ—Ç –±–∏—Ä–∂–∏: {e}")
            raise

    async def _apply_reservations(self, balance: BalanceInfo) -> BalanceInfo:
        """üîí –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π –∫ –±–∞–ª–∞–Ω—Å—É"""

        try:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            await self._cleanup_expired_reservations()

            # –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
            total_reserved = Decimal('0')

            for reservation in self.reservations.values():
                if reservation.currency == balance.currency:
                    total_reserved += reservation.amount

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            balance.reserved = total_reserved
            balance.available = max(balance.total - total_reserved, Decimal('0'))

            return balance

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return balance

    async def _cleanup_expired_reservations(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""

        try:
            expired_ids = [
                res_id for res_id, reservation in self.reservations.items()
                if reservation.is_expired
            ]

            for res_id in expired_ids:
                reservation = self.reservations[res_id]
                del self.reservations[res_id]

                self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: {res_id}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await self._record_balance_change(
                    reservation.currency, "expired_release", reservation.amount,
                    f"Expired reservation: {reservation.description}"
                )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

    async def _get_fallback_balances(self) -> Dict[str, BalanceInfo]:
        """üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –±–∞–ª–∞–Ω—Å–æ–≤"""

        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç
        fallback_balances = {
            'EUR': BalanceInfo('EUR', Decimal('1000'), Decimal('0'), Decimal('1000')),
            'USD': BalanceInfo('USD', Decimal('1200'), Decimal('0'), Decimal('1200')),
            'DOGE': BalanceInfo('DOGE', Decimal('10000'), Decimal('0'), Decimal('10000')),
            'BTC': BalanceInfo('BTC', Decimal('0.05'), Decimal('0'), Decimal('0.05'))
        }

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        for currency, balance in fallback_balances.items():
            fallback_balances[currency] = await self._apply_reservations(balance)

        return fallback_balances

    def _calculate_diversification_score(self, balances: Dict[str, BalanceInfo]) -> float:
        """üìä –†–∞—Å—á–µ—Ç –∏–Ω–¥–µ–∫—Å–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

        try:
            if not balances:
                return 0.0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –≤–∞–ª—é—Ç
            total_value = Decimal('0')
            values = {}

            for currency, balance in balances.items():
                if balance.total > 0:
                    rate = self.exchange_rates.get(currency, Decimal('0'))
                    value = balance.total * rate
                    values[currency] = value
                    total_value += value

            if total_value <= 0:
                return 0.0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –•–µ—Ä—Ñ–∏–Ω–¥–∞–ª—è-–•–∏—Ä—à–º–∞–Ω–∞ (–æ–±—Ä–∞—Ç–Ω—ã–π)
            hhi = sum((value / total_value) ** 2 for value in values.values())

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-100
            max_currencies = len(values)
            if max_currencies <= 1:
                return 0.0

            perfect_diversification = 1.0 / max_currencies
            diversification_score = ((1.0 / max_currencies) / hhi) * 100

            return min(diversification_score, 100.0)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return 0.0

    async def _record_balance_change(
        self,
        currency: str,
        change_type: str,
        amount: Decimal,
        description: str
    ) -> None:
        """üìù –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""

        try:
            change_record = {
                'timestamp': datetime.now().isoformat(),
                'currency': currency,
                'change_type': change_type,
                'amount': str(amount),
                'description': description
            }

            self.balance_history.append(change_record)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.balance_history) > self.max_history_size:
                self.balance_history = self.balance_history[-self.max_history_size//2:]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def _publish_balance_update_event(self, trade: Trade) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""

        try:
            event = DomainEvent()
            event.event_type = "balance_updated"
            event.source = "balance_service"
            event.metadata = {
                'trade_id': trade.id,
                'base_currency': trade.pair.base,
                'quote_currency': trade.pair.quote,
                'order_type': trade.order_type.value,
                'quantity': str(trade.quantity),
                'total_cost': str(trade.total_cost)
            }

            await publish_event(event)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    # ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =================

    async def refresh_all_balances(self) -> None:
        """üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""

        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.balance_cache.clear()

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            await self.get_all_balances()

            self.logger.info("üîÑ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")

    def get_reservations_summary(self) -> Dict[str, Any]:
        """üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""

        try:
            total_reservations = len(self.reservations)
            reservations_by_currency = {}
            reservations_by_reason = {}

            for reservation in self.reservations.values():
                # –ü–æ –≤–∞–ª—é—Ç–∞–º
                currency = reservation.currency
                if currency not in reservations_by_currency:
                    reservations_by_currency[currency] = {
                        'count': 0,
                        'total_amount': Decimal('0')
                    }

                reservations_by_currency[currency]['count'] += 1
                reservations_by_currency[currency]['total_amount'] += reservation.amount

                # –ü–æ –ø—Ä–∏—á–∏–Ω–∞–º
                reason = reservation.reason.value
                reservations_by_reason[reason] = reservations_by_reason.get(reason, 0) + 1

            return {
                'total_reservations': total_reservations,
                'by_currency': {
                    currency: {
                        'count': data['count'],
                        'total_amount': str(data['total_amount'])
                    }
                    for currency, data in reservations_by_currency.items()
                },
                'by_reason': reservations_by_reason,
                'oldest_reservation': (
                    min(self.reservations.values(), key=lambda r: r.created_at).created_at.isoformat()
                    if self.reservations else None
                )
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return {}

    def get_balance_history(self, currency: Optional[str] = None, limit: int = 50) -> List[Dict[str, Any]]:
        """üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞"""

        try:
            history = self.balance_history

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤–∞–ª—é—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if currency:
                history = [
                    record for record in history
                    if record['currency'] == currency.upper()
                ]

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            return history[-limit:]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return []

    def get_service_statistics(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""

        return {
            'cache_entries': len(self.balance_cache),
            'active_reservations': len(self.reservations),
            'history_records': len(self.balance_history),
            'supported_currencies': len(self.exchange_rates),
            'cache_ttl_seconds': self.cache_ttl.total_seconds(),
            'has_exchange_api': self.exchange_api is not None,
            'oldest_cache_entry': (
                min(cached_time for cached_time, _ in self.balance_cache.values()).isoformat()
                if self.balance_cache else None
            )
        }

    def set_exchange_rate(self, currency: str, rate_to_eur: Decimal) -> None:
        """üí± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –∫ EUR"""

        try:
            currency = currency.upper()
            self.exchange_rates[currency] = rate_to_eur

            self.logger.info(f"üí± –ö—É—Ä—Å {currency} –æ–±–Ω–æ–≤–ª–µ–Ω: {rate_to_eur} EUR")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–∞ {currency}: {e}")

    async def validate_balances_integrity(self) -> Dict[str, Any]:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤"""

        try:
            issues = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            for res_id, reservation in self.reservations.items():
                balance = await self.get_balance(reservation.currency)

                if reservation.amount > balance.total:
                    issues.append(f"Reservation {res_id} exceeds total balance")

                if reservation.is_expired:
                    issues.append(f"Expired reservation {res_id} not cleaned up")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            expired_cache = []
            for currency, (cached_time, _) in self.balance_cache.items():
                if datetime.now() - cached_time > self.cache_ttl:
                    expired_cache.append(currency)

            return {
                'is_valid': len(issues) == 0,
                'issues': issues,
                'expired_cache_entries': expired_cache,
                'total_reservations': len(self.reservations),
                'cache_entries': len(self.balance_cache)
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
            return {'is_valid': False, 'error': str(e)}
