from typing import Optional, List, Dict, Any, Union, Callable
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum
import asyncio
import json

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import INotificationService
    from ...core.models import Trade, Position, TradeSignal, OrderResult
    from ...core.exceptions import TradingSystemError, ValidationError
    from ...core.events import DomainEvent, publish_event
    from ...config.settings import get_current_config
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ Core —Å–ª–æ–π –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
    class INotificationService: pass
    class Trade: pass
    class Position: pass
    class TradeSignal: pass
    class OrderResult: pass
    class TradingSystemError(Exception): pass
    class ValidationError(Exception): pass
    class DomainEvent: pass
    def publish_event(event): pass
    def get_current_config(): return None


# ================= –¢–ò–ü–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =================

class NotificationType(Enum):
    """üì¢ –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    TRADE_EXECUTED = "trade_executed"
    POSITION_OPENED = "position_opened"
    POSITION_CLOSED = "position_closed"
    EMERGENCY_STOP = "emergency_stop"
    RISK_ALERT = "risk_alert"
    PROFIT_TARGET = "profit_target"
    STOP_LOSS = "stop_loss"
    DAILY_REPORT = "daily_report"
    SYSTEM_ERROR = "system_error"
    STRATEGY_SIGNAL = "strategy_signal"


class NotificationPriority(Enum):
    """‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4
    EMERGENCY = 5


class NotificationChannel(Enum):
    """üì± –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    CONSOLE = "console"
    LOG_FILE = "log_file"
    EMAIL = "email"
    TELEGRAM = "telegram"
    WEBHOOK = "webhook"
    SMS = "sms"


class NotificationStatus(Enum):
    """üìä –°—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    PENDING = "pending"
    SENT = "sent"
    FAILED = "failed"
    DELIVERED = "delivered"
    READ = "read"


# ================= –ú–û–î–ï–õ–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =================

@dataclass
class NotificationTemplate:
    """üìù –®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    notification_type: NotificationType
    title_template: str
    message_template: str
    priority: NotificationPriority
    channels: List[NotificationChannel]
    enabled: bool = True
    variables: List[str] = field(default_factory=list)

    def render(self, context: Dict[str, Any]) -> tuple[str, str]:
        """üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            title = self.title_template.format(**context)
            message = self.message_template.format(**context)
            return title, message
        except KeyError as e:
            raise ValidationError(f"Missing template variable: {e}")


@dataclass
class Notification:
    """üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    id: str = field(default_factory=lambda: f"notif_{datetime.now().timestamp()}")
    notification_type: NotificationType = NotificationType.SYSTEM_ERROR
    title: str = ""
    message: str = ""
    priority: NotificationPriority = NotificationPriority.NORMAL
    channels: List[NotificationChannel] = field(default_factory=list)
    status: NotificationStatus = NotificationStatus.PENDING
    context: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)
    sent_at: Optional[datetime] = None
    delivered_at: Optional[datetime] = None
    retry_count: int = 0
    max_retries: int = 3
    error_message: Optional[str] = None

    @property
    def age_minutes(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        return (datetime.now() - self.created_at).total_seconds() / 60

    @property
    def is_expired(self) -> bool:
        """–ò—Å—Ç–µ–∫–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (24 —á–∞—Å–∞)"""
        return self.age_minutes > 1440

    @property
    def can_retry(self) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"""
        return self.retry_count < self.max_retries and self.status == NotificationStatus.FAILED


@dataclass
class NotificationRule:
    """üìã –ü—Ä–∞–≤–∏–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    id: str
    notification_type: NotificationType
    conditions: Dict[str, Any]
    channels: List[NotificationChannel]
    priority: NotificationPriority
    enabled: bool = True
    rate_limit_minutes: int = 0  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    last_sent: Optional[datetime] = None

    def should_send(self, context: Dict[str, Any]) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if not self.enabled:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if self.rate_limit_minutes > 0 and self.last_sent:
            time_since_last = datetime.now() - self.last_sent
            if time_since_last.total_seconds() < self.rate_limit_minutes * 60:
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π
        return self._check_conditions(context)

    def _check_conditions(self, context: Dict[str, Any]) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø—Ä–∞–≤–∏–ª–∞"""
        try:
            for condition_key, condition_value in self.conditions.items():
                if condition_key not in context:
                    return False

                context_value = context[condition_key]

                # –ü—Ä–æ—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
                if isinstance(condition_value, (str, int, float, bool)):
                    if context_value != condition_value:
                        return False

                # –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                elif isinstance(condition_value, dict):
                    if 'min' in condition_value and context_value < condition_value['min']:
                        return False
                    if 'max' in condition_value and context_value > condition_value['max']:
                        return False

            return True

        except Exception:
            return False


# ================= –û–°–ù–û–í–ù–û–ô –°–ï–†–í–ò–° =================

class NotificationService(INotificationService):
    """üì¢ –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.templates: Dict[str, NotificationTemplate] = {}

        # –ü—Ä–∞–≤–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.rules: List[NotificationRule] = []

        # –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_queue: List[Notification] = []

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        self.channel_handlers: Dict[NotificationChannel, Callable] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_sent': 0,
            'total_failed': 0,
            'by_type': {},
            'by_channel': {},
            'by_priority': {}
        }

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_default_templates()
        self._initialize_default_rules()
        self._initialize_channel_handlers()

        self.logger.info("üì¢ NotificationService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ================= –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê =================

    async def send_trade_notification(
        self,
        trade: Trade,
        notification_type: str = "trade_executed"
    ) -> None:
        """üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ"""

        try:
            context = {
                'trade_id': trade.id,
                'pair': str(trade.pair),
                'order_type': trade.order_type.value,
                'quantity': str(trade.quantity),
                'price': str(trade.price),
                'total_cost': str(trade.total_cost),
                'commission': str(trade.commission),
                'timestamp': trade.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                'strategy_name': trade.strategy_name or 'unknown'
            }

            await self._process_notification(NotificationType.TRADE_EXECUTED, context)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ: {e}")

    async def send_emergency_notification(
        self,
        message: str,
        severity: str = "high"
    ) -> None:
        """üö® –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        try:
            priority_map = {
                'low': NotificationPriority.NORMAL,
                'medium': NotificationPriority.HIGH,
                'high': NotificationPriority.CRITICAL,
                'critical': NotificationPriority.EMERGENCY
            }

            priority = priority_map.get(severity, NotificationPriority.CRITICAL)

            notification = Notification(
                notification_type=NotificationType.EMERGENCY_STOP,
                title="üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï",
                message=message,
                priority=priority,
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                context={'severity': severity, 'message': message}
            )

            await self._send_notification(notification)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def send_daily_report(self, report_data: Dict[str, Any]) -> None:
        """üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""

        try:
            context = {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'total_trades': report_data.get('total_trades', 0),
                'total_pnl': str(report_data.get('total_pnl', '0')),
                'win_rate': report_data.get('win_rate', 0),
                'best_trade': str(report_data.get('best_trade', '0')),
                'worst_trade': str(report_data.get('worst_trade', '0')),
                'active_positions': report_data.get('active_positions', 0)
            }

            await self._process_notification(NotificationType.DAILY_REPORT, context)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    # ================= –û–ë–†–ê–ë–û–¢–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =================

    async def _process_notification(
        self,
        notification_type: NotificationType,
        context: Dict[str, Any]
    ) -> None:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
            applicable_rules = [
                rule for rule in self.rules
                if rule.notification_type == notification_type and rule.should_send(context)
            ]

            if not applicable_rules:
                self.logger.debug(f"üì¢ –ù–µ—Ç –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –ø—Ä–∞–≤–∏–ª –¥–ª—è {notification_type.value}")
                return

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
            for rule in applicable_rules:
                notification = await self._create_notification_from_rule(
                    rule, notification_type, context
                )
                if notification:
                    await self._send_notification(notification)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    rule.last_sent = datetime.now()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _create_notification_from_rule(
        self,
        rule: NotificationRule,
        notification_type: NotificationType,
        context: Dict[str, Any]
    ) -> Optional[Notification]:
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª–∞"""

        try:
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
            template = self._find_template(notification_type)
            if not template:
                return None

            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            title, message = template.render(context)

            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = Notification(
                notification_type=notification_type,
                title=title,
                message=message,
                priority=rule.priority,
                channels=rule.channels,
                context=context
            )

            return notification

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return None

    async def _send_notification(self, notification: Notification) -> bool:
        """üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        try:
            success = False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
            for channel in notification.channels:
                try:
                    handler = self.channel_handlers.get(channel)
                    if handler:
                        await handler(notification)
                        success = True
                        self._update_stats('by_channel', channel.value, True)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.value}")

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {channel.value}: {e}")
                    self._update_stats('by_channel', channel.value, False)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if success:
                notification.status = NotificationStatus.SENT
                notification.sent_at = datetime.now()
                self.stats['total_sent'] += 1
            else:
                notification.status = NotificationStatus.FAILED
                notification.retry_count += 1
                self.stats['total_failed'] += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats('by_type', notification.notification_type.value, success)
            self._update_stats('by_priority', notification.priority.value, success)

            return success

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            notification.status = NotificationStatus.FAILED
            notification.error_message = str(e)
            return False

    # ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–ù–ê–õ–û–í =================

    async def _console_handler(self, notification: Notification) -> None:
        """üñ•Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        priority_icons = {
            NotificationPriority.LOW: "‚ÑπÔ∏è",
            NotificationPriority.NORMAL: "üì¢",
            NotificationPriority.HIGH: "‚ö†Ô∏è",
            NotificationPriority.CRITICAL: "üö®",
            NotificationPriority.EMERGENCY: "üÜò"
        }

        icon = priority_icons.get(notification.priority, "üì¢")
        timestamp = notification.created_at.strftime('%H:%M:%S')

        print(f"{icon} [{timestamp}] {notification.title}")
        if notification.message != notification.title:
            print(f"   {notification.message}")

    async def _log_file_handler(self, notification: Notification) -> None:
        """üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        log_level_map = {
            NotificationPriority.LOW: logging.DEBUG,
            NotificationPriority.NORMAL: logging.INFO,
            NotificationPriority.HIGH: logging.WARNING,
            NotificationPriority.CRITICAL: logging.ERROR,
            NotificationPriority.EMERGENCY: logging.CRITICAL
        }

        level = log_level_map.get(notification.priority, logging.INFO)

        log_message = f"[{notification.notification_type.value}] {notification.title}"
        if notification.message != notification.title:
            log_message += f" - {notification.message}"

        self.logger.log(level, log_message, extra={
            'notification_id': notification.id,
            'notification_type': notification.notification_type.value,
            'context': notification.context
        })

    async def _webhook_handler(self, notification: Notification) -> None:
        """üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è webhook
        webhook_data = {
            'id': notification.id,
            'type': notification.notification_type.value,
            'title': notification.title,
            'message': notification.message,
            'priority': notification.priority.value,
            'timestamp': notification.created_at.isoformat(),
            'context': notification.context
        }

        self.logger.debug(f"üîó Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {json.dumps(webhook_data, indent=2)}")

    # ================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =================

    def _initialize_default_templates(self) -> None:
        """üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""

        templates = [
            NotificationTemplate(
                id="trade_executed",
                notification_type=NotificationType.TRADE_EXECUTED,
                title_template="üí∞ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {pair}",
                message_template="{order_type} {quantity} {pair} –ø–æ —Ü–µ–Ω–µ {price} (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name})",
                priority=NotificationPriority.NORMAL,
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                variables=['pair', 'order_type', 'quantity', 'price', 'strategy_name']
            ),

            NotificationTemplate(
                id="emergency_stop",
                notification_type=NotificationType.EMERGENCY_STOP,
                title_template="üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê",
                message_template="–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {message}",
                priority=NotificationPriority.EMERGENCY,
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                variables=['message']
            ),

            NotificationTemplate(
                id="daily_report",
                notification_type=NotificationType.DAILY_REPORT,
                title_template="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {date}",
                message_template="–°–¥–µ–ª–æ–∫: {total_trades}, P&L: {total_pnl}, Win Rate: {win_rate}%",
                priority=NotificationPriority.NORMAL,
                channels=[NotificationChannel.LOG_FILE],
                variables=['date', 'total_trades', 'total_pnl', 'win_rate']
            ),

            NotificationTemplate(
                id="risk_alert",
                notification_type=NotificationType.RISK_ALERT,
                title_template="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö",
                message_template="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: {risk_type} ({current_value}/{limit_value})",
                priority=NotificationPriority.HIGH,
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                variables=['risk_type', 'current_value', 'limit_value']
            )
        ]

        for template in templates:
            self.templates[template.id] = template

    def _initialize_default_rules(self) -> None:
        """üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""

        rules = [
            NotificationRule(
                id="all_trades",
                notification_type=NotificationType.TRADE_EXECUTED,
                conditions={},  # –í—Å–µ —Å–¥–µ–ª–∫–∏
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                priority=NotificationPriority.NORMAL
            ),

            NotificationRule(
                id="emergency_only",
                notification_type=NotificationType.EMERGENCY_STOP,
                conditions={},
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                priority=NotificationPriority.EMERGENCY
            ),

            NotificationRule(
                id="daily_reports",
                notification_type=NotificationType.DAILY_REPORT,
                conditions={},
                channels=[NotificationChannel.LOG_FILE],
                priority=NotificationPriority.NORMAL,
                rate_limit_minutes=1440  # –†–∞–∑ –≤ –¥–µ–Ω—å
            ),

            NotificationRule(
                id="high_risk_alerts",
                notification_type=NotificationType.RISK_ALERT,
                conditions={'severity': 'high'},
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG_FILE],
                priority=NotificationPriority.CRITICAL,
                rate_limit_minutes=60  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å
            )
        ]

        self.rules.extend(rules)

    def _initialize_channel_handlers(self) -> None:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–æ–≤"""

        self.channel_handlers = {
            NotificationChannel.CONSOLE: self._console_handler,
            NotificationChannel.LOG_FILE: self._log_file_handler,
            NotificationChannel.WEBHOOK: self._webhook_handler
        }

    # ================= –£–¢–ò–õ–ò–¢–´ =================

    def _find_template(self, notification_type: NotificationType) -> Optional[NotificationTemplate]:
        """üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

        for template in self.templates.values():
            if template.notification_type == notification_type and template.enabled:
                return template
        return None

    def _update_stats(self, category: str, key: str, success: bool) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

        if category not in self.stats:
            self.stats[category] = {}

        if key not in self.stats[category]:
            self.stats[category][key] = {'sent': 0, 'failed': 0}

        if success:
            self.stats[category][key]['sent'] += 1
        else:
            self.stats[category][key]['failed'] += 1

    # ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì =================

    def add_rule(self, rule: NotificationRule) -> bool:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            existing_ids = [r.id for r in self.rules]
            if rule.id in existing_ids:
                self.logger.warning(f"‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–æ {rule.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            self.rules.append(rule)
            self.logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ {rule.id} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return False

    def remove_rule(self, rule_id: str) -> bool:
        """‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        try:
            self.rules = [r for r in self.rules if r.id != rule_id]
            self.logger.info(f"üóëÔ∏è –ü—Ä–∞–≤–∏–ª–æ {rule_id} —É–¥–∞–ª–µ–Ω–æ")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞: {e}")
            return False

    def get_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        return {
            'total_sent': self.stats['total_sent'],
            'total_failed': self.stats['total_failed'],
            'success_rate': (
                self.stats['total_sent'] /
                (self.stats['total_sent'] + self.stats['total_failed']) * 100
            ) if (self.stats['total_sent'] + self.stats['total_failed']) > 0 else 0,
            'by_type': self.stats.get('by_type', {}),
            'by_channel': self.stats.get('by_channel', {}),
            'by_priority': self.stats.get('by_priority', {}),
            'active_rules': len([r for r in self.rules if r.enabled]),
            'total_templates': len(self.templates)
        }

    async def test_notification(self, channel: NotificationChannel) -> bool:
        """üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""

        try:
            test_notification = Notification(
                notification_type=NotificationType.SYSTEM_ERROR,
                title="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                message=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel.value}",
                priority=NotificationPriority.LOW,
                channels=[channel],
                context={'test': True}
            )

            return await self._send_notification(test_notification)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
