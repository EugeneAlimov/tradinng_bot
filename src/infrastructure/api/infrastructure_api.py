#!/usr/bin/env python3
"""üåê –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π - API –∫–ª–∏–µ–Ω—Ç—ã"""

import time
import logging
import hashlib
import hmac
import asyncio
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from typing import Dict, Any, Optional, List, Union, Protocol
from decimal import Decimal
from datetime import datetime, timedelta
from collections import deque

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from ..core.interfaces import IExchangeAPI, ICacheService, IMonitoringService
from ..core.models import TradeOrder, TradingPair, APIResponse, ErrorInfo
from ..core.exceptions import APIError, RateLimitError, ConnectionError
from ..core.constants import API, Trading
from ..config.settings import APISettings


@dataclass
class APIMetrics:
    """üìä –ú–µ—Ç—Ä–∏–∫–∏ API"""
    total_requests: int = 0
    successful_requests: int = 0
    failed_requests: int = 0
    average_response_time: float = 0.0
    rate_limit_hits: int = 0
    last_request_time: datetime = field(default_factory=datetime.now)
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.total_requests == 0:
            return 100.0
        return (self.successful_requests / self.total_requests) * 100
    
    @property
    def error_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return 100.0 - self.success_rate


class RateLimiter:
    """‚ö° –£–º–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(
        self, 
        calls_per_minute: int = 30, 
        calls_per_hour: int = 300,
        adaptive: bool = True
    ):
        self.calls_per_minute = calls_per_minute
        self.calls_per_hour = calls_per_hour
        self.adaptive = adaptive
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.minute_calls: deque = deque()
        self.hour_calls: deque = deque()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.adaptive_delay = 0.0
        self.error_count = 0
        self.last_error_time = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.metrics = APIMetrics()
        
        self.logger = logging.getLogger(__name__)
    
    async def acquire_permit(self, endpoint: str = "unknown") -> float:
        """üé´ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å"""
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._cleanup_old_calls(current_time)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        wait_time = self._calculate_wait_time(current_time)
        
        if wait_time > 0:
            self.logger.debug(f"‚è≥ Rate limit: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å –¥–ª—è {endpoint}")
            await asyncio.sleep(wait_time)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        if self.adaptive_delay > 0:
            await asyncio.sleep(self.adaptive_delay)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
        self._register_call(current_time)
        
        return wait_time + self.adaptive_delay
    
    def register_success(self, response_time: float) -> None:
        """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.metrics.successful_requests += 1
        self.metrics.total_requests += 1
        self.metrics.last_request_time = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        total_time = self.metrics.average_response_time * (self.metrics.successful_requests - 1)
        self.metrics.average_response_time = (total_time + response_time) / self.metrics.successful_requests
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        if self.adaptive and self.adaptive_delay > 0:
            self.adaptive_delay = max(0, self.adaptive_delay - 0.1)
    
    def register_error(self, error_type: str) -> None:
        """‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏"""
        self.metrics.failed_requests += 1
        self.metrics.total_requests += 1
        self.metrics.last_request_time = datetime.now()
        
        if "rate_limit" in error_type.lower() or "429" in error_type:
            self.metrics.rate_limit_hits += 1
            self.error_count += 1
            self.last_error_time = time.time()
            
            if self.adaptive:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö rate limit
                self.adaptive_delay = min(30.0, self.adaptive_delay + 2.0)
                self.logger.warning(f"üö® Rate limit hit, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {self.adaptive_delay:.1f}—Å")
    
    def _cleanup_old_calls(self, current_time: float) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        minute_threshold = current_time - 60
        hour_threshold = current_time - 3600
        
        while self.minute_calls and self.minute_calls[0] <= minute_threshold:
            self.minute_calls.popleft()
        
        while self.hour_calls and self.hour_calls[0] <= hour_threshold:
            self.hour_calls.popleft()
    
    def _calculate_wait_time(self, current_time: float) -> float:
        """‚è±Ô∏è –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
        wait_times = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ –º–∏–Ω—É—Ç–∞–º
        if len(self.minute_calls) >= self.calls_per_minute:
            oldest_call = self.minute_calls[0]
            wait_time = 60 - (current_time - oldest_call)
            if wait_time > 0:
                wait_times.append(wait_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ —á–∞—Å–∞–º
        if len(self.hour_calls) >= self.calls_per_hour:
            oldest_call = self.hour_calls[0]
            wait_time = 3600 - (current_time - oldest_call)
            if wait_time > 0:
                wait_times.append(wait_time)
        
        return max(wait_times) if wait_times else 0.0
    
    def _register_call(self, current_time: float) -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞"""
        self.minute_calls.append(current_time)
        self.hour_calls.append(current_time)
    
    def get_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ rate limiter"""
        current_time = time.time()
        self._cleanup_old_calls(current_time)
        
        return {
            "limits": {
                "calls_per_minute": self.calls_per_minute,
                "calls_per_hour": self.calls_per_hour
            },
            "current_load": {
                "calls_this_minute": len(self.minute_calls),
                "calls_this_hour": len(self.hour_calls),
                "load_percentage_minute": (len(self.minute_calls) / self.calls_per_minute) * 100,
                "load_percentage_hour": (len(self.hour_calls) / self.calls_per_hour) * 100
            },
            "adaptive": {
                "enabled": self.adaptive,
                "current_delay": self.adaptive_delay,
                "error_count": self.error_count,
                "minutes_since_last_error": (current_time - self.last_error_time) / 60 if self.last_error_time > 0 else None
            },
            "metrics": {
                "total_requests": self.metrics.total_requests,
                "success_rate": self.metrics.success_rate,
                "error_rate": self.metrics.error_rate,
                "average_response_time": self.metrics.average_response_time,
                "rate_limit_hits": self.metrics.rate_limit_hits
            }
        }


class HTTPClient:
    """üåê HTTP –∫–ª–∏–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, base_url: str, timeout: int = 10, max_retries: int = 3):
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        self.session = requests.Session()
        
        retry_strategy = Retry(
            total=max_retries,
            status_forcelist=[429, 500, 502, 503, 504],
            method_whitelist=["HEAD", "GET", "OPTIONS", "POST"],
            backoff_factor=1
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
        self.logger = logging.getLogger(__name__)
    
    async def get(self, endpoint: str, params: Optional[Dict] = None) -> requests.Response:
        """GET –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        return await self._make_request("GET", url, params=params)
    
    async def post(self, endpoint: str, data: Optional[Dict] = None, headers: Optional[Dict] = None) -> requests.Response:
        """POST –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        return await self._make_request("POST", url, data=data, headers=headers)
    
    async def _make_request(self, method: str, url: str, **kwargs) -> requests.Response:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        kwargs.setdefault('timeout', self.timeout)
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None, 
                lambda: self.session.request(method, url, **kwargs)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            response.raise_for_status()
            return response
            
        except requests.exceptions.Timeout as e:
            raise ConnectionError(f"Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}") from e
        except requests.exceptions.ConnectionError as e:
            raise ConnectionError(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {url}") from e
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 429:
                raise RateLimitError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤") from e
            raise APIError(f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code}: {e.response.text}") from e
        except Exception as e:
            raise APIError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}") from e


class ExmoAPIClient(IExchangeAPI):
    """üèõÔ∏è EXMO API –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self, settings: APISettings, rate_limiter: Optional[RateLimiter] = None):
        self.settings = settings
        self.rate_limiter = rate_limiter or RateLimiter(
            settings.calls_per_minute,
            settings.calls_per_hour,
            settings.adaptive_rate_limiting
        )
        
        self.http_client = HTTPClient(
            settings.exmo_base_url,
            settings.exmo_timeout,
            settings.exmo_max_retries
        )
        
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._cache: Dict[str, Any] = {}
        self._cache_timestamps: Dict[str, datetime] = {}
    
    async def get_balance(self, currency: str) -> Decimal:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã"""
        try:
            user_info = await self._authenticated_request("user_info")
            
            if user_info and "balances" in user_info:
                balance_str = user_info["balances"].get(currency, "0")
                return Decimal(str(balance_str))
            
            return Decimal("0")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
            return Decimal("0")
    
    async def get_current_price(self, pair: str) -> Decimal:
        """üí± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–∞—Ä—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"price_{pair}"
            if self._is_cache_valid(cache_key, self.settings.cache_price_ttl):
                return Decimal(str(self._cache[cache_key]))
            
            ticker_data = await self._public_request("ticker")
            
            if ticker_data and pair in ticker_data:
                price_str = ticker_data[pair]["last_trade"]
                price = Decimal(str(price_str))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._update_cache(cache_key, float(price))
                
                return price
            
            raise APIError(f"–ü–∞—Ä–∞ {pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ticker –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair}: {e}")
            raise APIError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {pair}") from e
    
    async def create_order(
        self,
        pair: str,
        quantity: Decimal,
        price: Decimal,
        order_type: str
    ) -> Dict[str, Any]:
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            await self._validate_order_params(pair, quantity, price, order_type)
            
            params = {
                "pair": pair,
                "quantity": str(quantity),
                "price": str(price),
                "type": order_type
            }
            
            self.logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {order_type.upper()} {quantity} {pair} –ø–æ {price}")
            
            result = await self._authenticated_request("order_create", params)
            
            if result and result.get("result"):
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ID {result.get('order_id')}")
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
                self._invalidate_balance_cache()
                
                return {
                    "success": True,
                    "order_id": result.get("order_id"),
                    "result": result
                }
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API"
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                return {
                    "success": False,
                    "error": error_msg,
                    "result": result
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "result": None
            }
    
    async def get_order_book(self, pair: str, limit: int = 100) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            params = {"pair": pair}
            if limit != 100:
                params["limit"] = str(limit)
            
            return await self._public_request("order_book", params)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {pair}: {e}")
            raise APIError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è {pair}") from e
    
    async def get_trades_history(self, pair: str, limit: int = 100) -> List[Dict[str, Any]]:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            params = {"pair": pair}
            if limit != 100:
                params["limit"] = str(limit)
            
            result = await self._authenticated_request("user_trades", params)
            
            if result and pair in result:
                return result[pair]
            
            return []
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ {pair}: {e}")
            return []
    
    async def get_open_orders(self) -> Dict[str, Any]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            return await self._authenticated_request("user_open_orders") or {}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    async def cancel_order(self, order_id: str) -> Dict[str, Any]:
        """‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        try:
            params = {"order_id": order_id}
            result = await self._authenticated_request("order_cancel", params)
            
            if result and result.get("result"):
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                return {"success": True, "result": result}
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API"
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return {"success": False, "error": str(e)}
    
    async def _public_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """üîì –ü—É–±–ª–∏—á–Ω—ã–π API –∑–∞–ø—Ä–æ—Å"""
        try:
            await self.rate_limiter.acquire_permit(endpoint)
            
            start_time = time.time()
            response = await self.http_client.get(endpoint, params)
            response_time = time.time() - start_time
            
            self.rate_limiter.register_success(response_time)
            
            return response.json()
            
        except Exception as e:
            self.rate_limiter.register_error(str(e))
            raise
    
    async def _authenticated_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∑–∞–ø—Ä–æ—Å"""
        if params is None:
            params = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º nonce
        params["nonce"] = str(int(time.time() * 1000))
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        post_data = "&".join([f"{k}={v}" for k, v in params.items()])
        signature = hmac.new(
            self.settings.exmo_api_secret.encode(),
            post_data.encode(),
            hashlib.sha512
        ).hexdigest()
        
        headers = {
            "Key": self.settings.exmo_api_key,
            "Sign": signature,
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        try:
            await self.rate_limiter.acquire_permit(endpoint)
            
            start_time = time.time()
            response = await self.http_client.post(endpoint, data=params, headers=headers)
            response_time = time.time() - start_time
            
            self.rate_limiter.register_success(response_time)
            
            return response.json()
            
        except Exception as e:
            self.rate_limiter.register_error(str(e))
            raise
    
    async def _validate_order_params(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        if quantity <= 0:
            raise APIError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        if price <= 0:
            raise APIError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        if order_type not in ["buy", "sell"]:
            raise APIError("–¢–∏–ø –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        if quantity < Trading.MIN_QUANTITY:
            raise APIError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ: {Trading.MIN_QUANTITY}")
        
        if price < Trading.MIN_PRICE:
            raise APIError(f"–¶–µ–Ω–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π: {Trading.MIN_PRICE}")
    
    def _is_cache_valid(self, key: str, ttl_seconds: int) -> bool:
        """üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        if key not in self._cache or key not in self._cache_timestamps:
            return False
        
        age = datetime.now() - self._cache_timestamps[key]
        return age.total_seconds() < ttl_seconds
    
    def _update_cache(self, key: str, value: Any) -> None:
        """üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
        self._cache[key] = value
        self._cache_timestamps[key] = datetime.now()
    
    def _invalidate_balance_cache(self) -> None:
        """üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        keys_to_remove = [key for key in self._cache.keys() if key.startswith("balance_")]
        for key in keys_to_remove:
            self._cache.pop(key, None)
            self._cache_timestamps.pop(key, None)
    
    def get_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            "client_type": "ExmoAPIClient",
            "rate_limiter": self.rate_limiter.get_status(),
            "cache": {
                "entries": len(self._cache),
                "cache_keys": list(self._cache.keys())
            },
            "settings": {
                "base_url": self.settings.exmo_base_url,
                "timeout": self.settings.exmo_timeout,
                "max_retries": self.settings.exmo_max_retries,
                "cache_enabled": self.settings.cache_enabled
            }
        }


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
class APIClientFactory:
    """üè≠ –§–∞–±—Ä–∏–∫–∞ API –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    @staticmethod
    def create_exmo_client(settings: APISettings) -> ExmoAPIClient:
        """–°–æ–∑–¥–∞–Ω–∏–µ EXMO –∫–ª–∏–µ–Ω—Ç–∞"""
        rate_limiter = RateLimiter(
            settings.calls_per_minute,
            settings.calls_per_hour,
            settings.adaptive_rate_limiting
        )
        
        return ExmoAPIClient(settings, rate_limiter)
    
    @staticmethod
    def create_client_from_config(exchange: str, settings: APISettings) -> IExchangeAPI:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–∏—Ä–∂–∏"""
        if exchange.lower() == "exmo":
            return APIClientFactory.create_exmo_client(settings)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –±–∏—Ä–∂–∞: {exchange}")
