import asyncio
import logging
from typing import Dict, Any, Optional
from pathlib import Path

from .api.client import ExmoAPIClient, APIClientFactory
from .cache.cache import CacheFactory, InMemoryCache
from .persistence.repository import RepositoryFactory, RepositoryConfig
from .monitoring.service import MonitoringFactory, MonitoringService
from ..config.settings import get_settings


class InfrastructureAdapter:
    """üîó –ê–¥–∞–ø—Ç–µ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""

    def __init__(self):
        self.settings = get_settings()
        self.logger = logging.getLogger(__name__)

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.api_client: Optional[ExmoAPIClient] = None
        self.cache: Optional[InMemoryCache] = None
        self.monitoring: Optional[MonitoringService] = None
        self.repositories = {}

        # –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._initialized = False

    async def initialize(self) -> None:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if self._initialized:
            return

        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
            await self._init_api_client()

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
            await self._init_cache()

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            await self._init_repositories()

            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._init_monitoring()

            self._initialized = True
            self.logger.info("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            raise

    async def _init_api_client(self) -> None:
        """üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            from ..config.settings import APISettings

            api_settings = APISettings(
                exmo_api_key=self.settings.exmo_api_key,
                exmo_api_secret=self.settings.exmo_api_secret,
                calls_per_minute=getattr(self.settings, 'api_calls_per_minute', 30),
                calls_per_hour=getattr(self.settings, 'api_calls_per_hour', 300)
            )

            self.api_client = APIClientFactory.create_exmo_client(api_settings)
            self.logger.info("‚úÖ API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    async def _init_cache(self) -> None:
        """üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞"""
        try:
            if getattr(self.settings, 'cache_enabled', True):
                self.cache = CacheFactory.create_memory_cache(
                    max_size=getattr(self.settings, 'cache_max_size', 1000),
                    default_ttl=getattr(self.settings, 'cache_ttl', 300)
                )
                await self.cache.start()
                self.logger.info("‚úÖ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    async def _init_repositories(self) -> None:
        """üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        try:
            config = RepositoryConfig(
                storage_type=getattr(self.settings, 'storage_type', 'json'),
                storage_path=getattr(self.settings, 'storage_path', 'data'),
                backup_enabled=getattr(self.settings, 'backup_enabled', True)
            )

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            from ..core.models import Position, TradeResult
            self.repositories['positions'] = RepositoryFactory.create_position_repository(config)
            self.repositories['trades'] = RepositoryFactory.create_trade_repository(config)

            self.logger.info("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

    async def _init_monitoring(self) -> None:
        """üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if getattr(self.settings, 'monitoring_enabled', True):
                self.monitoring = MonitoringFactory.create_monitoring_service(
                    notification_type=getattr(self.settings, 'notification_type', 'console'),
                    export_path=getattr(self.settings, 'export_path', 'monitoring_data')
                )
                await self.monitoring.start()
                self.logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

    async def shutdown(self) -> None:
        """üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        try:
            if self.cache:
                await self.cache.stop()

            if self.monitoring:
                await self.monitoring.stop()

            self.logger.info("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

    # –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä–æ–º –±–æ—Ç–µ

    async def get_current_price(self, pair: str) -> float:
        """üí± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.api_client:
            return 0.0

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if self.cache:
                cached_price = await self.cache.get(f"price_{pair}")
                if cached_price:
                    return float(cached_price)

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑ API
            price = await self.api_client.get_current_price(pair)
            price_float = float(price)

            # –ö—ç—à–∏—Ä—É–µ–º
            if self.cache:
                await self.cache.set(f"price_{pair}", price_float, ttl=30)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitoring:
                await self.monitoring.record_api_call("get_current_price", True, 0.5)

            return price_float

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair}: {e}")
            if self.monitoring:
                await self.monitoring.record_api_call("get_current_price", False, 0.0)
            return 0.0

    async def get_balance(self, currency: str) -> float:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not self.api_client:
            return 0.0

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if self.cache:
                cached_balance = await self.cache.get(f"balance_{currency}")
                if cached_balance:
                    return float(cached_balance)

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑ API
            balance = await self.api_client.get_balance(currency)
            balance_float = float(balance)

            # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            if self.cache:
                await self.cache.set(f"balance_{currency}", balance_float, ttl=60)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitoring:
                await self.monitoring.record_balance(currency, balance_float)
                await self.monitoring.record_api_call("get_balance", True, 0.3)

            return balance_float

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
            if self.monitoring:
                await self.monitoring.record_api_call("get_balance", False, 0.0)
            return 0.0

    async def create_order(self, pair: str, quantity: float, price: float, order_type: str) -> Dict[str, Any]:
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        if not self.api_client:
            return {"success": False, "error": "API –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

        try:
            from decimal import Decimal

            result = await self.api_client.create_order(
                pair, Decimal(str(quantity)), Decimal(str(price)), order_type
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitoring:
                await self.monitoring.record_trade(
                    pair, order_type, quantity, price, result.get("success", False)
                )
                await self.monitoring.record_api_call("create_order", result.get("success", False), 1.0)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if result.get("success") and "trades" in self.repositories:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –≤–∞—à—É –º–æ–¥–µ–ª—å)
                    trade_data = {
                        "pair": pair,
                        "action": order_type,
                        "quantity": quantity,
                        "price": price,
                        "success": True,
                        "timestamp": datetime.now()
                    }
                    # await self.repositories['trades'].save(trade_data)
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É: {e}")

            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            if self.monitoring:
                await self.monitoring.record_api_call("create_order", False, 0.0)
            return {"success": False, "error": str(e)}

    async def get_monitoring_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self.monitoring:
            return {"error": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}

        try:
            return await self.monitoring.get_system_status()
        except Exception as e:
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_infrastructure_adapter: Optional[InfrastructureAdapter] = None

async def get_infrastructure() -> InfrastructureAdapter:
    """üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    global _infrastructure_adapter

    if _infrastructure_adapter is None:
        _infrastructure_adapter = InfrastructureAdapter()
        await _infrastructure_adapter.initialize()

    return _infrastructure_adapter
