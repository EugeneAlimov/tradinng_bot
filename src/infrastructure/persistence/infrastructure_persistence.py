#!/usr/bin/env python3
"""üóÑÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π - –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""

import json
import csv
import sqlite3
import asyncio
import aiosqlite
import logging
from abc import ABC, abstractmethod
from dataclasses import dataclass, asdict
from typing import Dict, Any, List, Optional, Union, TypeVar, Generic, Type
from datetime import datetime, timezone
from pathlib import Path
from contextlib import asynccontextmanager
from decimal import Decimal
import pickle

from ..core.interfaces import IRepository, IUnitOfWork
from ..core.models import Position, TradeOrder, TradeResult, TradingPair
from ..core.exceptions import PersistenceError, ValidationError
from ..core.constants import Trading

T = TypeVar('T')


@dataclass
class RepositoryConfig:
    """‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    storage_type: str = "json"  # json, sqlite, csv
    storage_path: str = "data"
    backup_enabled: bool = True
    backup_interval: int = 3600  # —Å–µ–∫—É–Ω–¥
    auto_migrate: bool = True
    compression: bool = False


class JSONSerializer:
    """üìÑ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Decimal"""
    
    @staticmethod
    def serialize(obj: Any) -> str:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ JSON"""
        def decimal_handler(obj):
            if isinstance(obj, Decimal):
                return str(obj)
            elif isinstance(obj, datetime):
                return obj.isoformat()
            elif hasattr(obj, '__dict__'):
                return asdict(obj) if hasattr(obj, '__dataclass_fields__') else obj.__dict__
            raise TypeError(f"–û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ {type(obj)} –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º")
        
        return json.dumps(obj, default=decimal_handler, indent=2, ensure_ascii=False)
    
    @staticmethod
    def deserialize(data: str, target_type: Optional[Type] = None) -> Any:
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ –æ–±—ä–µ–∫—Ç"""
        parsed = json.loads(data)
        
        if target_type and hasattr(target_type, '__dataclass_fields__'):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dataclass
            return JSONSerializer._dict_to_dataclass(parsed, target_type)
        
        return parsed
    
    @staticmethod
    def _dict_to_dataclass(data: Dict, target_type: Type) -> Any:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ dataclass"""
        if not isinstance(data, dict):
            return data
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
        converted_data = {}
        for key, value in data.items():
            if isinstance(value, str):
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ Decimal
                try:
                    if '.' in value and value.replace('.', '').replace('-', '').isdigit():
                        converted_data[key] = Decimal(value)
                    else:
                        converted_data[key] = value
                except:
                    converted_data[key] = value
            else:
                converted_data[key] = value
        
        try:
            return target_type(**converted_data)
        except TypeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å dataclass, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
            return converted_data


class FileRepository(IRepository[T], Generic[T]):
    """üìÅ –§–∞–π–ª–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    
    def __init__(
        self,
        entity_type: Type[T],
        config: RepositoryConfig,
        filename: Optional[str] = None
    ):
        self.entity_type = entity_type
        self.config = config
        self.filename = filename or f"{entity_type.__name__.lower()}s.json"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.storage_path = Path(config.storage_path)
        self.storage_path.mkdir(parents=True, exist_ok=True)
        
        self.file_path = self.storage_path / self.filename
        self.backup_path = self.storage_path / "backups"
        
        if config.backup_enabled:
            self.backup_path.mkdir(exist_ok=True)
        
        self.logger = logging.getLogger(__name__)
        self._lock = asyncio.Lock()
    
    async def save(self, entity: T) -> T:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        async with self._lock:
            entities = await self._load_all()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–Ω–æ—Å—Ç–∏
            entity_id = self._get_entity_id(entity)
            
            if entity_id is None:
                # –ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
                entity_id = self._generate_id(entities)
                self._set_entity_id(entity, entity_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
            entities[entity_id] = entity
            
            await self._save_all(entities)
            
            self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å {self.entity_type.__name__} —Å ID {entity_id}")
            return entity
    
    async def find_by_id(self, entity_id: str) -> Optional[T]:
        """üîç –ü–æ–∏—Å–∫ –ø–æ ID"""
        entities = await self._load_all()
        return entities.get(entity_id)
    
    async def find_all(self) -> List[T]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        entities = await self._load_all()
        return list(entities.values())
    
    async def find_by_criteria(self, criteria: Dict[str, Any]) -> List[T]:
        """üîé –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        entities = await self.find_all()
        
        result = []
        for entity in entities:
            if self._matches_criteria(entity, criteria):
                result.append(entity)
        
        return result
    
    async def delete(self, entity_id: str) -> bool:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        async with self._lock:
            entities = await self._load_all()
            
            if entity_id in entities:
                del entities[entity_id]
                await self._save_all(entities)
                self.logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å {self.entity_type.__name__} —Å ID {entity_id}")
                return True
            
            return False
    
    async def count(self) -> int:
        """üî¢ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        entities = await self._load_all()
        return len(entities)
    
    async def exists(self, entity_id: str) -> bool:
        """‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        entities = await self._load_all()
        return entity_id in entities
    
    async def backup(self) -> str:
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not self.config.backup_enabled:
            return ""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"{self.filename}.{timestamp}.bak"
        backup_file = self.backup_path / backup_filename
        
        if self.file_path.exists():
        if self.file_path.exists():
            async with self._lock:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                import shutil
                shutil.copy2(self.file_path, backup_file)
                
                self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_filename}")
                return str(backup_file)
        
        return ""
    
    async def restore(self, backup_path: str) -> bool:
        """üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            backup_file = Path(backup_path)
            if not backup_file.exists():
                return False
            
            async with self._lock:
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                await self.backup()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                import shutil
                shutil.copy2(backup_file, self.file_path)
                
                self.logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ {backup_path}: {e}")
            return False
    
    async def _load_all(self) -> Dict[str, T]:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.file_path.exists():
                return {}
            
            with open(self.file_path, 'r', encoding='utf-8') as f:
                data = f.read()
            
            if not data.strip():
                return {}
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            raw_data = json.loads(data)
            
            if not isinstance(raw_data, dict):
                return {}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã
            entities = {}
            for entity_id, entity_data in raw_data.items():
                try:
                    if hasattr(self.entity_type, '__dataclass_fields__'):
                        entity = JSONSerializer._dict_to_dataclass(entity_data, self.entity_type)
                    else:
                        entity = self.entity_type(**entity_data)
                    
                    entities[entity_id] = entity
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å {entity_id}: {e}")
            
            return entities
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.file_path}: {e}")
            return {}
    
    async def _save_all(self, entities: Dict[str, T]) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            serializable_data = {}
            for entity_id, entity in entities.items():
                if hasattr(entity, '__dataclass_fields__'):
                    serializable_data[entity_id] = asdict(entity)
                elif hasattr(entity, '__dict__'):
                    serializable_data[entity_id] = entity.__dict__
                else:
                    serializable_data[entity_id] = entity
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
            json_data = JSONSerializer.serialize(serializable_data)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.file_path.with_suffix('.tmp')
            
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(json_data)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            temp_file.replace(self.file_path)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ {self.file_path}: {e}")
            raise PersistenceError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def _get_entity_id(self, entity: T) -> Optional[str]:
        """üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—É—â–Ω–æ—Å—Ç–∏"""
        if hasattr(entity, 'id'):
            return getattr(entity, 'id')
        elif hasattr(entity, 'trade_id'):
            return getattr(entity, 'trade_id')
        elif hasattr(entity, 'position_id'):
            return getattr(entity, 'position_id')
        return None
    
    def _set_entity_id(self, entity: T, entity_id: str) -> None:
        """üÜî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —Å—É—â–Ω–æ—Å—Ç–∏"""
        if hasattr(entity, 'id'):
            setattr(entity, 'id', entity_id)
        elif hasattr(entity, 'trade_id'):
            setattr(entity, 'trade_id', entity_id)
        elif hasattr(entity, 'position_id'):
            setattr(entity, 'position_id', entity_id)
    
    def _generate_id(self, existing_entities: Dict[str, T]) -> str:
        """üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID"""
        import uuid
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ ID –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if existing_entities:
            try:
                max_id = max(int(entity_id) for entity_id in existing_entities.keys() if entity_id.isdigit())
                return str(max_id + 1)
            except ValueError:
                pass
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID –∫–∞–∫ fallback
        return str(uuid.uuid4())
    
    def _matches_criteria(self, entity: T, criteria: Dict[str, Any]) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        for key, expected_value in criteria.items():
            if not hasattr(entity, key):
                return False
            
            actual_value = getattr(entity, key)
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if isinstance(expected_value, dict):
                # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                for op, value in expected_value.items():
                    if op == '$eq' and actual_value != value:
                        return False
                    elif op == '$ne' and actual_value == value:
                        return False
                    elif op == '$gt' and actual_value <= value:
                        return False
                    elif op == '$gte' and actual_value < value:
                        return False
                    elif op == '$lt' and actual_value >= value:
                        return False
                    elif op == '$lte' and actual_value > value:
                        return False
                    elif op == '$in' and actual_value not in value:
                        return False
                    elif op == '$nin' and actual_value in value:
                        return False
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                if actual_value != expected_value:
                    return False
        
        return True


class SQLiteRepository(IRepository[T], Generic[T]):
    """üóÉÔ∏è SQLite —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    
    def __init__(
        self,
        entity_type: Type[T],
        config: RepositoryConfig,
        table_name: Optional[str] = None
    ):
        self.entity_type = entity_type
        self.config = config
        self.table_name = table_name or f"{entity_type.__name__.lower()}s"
        
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.storage_path = Path(config.storage_path)
        self.storage_path.mkdir(parents=True, exist_ok=True)
        self.db_path = self.storage_path / "trading_bot.db"
        
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        asyncio.create_task(self._init_table())
    
    async def _init_table(self) -> None:
        """üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–µ–π entity_type
                schema = self._generate_table_schema()
                
                await db.execute(f"""
                    CREATE TABLE IF NOT EXISTS {self.table_name} (
                        {schema}
                    )
                """)
                
                await db.commit()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {self.table_name}: {e}")
    
    def _generate_table_schema(self) -> str:
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã"""
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        fields = [
            "id TEXT PRIMARY KEY",
            "created_at TEXT NOT NULL",
            "updated_at TEXT NOT NULL",
            "data TEXT NOT NULL"  # JSON –¥–∞–Ω–Ω—ã–µ
        ]
        
        return ", ".join(fields)
    
    async def save(self, entity: T) -> T:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        entity_id = self._get_entity_id(entity)
        
        if entity_id is None:
            entity_id = self._generate_id()
            self._set_entity_id(entity, entity_id)
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = JSONSerializer.serialize(asdict(entity) if hasattr(entity, '__dataclass_fields__') else entity.__dict__)
        
        now = datetime.now(timezone.utc).isoformat()
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                cursor = await db.execute(
                    f"SELECT id FROM {self.table_name} WHERE id = ?",
                    (entity_id,)
                )
                exists = await cursor.fetchone()
                
                if exists:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    await db.execute(f"""
                        UPDATE {self.table_name}
                        SET data = ?, updated_at = ?
                        WHERE id = ?
                    """, (data, now, entity_id))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    await db.execute(f"""
                        INSERT INTO {self.table_name} (id, created_at, updated_at, data)
                        VALUES (?, ?, ?, ?)
                    """, (entity_id, now, now, data))
                
                await db.commit()
                
                self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å {self.entity_type.__name__} —Å ID {entity_id}")
                return entity
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {entity_id}: {e}")
            raise PersistenceError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å: {e}")
    
    async def find_by_id(self, entity_id: str) -> Optional[T]:
        """üîç –ü–æ–∏—Å–∫ –ø–æ ID"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    f"SELECT data FROM {self.table_name} WHERE id = ?",
                    (entity_id,)
                )
                row = await cursor.fetchone()
                
                if row:
                    return JSONSerializer.deserialize(row[0], self.entity_type)
                
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–Ω–æ—Å—Ç–∏ {entity_id}: {e}")
            return None
    
    async def find_all(self) -> List[T]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(f"SELECT data FROM {self.table_name}")
                rows = await cursor.fetchall()
                
                entities = []
                for row in rows:
                    try:
                        entity = JSONSerializer.deserialize(row[0], self.entity_type)
                        entities.append(entity)
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç—å: {e}")
                
                return entities
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
            return []
    
    async def find_by_criteria(self, criteria: Dict[str, Any]) -> List[T]:
        """üîé –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JSON)"""
        # –î–ª—è SQLite –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å JSON –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã,
        # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏
        all_entities = await self.find_all()
        
        result = []
        for entity in all_entities:
            if self._matches_criteria(entity, criteria):
                result.append(entity)
        
        return result
    
    async def delete(self, entity_id: str) -> bool:
        """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    f"DELETE FROM {self.table_name} WHERE id = ?",
                    (entity_id,)
                )
                await db.commit()
                
                deleted = cursor.rowcount > 0
                
                if deleted:
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å {self.entity_type.__name__} —Å ID {entity_id}")
                
                return deleted
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {entity_id}: {e}")
            return False
    
    async def count(self) -> int:
        """üî¢ –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(f"SELECT COUNT(*) FROM {self.table_name}")
                row = await cursor.fetchone()
                return row[0] if row else 0
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
            return 0
    
    async def exists(self, entity_id: str) -> bool:
        """‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    f"SELECT 1 FROM {self.table_name} WHERE id = ? LIMIT 1",
                    (entity_id,)
                )
                row = await cursor.fetchone()
                return row is not None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è {entity_id}: {e}")
            return False
    
    def _get_entity_id(self, entity: T) -> Optional[str]:
        """üÜî –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—É—â–Ω–æ—Å—Ç–∏"""
        if hasattr(entity, 'id'):
            return getattr(entity, 'id')
        elif hasattr(entity, 'trade_id'):
            return getattr(entity, 'trade_id')
        elif hasattr(entity, 'position_id'):
            return getattr(entity, 'position_id')
        return None
    
    def _set_entity_id(self, entity: T, entity_id: str) -> None:
        """üÜî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —Å—É—â–Ω–æ—Å—Ç–∏"""
        if hasattr(entity, 'id'):
            setattr(entity, 'id', entity_id)
        elif hasattr(entity, 'trade_id'):
            setattr(entity, 'trade_id', entity_id)
        elif hasattr(entity, 'position_id'):
            setattr(entity, 'position_id', entity_id)
    
    def _generate_id(self) -> str:
        """üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ ID"""
        import uuid
        return str(uuid.uuid4())
    
    def _matches_criteria(self, entity: T, criteria: Dict[str, Any]) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        for key, expected_value in criteria.items():
            if not hasattr(entity, key):
                return False
            
            actual_value = getattr(entity, key)
            
            if isinstance(expected_value, dict):
                for op, value in expected_value.items():
                    if op == '$eq' and actual_value != value:
                        return False
                    elif op == '$ne' and actual_value == value:
                        return False
                    elif op == '$gt' and actual_value <= value:
                        return False
                    elif op == '$gte' and actual_value < value:
                        return False
                    elif op == '$lt' and actual_value >= value:
                        return False
                    elif op == '$lte' and actual_value > value:
                        return False
                    elif op == '$in' and actual_value not in value:
                        return False
                    elif op == '$nin' and actual_value in value:
                        return False
            else:
                if actual_value != expected_value:
                    return False
        
        return True


class UnitOfWork(IUnitOfWork):
    """üîÑ Unit of Work pattern –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    
    def __init__(self, repositories: Dict[str, IRepository]):
        self.repositories = repositories
        self._is_committed = False
        self._rollback_data: Dict[str, Any] = {}
        self.logger = logging.getLogger(__name__)
    
    async def __aenter__(self):
        """üöÄ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        await self._create_checkpoint()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        if exc_type is not None:
            # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è
            await self.rollback()
        elif not self._is_committed:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —è–≤–Ω–æ–≥–æ
            await self.commit()
    
    async def commit(self) -> None:
        """‚úÖ –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            # –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
            # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ commit'–∏–º —Å—Ä–∞–∑—É
            self._is_committed = True
            self.logger.debug("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            await self.rollback()
            raise
    
    async def rollback(self) -> None:
        """üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            # –í –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–∞—Ç —Å–ª–æ–∂–µ–Ω
            # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–∑ checkpoint'–æ–≤
            self.logger.warning("–û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    async def _create_checkpoint(self) -> None:
        """üì∏ –°–æ–∑–¥–∞–Ω–∏–µ checkpoint'–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
        pass
    
    def get_repository(self, entity_type: Type[T]) -> IRepository[T]:
        """üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ —Ç–∏–ø—É —Å—É—â–Ω–æ—Å—Ç–∏"""
        repo_name = entity_type.__name__.lower()
        
        if repo_name not in self.repositories:
            raise ValueError(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è {entity_type.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return self.repositories[repo_name]


# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
class PositionRepository(FileRepository[Position]):
    """üìä –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–∑–∏—Ü–∏–π"""
    
    def __init__(self, config: RepositoryConfig):
        super().__init__(Position, config, "positions.json")
    
    async def find_by_currency(self, currency: str) -> Optional[Position]:
        """üîç –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–µ"""
        positions = await self.find_by_criteria({"currency": currency})
        return positions[0] if positions else None
    
    async def find_active_positions(self) -> List[Position]:
        """üìà –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return await self.find_by_criteria({"quantity": {"$gt": 0}})


class TradeRepository(FileRepository[TradeResult]):
    """üìà –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self, config: RepositoryConfig):
        super().__init__(TradeResult, config, "trades.json")
    
    async def find_by_date_range(self, start_date: datetime, end_date: datetime) -> List[TradeResult]:
        """üìÖ –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç"""
        all_trades = await self.find_all()
        
        result = []
        for trade in all_trades:
            if hasattr(trade, 'timestamp'):
                trade_date = trade.timestamp
                if isinstance(trade_date, str):
                    trade_date = datetime.fromisoformat(trade_date.replace('Z', '+00:00'))
                
                if start_date <= trade_date <= end_date:
                    result.append(trade)
        
        return result
    
    async def find_by_pair(self, pair: str) -> List[TradeResult]:
        """üí± –ü–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
        return await self.find_by_criteria({"pair": pair})
    
    async def find_successful_trades(self) -> List[TradeResult]:
        """‚úÖ –ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return await self.find_by_criteria({"success": True})


class CSVExporter:
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
    
    @staticmethod
    async def export_trades(trades: List[TradeResult], file_path: str) -> None:
        """üìà –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ –≤ CSV"""
        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['trade_id', 'pair', 'action', 'quantity', 'price', 'timestamp', 'success', 'profit']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for trade in trades:
                    writer.writerow({
                        'trade_id': getattr(trade, 'trade_id', ''),
                        'pair': getattr(trade, 'pair', ''),
                        'action': getattr(trade, 'action', ''),
                        'quantity': getattr(trade, 'quantity', ''),
                        'price': getattr(trade, 'price', ''),
                        'timestamp': getattr(trade, 'timestamp', ''),
                        'success': getattr(trade, 'success', ''),
                        'profit': getattr(trade, 'profit', '')
                    })
                    
        except Exception as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            raise PersistenceError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV: {e}")
    
    @staticmethod
    async def export_positions(positions: List[Position], file_path: str) -> None:
        """üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–π –≤ CSV"""
        try:
            with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['position_id', 'currency', 'quantity', 'avg_price', 'total_cost', 'created_at']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for position in positions:
                    writer.writerow({
                        'position_id': getattr(position, 'position_id', ''),
                        'currency': getattr(position, 'currency', ''),
                        'quantity': getattr(position, 'quantity', ''),
                        'avg_price': getattr(position, 'avg_price', ''),
                        'total_cost': getattr(position, 'total_cost', ''),
                        'created_at': getattr(position, 'created_at', '')
                    })
                    
        except Exception as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –≤ CSV: {e}")
            raise PersistenceError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ CSV: {e}")


# –§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
class RepositoryFactory:
    """üè≠ –§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    
    @staticmethod
    def create_repository(
        entity_type: Type[T],
        config: RepositoryConfig,
        storage_type: Optional[str] = None
    ) -> IRepository[T]:
        """üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        storage = storage_type or config.storage_type
        
        if storage == "json":
            return FileRepository(entity_type, config)
        elif storage == "sqlite":
            return SQLiteRepository(entity_type, config)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage}")
    
    @staticmethod
    def create_position_repository(config: RepositoryConfig) -> PositionRepository:
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        return PositionRepository(config)
    
    @staticmethod
    def create_trade_repository(config: RepositoryConfig) -> TradeRepository:
        """üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"""
        return TradeRepository(config)
    
    @staticmethod
    def create_unit_of_work(
        config: RepositoryConfig,
        entity_types: List[Type] = None
    ) -> UnitOfWork:
        """üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Unit of Work"""
        entity_types = entity_types or [Position, TradeResult]
        
        repositories = {}
        for entity_type in entity_types:
            repo_name = entity_type.__name__.lower()
            repositories[repo_name] = RepositoryFactory.create_repository(entity_type, config)
        
        return UnitOfWork(repositories)
