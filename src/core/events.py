from typing import Dict, Any, List, Callable, Optional, Type, Set, AsyncIterator
from dataclasses import dataclass, field
from datetime import datetime
from abc import ABC, abstractmethod
from enum import Enum
import asyncio
import uuid
import weakref
import logging

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Å TYPE_CHECKING –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .models import EventType


# ================= –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ =================

class EventPriority(Enum):
    """üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4


# ================= –ë–ê–ó–û–í–´–ï –°–û–ë–´–¢–ò–Ø =================

@dataclass
class DomainEvent:
    """üì° –ë–∞–∑–æ–≤–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
    event_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    event_type: str = "unknown"
    timestamp: datetime = field(default_factory=datetime.now)
    source: str = ""
    correlation_id: Optional[str] = None
    causation_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'event_id': self.event_id,
            'event_type': self.event_type,
            'timestamp': self.timestamp.isoformat(),
            'source': self.source,
            'correlation_id': self.correlation_id,
            'causation_id': self.causation_id,
            'metadata': self.metadata
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'DomainEvent':
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        data['timestamp'] = datetime.fromisoformat(data['timestamp'])
        return cls(**data)


# ================= –¢–ò–ü–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =================

EventHandler = Callable[[DomainEvent], None]
AsyncEventHandler = Callable[[DomainEvent], asyncio.Task]


# ================= –ò–ù–¢–ï–†–§–ï–ô–°–´ =================

class IEventBus(ABC):
    """üì° –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""

    @abstractmethod
    async def publish(self, event: DomainEvent) -> None:
        """üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        pass

    @abstractmethod
    async def subscribe(
        self,
        event_type: str,
        handler: EventHandler,
        priority: EventPriority = EventPriority.NORMAL,
        filter_func: Optional[Callable[[DomainEvent], bool]] = None
    ) -> str:
        """üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
        pass

    @abstractmethod
    async def unsubscribe(self, subscription_id: str) -> bool:
        """üì§ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π"""
        pass

    @abstractmethod
    async def clear_subscriptions(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        pass


class IEventStore(ABC):
    """üóÑÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–±—ã—Ç–∏–π"""

    @abstractmethod
    async def save_event(self, event: DomainEvent) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        pass

    @abstractmethod
    async def get_events(
        self,
        from_timestamp: Optional[datetime] = None,
        to_timestamp: Optional[datetime] = None,
        event_types: Optional[List[str]] = None
    ) -> List[DomainEvent]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        pass

    @abstractmethod
    async def get_events_for_aggregate(self, aggregate_id: str) -> List[DomainEvent]:
        """üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞"""
        pass


# ================= –ü–û–î–ü–ò–°–ö–ò =================

@dataclass
class EventSubscription:
    """üìã –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    event_type: str = ""
    handler: Optional[EventHandler] = None
    async_handler: Optional[AsyncEventHandler] = None
    filter_func: Optional[Callable[[DomainEvent], bool]] = None
    priority: EventPriority = EventPriority.NORMAL
    is_active: bool = True
    created_at: datetime = field(default_factory=datetime.now)
    last_triggered: Optional[datetime] = None
    trigger_count: int = 0
    max_triggers: Optional[int] = None

    @property
    def is_expired(self) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        return (self.max_triggers is not None and
                self.trigger_count >= self.max_triggers)

    async def handle_event(self, event: DomainEvent) -> bool:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        if not self.is_active or self.is_expired:
            return False

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.filter_func and not self.filter_func(event):
            return False

        try:
            if self.async_handler:
                await self.async_handler(event)
            elif self.handler:
                self.handler(event)
            else:
                return False

            self.last_triggered = datetime.now()
            self.trigger_count += 1
            return True

        except Exception as e:
            logging.error(f"Error in event handler {self.id}: {e}")
            return False


# ================= EVENT BUS –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø =================

class EventBus(IEventBus):
    """üì° –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, enable_persistence: bool = True, max_queue_size: int = 1000):
        self._subscriptions: Dict[str, List[EventSubscription]] = {}
        self._subscription_index: Dict[str, EventSubscription] = {}
        self._event_queue: asyncio.Queue = asyncio.Queue(maxsize=max_queue_size)
        self._processing_task: Optional[asyncio.Task] = None
        self._event_store: Optional[IEventStore] = None
        self._enable_persistence = enable_persistence
        self._is_running = False
        self._logger = logging.getLogger(__name__)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._published_events = 0
        self._processed_events = 0
        self._failed_events = 0

    async def start(self) -> None:
        """üöÄ –ó–∞–ø—É—Å–∫ —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""
        if self._is_running:
            return

        self._is_running = True
        self._processing_task = asyncio.create_task(self._process_events())
        self._logger.info("üì° Event bus started")

    async def stop(self) -> None:
        """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""
        if not self._is_running:
            return

        self._is_running = False

        if self._processing_task:
            self._processing_task.cancel()
            try:
                await self._processing_task
            except asyncio.CancelledError:
                pass

        self._logger.info("üì° Event bus stopped")

    def set_event_store(self, event_store: IEventStore) -> None:
        """üóÑÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–±—ã—Ç–∏–π"""
        self._event_store = event_store

    async def publish(self, event: DomainEvent) -> None:
        """üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if not self._is_running:
            await self.start()

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._event_queue.put(event)
            self._published_events += 1

            self._logger.debug(f"üì§ Published event: {event.event_type} ({event.event_id})")

        except asyncio.QueueFull:
            self._failed_events += 1
            self._logger.error(f"‚ùå Event queue full, dropping event: {event.event_type}")

    async def subscribe(
        self,
        event_type: str,
        handler: EventHandler,
        priority: EventPriority = EventPriority.NORMAL,
        filter_func: Optional[Callable[[DomainEvent], bool]] = None,
        max_triggers: Optional[int] = None
    ) -> str:
        """üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        async_handler = handler if asyncio.iscoroutinefunction(handler) else None
        sync_handler = handler if not asyncio.iscoroutinefunction(handler) else None

        subscription = EventSubscription(
            event_type=event_type,
            handler=sync_handler,
            async_handler=async_handler,
            filter_func=filter_func,
            priority=priority,
            max_triggers=max_triggers
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å
        self._subscription_index[subscription.id] = subscription

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event_type not in self._subscriptions:
            self._subscriptions[event_type] = []

        self._subscriptions[event_type].append(subscription)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º)
        self._subscriptions[event_type].sort(
            key=lambda s: s.priority.value, reverse=True
        )

        self._logger.debug(f"üì• Subscribed to {event_type}: {subscription.id}")

        return subscription.id

    async def unsubscribe(self, subscription_id: str) -> bool:
        """üì§ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π"""
        if subscription_id not in self._subscription_index:
            return False

        subscription = self._subscription_index[subscription_id]
        event_type = subscription.event_type

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        if event_type in self._subscriptions:
            self._subscriptions[event_type] = [
                s for s in self._subscriptions[event_type]
                if s.id != subscription_id
            ]

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
        del self._subscription_index[subscription_id]

        self._logger.debug(f"üì§ Unsubscribed from {event_type}: {subscription_id}")

        return True

    async def clear_subscriptions(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        self._subscriptions.clear()
        self._subscription_index.clear()
        self._logger.info("üßπ All subscriptions cleared")

    async def _process_events(self) -> None:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        while self._is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                event = await asyncio.wait_for(self._event_queue.get(), timeout=1.0)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if self._enable_persistence and self._event_store:
                    await self._event_store.save_event(event)

                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                subscriptions = self._subscriptions.get(event.event_type, [])

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
                for subscription in subscriptions:
                    try:
                        await subscription.handle_event(event)
                    except Exception as e:
                        self._failed_events += 1
                        self._logger.error(f"‚ùå Handler error for {event.event_type}: {e}")

                self._processed_events += 1

            except asyncio.TimeoutError:
                continue  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π timeout –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞ _is_running
            except Exception as e:
                self._failed_events += 1
                self._logger.error(f"‚ùå Error processing event: {e}")

    def get_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""
        return {
            'is_running': self._is_running,
            'published_events': self._published_events,
            'processed_events': self._processed_events,
            'failed_events': self._failed_events,
            'queue_size': self._event_queue.qsize(),
            'subscriptions_count': len(self._subscription_index),
            'subscription_types': list(self._subscriptions.keys())
        }


# ================= EVENT STORE –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø =================

class MemoryEventStore(IEventStore):
    """üß† In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, max_events: int = 10000):
        self._events: List[DomainEvent] = []
        self._max_events = max_events
        self._lock = asyncio.Lock()

    async def save_event(self, event: DomainEvent) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        async with self._lock:
            self._events.append(event)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if len(self._events) > self._max_events:
                self._events = self._events[-self._max_events:]

    async def get_events(
        self,
        from_timestamp: Optional[datetime] = None,
        to_timestamp: Optional[datetime] = None,
        event_types: Optional[List[str]] = None
    ) -> List[DomainEvent]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        async with self._lock:
            filtered_events = self._events.copy()

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if from_timestamp:
                filtered_events = [e for e in filtered_events if e.timestamp >= from_timestamp]

            if to_timestamp:
                filtered_events = [e for e in filtered_events if e.timestamp <= to_timestamp]

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
            if event_types:
                filtered_events = [e for e in filtered_events if e.event_type in event_types]

            return filtered_events

    async def get_events_for_aggregate(self, aggregate_id: str) -> List[DomainEvent]:
        """üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–∞"""
        async with self._lock:
            return [
                event for event in self._events
                if event.correlation_id == aggregate_id
            ]


# ================= –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø =================

@dataclass
class TradeExecutedEvent(DomainEvent):
    """üìà –°–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    order_id: str = ""
    pair: str = ""
    order_type: str = ""
    quantity: str = ""
    price: str = ""
    total_cost: str = ""
    commission: str = ""
    success: bool = False

    def __post_init__(self):
        self.event_type = "trade_executed"
        if not self.source:
            self.source = "trading_service"


@dataclass
class PositionChangedEvent(DomainEvent):
    """üìä –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    currency: str = ""
    old_quantity: str = ""
    new_quantity: str = ""
    avg_price: str = ""
    change_reason: str = ""

    def __post_init__(self):
        self.event_type = "position_updated"
        if not self.source:
            self.source = "position_service"


@dataclass
class SignalGeneratedEvent(DomainEvent):
    """üéØ –°–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    signal_id: str = ""
    signal_type: str = ""
    strategy_name: str = ""
    pair: str = ""
    confidence: float = 0.0
    reason: str = ""

    def __post_init__(self):
        self.event_type = "signal_generated"
        if not self.source:
            self.source = "strategy_service"


@dataclass
class RiskAlertEvent(DomainEvent):
    """üö® –°–æ–±—ã—Ç–∏–µ —Ä–∏—Å–∫-–∞–ª–µ—Ä—Ç–∞"""
    risk_type: str = ""
    severity: str = ""
    current_value: str = ""
    threshold_value: str = ""
    affected_positions: List[str] = field(default_factory=list)
    action_required: bool = False

    def __post_init__(self):
        self.event_type = "risk_limit_exceeded"
        if not self.source:
            self.source = "risk_service"


# ================= EVENT DISPATCHER =================

class EventDispatcher:
    """üì° –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, event_bus: IEventBus):
        self.event_bus = event_bus
        self._logger = logging.getLogger(__name__)

    async def dispatch_trade_executed(
        self,
        order_id: str,
        pair: str,
        order_type: str,
        quantity: str,
        price: str,
        total_cost: str,
        commission: str = "0",
        success: bool = True
    ) -> None:
        """üìà –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        event = TradeExecutedEvent(
            order_id=order_id,
            pair=pair,
            order_type=order_type,
            quantity=quantity,
            price=price,
            total_cost=total_cost,
            commission=commission,
            success=success
        )

        await self.event_bus.publish(event)

    async def dispatch_position_changed(
        self,
        currency: str,
        old_quantity: str,
        new_quantity: str,
        avg_price: str,
        change_reason: str
    ) -> None:
        """üìä –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        event = PositionChangedEvent(
            currency=currency,
            old_quantity=old_quantity,
            new_quantity=new_quantity,
            avg_price=avg_price,
            change_reason=change_reason
        )

        await self.event_bus.publish(event)

    async def dispatch_signal_generated(
        self,
        signal_id: str,
        signal_type: str,
        strategy_name: str,
        pair: str,
        confidence: float,
        reason: str
    ) -> None:
        """üéØ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        event = SignalGeneratedEvent(
            signal_id=signal_id,
            signal_type=signal_type,
            strategy_name=strategy_name,
            pair=pair,
            confidence=confidence,
            reason=reason
        )

        await self.event_bus.publish(event)

    async def dispatch_risk_alert(
        self,
        risk_type: str,
        severity: str,
        current_value: str,
        threshold_value: str,
        affected_positions: List[str] = None,
        action_required: bool = False
    ) -> None:
        """üö® –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–∞–ª–µ—Ä—Ç–∞"""
        event = RiskAlertEvent(
            risk_type=risk_type,
            severity=severity,
            current_value=current_value,
            threshold_value=threshold_value,
            affected_positions=affected_positions or [],
            action_required=action_required
        )

        await self.event_bus.publish(event)


# ================= –î–ï–ö–û–†–ê–¢–û–†–´ =================

def event_handler(event_type: str, priority: EventPriority = EventPriority.NORMAL):
    """üéØ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    def decorator(func):
        func._event_type = event_type
        func._event_priority = priority
        func._is_event_handler = True
        return func
    return decorator


# ================= –£–¢–ò–õ–ò–¢–´ =================

class EventBusFactory:
    """üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Event Bus"""

    @staticmethod
    def create_default() -> EventBus:
        """üè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""
        event_bus = EventBus(enable_persistence=True)
        event_store = MemoryEventStore()
        event_bus.set_event_store(event_store)
        return event_bus

    @staticmethod
    def create_high_performance() -> EventBus:
        """‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π —à–∏–Ω—ã"""
        return EventBus(enable_persistence=False, max_queue_size=5000)

    @staticmethod
    def create_persistent() -> EventBus:
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ —à–∏–Ω—ã —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é"""
        event_bus = EventBus(enable_persistence=True, max_queue_size=2000)
        event_store = MemoryEventStore(max_events=50000)
        event_bus.set_event_store(event_store)
        return event_bus


# ================= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ =================

_global_event_bus: Optional[EventBus] = None


async def get_global_event_bus() -> EventBus:
    """üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""
    global _global_event_bus
    if _global_event_bus is None:
        _global_event_bus = EventBusFactory.create_default()
        await _global_event_bus.start()
    return _global_event_bus


async def publish_event(event: DomainEvent) -> None:
    """üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —à–∏–Ω—É"""
    event_bus = await get_global_event_bus()
    await event_bus.publish(event)


async def subscribe_to_events(
    event_type: str,
    handler: EventHandler,
    **kwargs
) -> str:
    """üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —à–∏–Ω—É"""
    event_bus = await get_global_event_bus()
    return await event_bus.subscribe(event_type, handler, **kwargs)
