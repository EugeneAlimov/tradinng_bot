#!/usr/bin/env python3
"""üéØ –ê–¥–∞–ø—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

from typing import Any, Dict, List, Optional
from datetime import datetime

from .base_adapter import BaseAdapter


class StrategyAdapter(BaseAdapter):
    """üéØ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self):
        super().__init__("StrategyAdapter")
        self.legacy_strategies: List[Any] = []
        self.strategy_instances: Dict[str, Any] = {}
        self.active_strategy: Optional[str] = None
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            self.logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await self._load_legacy_strategies()
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            await self._create_basic_strategies()
            
            self.is_initialized = True
            self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return False
    
    async def _load_legacy_strategies(self) -> None:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            strategy_modules = [
                'adaptive_dca_strategy',
                'pyramid_strategy', 
                'trailing_stop'
            ]
            
            for module_name in strategy_modules:
                try:
                    module = __import__(module_name)
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if (isinstance(attr, type) and 
                            'strategy' in attr_name.lower() and 
                            not attr_name.startswith('_')):
                            
                            self.legacy_strategies.append({
                                'name': attr_name,
                                'class': attr,
                                'module': module_name,
                                'type': 'legacy'
                            })
                            
                            self.logger.debug(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {attr_name}")
                
                except ImportError:
                    self.logger.debug(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.legacy_strategies)} legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    
    async def _create_basic_strategies(self) -> None:
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            basic_strategies = {
                'hold_strategy': self._create_hold_strategy(),
                'random_strategy': self._create_random_strategy(),
                'trend_strategy': self._create_trend_strategy()
            }
            
            self.strategy_instances.update(basic_strategies)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(basic_strategies)} –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    
    def _create_hold_strategy(self) -> Dict[str, Any]:
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ HOLD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'name': 'hold_strategy',
            'type': 'basic',
            'analyze': lambda data: {
                'action': 'hold',
                'confidence': 1.0,
                'reason': 'HOLD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é'
            }
        }
    
    def _create_random_strategy(self) -> Dict[str, Any]:
        """üé≤ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        def random_analyze(data):
            import random
            actions = ['hold', 'buy', 'sell']
            action = random.choices(actions, weights=[70, 15, 15])[0]
            
            return {
                'action': action,
                'confidence': random.uniform(0.3, 0.8),
                'reason': f'–°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {action}'
            }
        
        return {
            'name': 'random_strategy',
            'type': 'basic',
            'analyze': random_analyze
        }
    
    def _create_trend_strategy(self) -> Dict[str, Any]:
        """üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        def trend_analyze(data):
            price = data.get('price', 0.18)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
            if price < 0.17:
                return {
                    'action': 'buy',
                    'confidence': 0.7,
                    'reason': '–¶–µ–Ω–∞ –Ω–∏–∂–µ 0.17 - —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏'
                }
            elif price > 0.19:
                return {
                    'action': 'sell',
                    'confidence': 0.7,
                    'reason': '–¶–µ–Ω–∞ –≤—ã—à–µ 0.19 - —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏'
                }
            else:
                return {
                    'action': 'hold',
                    'confidence': 0.5,
                    'reason': '–¶–µ–Ω–∞ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ'
                }
        
        return {
            'name': 'trend_strategy',
            'type': 'basic',
            'analyze': trend_analyze
        }
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            if not self.is_initialized:
                return {'success': False, 'error': '–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            market_data = await self._get_mock_market_data()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            results = {}
            
            # –ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            for name, strategy in self.strategy_instances.items():
                try:
                    if 'analyze' in strategy:
                        analysis = strategy['analyze'](market_data)
                        results[name] = {
                            'type': strategy['type'],
                            'analysis': analysis,
                            'timestamp': datetime.now().isoformat()
                        }
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {name}: {e}")
                    results[name] = {'error': str(e)}
            
            # –ê–Ω–∞–ª–∏–∑ legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            for strategy_info in self.legacy_strategies:
                try:
                    strategy_name = strategy_info['name']
                    strategy_class = strategy_info['class']
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                    instance = strategy_class()
                    if hasattr(instance, 'analyze'):
                        analysis = instance.analyze(market_data)
                        results[strategy_name] = {
                            'type': 'legacy',
                            'analysis': analysis,
                            'timestamp': datetime.now().isoformat()
                        }
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
                    results[strategy_name] = {'error': str(e)}
            
            return {
                'success': True,
                'timestamp': datetime.now().isoformat(),
                'market_data': market_data,
                'strategies_count': len(results),
                'results': results
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return {'success': False, 'error': str(e)}
    
    async def _get_mock_market_data(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        import random
        
        return {
            'price': 0.18 + random.uniform(-0.02, 0.02),
            'volume': random.randint(1000000, 5000000),
            'change_24h': random.uniform(-5, 5),
            'timestamp': datetime.now().isoformat()
        }
    
    def set_active_strategy(self, strategy_name: str) -> bool:
        """üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_name in self.strategy_instances:
                self.active_strategy = strategy_name
                self.logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False
    
    def get_available_strategies(self) -> List[Dict[str, Any]]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategies = []
        
        # –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for name, strategy in self.strategy_instances.items():
            strategies.append({
                'name': name,
                'type': strategy['type'],
                'active': name == self.active_strategy
            })
        
        # Legacy —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for strategy_info in self.legacy_strategies:
            strategies.append({
                'name': strategy_info['name'],
                'type': 'legacy',
                'module': strategy_info['module'],
                'active': False
            })
        
        return strategies
    
    async def cleanup(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        
        self.legacy_strategies.clear()
        self.strategy_instances.clear()
        self.active_strategy = None
        self.is_initialized = False
        
        self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—á–∏—â–µ–Ω")
