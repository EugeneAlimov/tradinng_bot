#!/usr/bin/env python3
"""üéõÔ∏è –ê–¥–∞–ø—Ç–µ—Ä —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã"""

import asyncio
from typing import Dict, Any, Optional
from datetime import datetime
from pathlib import Path

from .main_adapter import MainAdapter, AdapterMode


class ModeAdapter:
    """üéõÔ∏è –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.main_adapter: Optional[MainAdapter] = None
        self.current_mode: Optional[AdapterMode] = None
        self.mode_history: list = []
        self.logger = __import__('logging').getLogger(f"{__name__}.ModeAdapter")
    
    async def initialize_mode(self, mode_name: str) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ä–µ–∂–∏–º
            mode = self._parse_mode(mode_name)
            if not mode:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode_name}")
                return False
            
            self.logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞: {mode.value}")
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
            self.main_adapter = MainAdapter(mode)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            if await self.main_adapter.initialize():
                self.current_mode = mode
                self._add_to_history(mode, "initialized")
                self.logger.info(f"‚úÖ –†–µ–∂–∏–º {mode.value} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º {mode.value}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ {mode_name}: {e}")
            return False
    
    def _parse_mode(self, mode_name: str) -> Optional[AdapterMode]:
        """üîç –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        mode_mapping = {
            'safe': AdapterMode.SAFE,
            'paper': AdapterMode.SAFE,  # –ê–ª–∏–∞—Å
            'legacy': AdapterMode.LEGACY,
            'old': AdapterMode.LEGACY,  # –ê–ª–∏–∞—Å
            'hybrid': AdapterMode.HYBRID,
            'mixed': AdapterMode.HYBRID,  # –ê–ª–∏–∞—Å
            'new': AdapterMode.NEW,
            'modern': AdapterMode.NEW  # –ê–ª–∏–∞—Å
        }
        
        return mode_mapping.get(mode_name.lower())
    
    async def switch_mode(self, new_mode_name: str) -> bool:
        """üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞"""
        try:
            new_mode = self._parse_mode(new_mode_name)
            if not new_mode:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {new_mode_name}")
                return False
            
            if not self.main_adapter:
                self.logger.warning("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                return await self.initialize_mode(new_mode_name)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            if await self.main_adapter.switch_mode(new_mode):
                old_mode = self.current_mode
                self.current_mode = new_mode
                self._add_to_history(new_mode, f"switched_from_{old_mode.value if old_mode else 'none'}")
                self.logger.info(f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ {new_mode.value}")
                return True
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ {new_mode.value}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            if not self.main_adapter:
                return {
                    'success': False,
                    'error': '–ì–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                    'timestamp': datetime.now().isoformat()
                }
            
            result = await self.main_adapter.execute_cycle()
            result['mode_adapter'] = {
                'current_mode': self.current_mode.value if self.current_mode else None,
                'history_count': len(self.mode_history)
            }
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def _add_to_history(self, mode: AdapterMode, action: str) -> None:
        """üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∂–∏–º–æ–≤"""
        self.mode_history.append({
            'mode': mode.value,
            'action': action,
            'timestamp': datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if len(self.mode_history) > 100:
            self.mode_history = self.mode_history[-100:]
    
    def get_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤"""
        status = {
            'current_mode': self.current_mode.value if self.current_mode else None,
            'main_adapter_initialized': self.main_adapter is not None,
            'history_count': len(self.mode_history),
            'available_modes': [mode.value for mode in AdapterMode]
        }
        
        if self.main_adapter:
            status['main_adapter_status'] = self.main_adapter.get_status()
        
        return status
    
    def get_mode_history(self) -> list:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∂–∏–º–æ–≤"""
        return self.mode_history.copy()
    
    async def cleanup(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤...")
        
        if self.main_adapter:
            await self.main_adapter.cleanup()
            self.main_adapter = None
        
        self.current_mode = None
        self.mode_history.clear()
        
        self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def validate_mode(self, mode_name: str) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        return self._parse_mode(mode_name) is not None
    
    def get_available_modes(self) -> list:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        return [
            {
                'name': mode.value,
                'aliases': self._get_mode_aliases(mode),
                'description': self._get_mode_description(mode),
                'current': mode == self.current_mode
            }
            for mode in AdapterMode
        ]
    
    def _get_mode_aliases(self, mode: AdapterMode) -> list:
        """üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤ —Ä–µ–∂–∏–º–∞"""
        aliases_map = {
            AdapterMode.SAFE: ['paper'],
            AdapterMode.LEGACY: ['old'],
            AdapterMode.HYBRID: ['mixed'],
            AdapterMode.NEW: ['modern']
        }
        return aliases_map.get(mode, [])
    
    def _get_mode_description(self, mode: AdapterMode) -> str:
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞"""
        descriptions = {
            AdapterMode.SAFE: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏",
            AdapterMode.LEGACY: "–†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º",
            AdapterMode.HYBRID: "–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º —Å –Ω–æ–≤–æ–π –∏ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π",
            AdapterMode.NEW: "–ù–æ–≤—ã–π —Ä–µ–∂–∏–º —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"
        }
        return descriptions.get(mode, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
