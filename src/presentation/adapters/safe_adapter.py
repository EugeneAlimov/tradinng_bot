import asyncio
from typing import Any, Dict, Optional
from decimal import Decimal
from datetime import datetime

from .base_adapter import BaseAdapter, AdapterInitializationError


class SafeAdapter(BaseAdapter):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è paper trading –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        super().__init__("SafeAdapter")
        self.mock_balance = {
            'EUR': Decimal('1000.00'),
            'DOGE': Decimal('5000.00')
        }
        self.mock_price = Decimal('0.18000')
        self.orders_history = []
        self.cycle_count = 0
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            self.logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.logger.info("üìä –†–µ–∂–∏–º paper trading –∞–∫—Ç–∏–≤–µ–Ω")
            self.logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: EUR={self.mock_balance['EUR']}, DOGE={self.mock_balance['DOGE']}")
            
            self.is_initialized = True
            self.logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise AdapterInitializationError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SafeAdapter: {e}")
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            if not self.is_initialized:
                raise AdapterInitializationError("–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.cycle_count += 1
            self.logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ #{self.cycle_count}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self._get_mock_market_data()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_result = await self._mock_analysis(market_data)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            trading_decision = await self._make_mock_decision(analysis_result)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            execution_result = await self._execute_mock_order(trading_decision)
            
            result = {
                'success': True,
                'cycle': self.cycle_count,
                'timestamp': datetime.now().isoformat(),
                'market_data': market_data,
                'analysis': analysis_result,
                'decision': trading_decision,
                'execution': execution_result,
                'balance': {k: float(v) for k, v in self.mock_balance.items()},
                'orders_count': len(self.orders_history)
            }
            
            self.logger.info(f"‚úÖ –¶–∏–∫–ª #{self.cycle_count} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'cycle': self.cycle_count,
                'timestamp': datetime.now().isoformat()
            }
    
    async def _get_mock_market_data(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω—ã
        import random
        price_change = Decimal(str(random.uniform(-0.001, 0.001)))
        self.mock_price += self.mock_price * price_change
        
        # –ù–µ –¥–∞–µ–º —Ü–µ–Ω–µ —Å—Ç–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        if self.mock_price <= 0:
            self.mock_price = Decimal('0.01')
        
        return {
            'pair': 'DOGE_EUR',
            'price': float(self.mock_price),
            'volume_24h': random.randint(1000000, 5000000),
            'change_24h': float(price_change * 100),  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            'timestamp': datetime.now().isoformat()
        }
    
    async def _mock_analysis(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üß† –ú–æ–∫ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        current_price = market_data['price']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        import random
        actions = ['hold', 'buy', 'sell']
        action = random.choices(actions, weights=[70, 15, 15])[0]  # 70% hold
        confidence = random.uniform(0.3, 0.9)
        
        reasons = {
            'hold': '–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞',
            'buy': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞',
            'sell': '–§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏'
        }
        
        return {
            'action': action,
            'confidence': confidence,
            'reason': reasons[action],
            'analysis_time': datetime.now().isoformat(),
            'indicators': {
                'rsi': random.uniform(20, 80),
                'ma_signal': random.choice(['bullish', 'bearish', 'neutral'])
            }
        }
    
    async def _make_mock_decision(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ –º–æ–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        action = analysis['action']
        confidence = analysis['confidence']
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if action != 'hold' and confidence > 0.7:
            amount = 100  # EUR –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOGE –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            
            return {
                'should_trade': True,
                'action': action,
                'amount': amount,
                'price': float(self.mock_price),
                'confidence': confidence,
                'timestamp': datetime.now().isoformat()
            }
        
        return {
            'should_trade': False,
            'reason': f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.2f}) –∏–ª–∏ hold —Å–∏–≥–Ω–∞–ª",
            'timestamp': datetime.now().isoformat()
        }
    
    async def _execute_mock_order(self, decision: Dict[str, Any]) -> Dict[str, Any]:
        """üíº –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∫ –æ—Ä–¥–µ—Ä–∞"""
        if not decision.get('should_trade', False):
            return {'executed': False, 'reason': '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è'}
        
        try:
            action = decision['action']
            amount = decision['amount']
            price = Decimal(str(decision['price']))
            
            order_id = f"mock_order_{len(self.orders_history) + 1}"
            
            if action == 'buy':
                # –ü–æ–∫—É–ø–∞–µ–º DOGE –∑–∞ EUR
                cost = Decimal(str(amount))
                if self.mock_balance['EUR'] >= cost:
                    doge_amount = cost / price
                    self.mock_balance['EUR'] -= cost
                    self.mock_balance['DOGE'] += doge_amount
                    
                    order = {
                        'id': order_id,
                        'action': 'buy',
                        'amount_eur': float(cost),
                        'amount_doge': float(doge_amount),
                        'price': float(price),
                        'timestamp': datetime.now().isoformat(),
                        'status': 'filled'
                    }
                    
                    self.orders_history.append(order)
                    self.logger.info(f"üí∞ –ü–æ–∫—É–ø–∫–∞: {doge_amount:.2f} DOGE –∑–∞ {cost} EUR –ø–æ —Ü–µ–Ω–µ {price}")
                    
                    return {'executed': True, 'order': order}
                else:
                    return {'executed': False, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EUR –¥–ª—è –ø–æ–∫—É–ø–∫–∏'}
            
            elif action == 'sell':
                # –ü—Ä–æ–¥–∞–µ–º DOGE –∑–∞ EUR
                doge_amount = Decimal(str(amount))
                if self.mock_balance['DOGE'] >= doge_amount:
                    eur_amount = doge_amount * price
                    self.mock_balance['DOGE'] -= doge_amount
                    self.mock_balance['EUR'] += eur_amount
                    
                    order = {
                        'id': order_id,
                        'action': 'sell',
                        'amount_doge': float(doge_amount),
                        'amount_eur': float(eur_amount),
                        'price': float(price),
                        'timestamp': datetime.now().isoformat(),
                        'status': 'filled'
                    }
                    
                    self.orders_history.append(order)
                    self.logger.info(f"üí∞ –ü—Ä–æ–¥–∞–∂–∞: {doge_amount} DOGE –∑–∞ {eur_amount:.2f} EUR –ø–æ —Ü–µ–Ω–µ {price}")
                    
                    return {'executed': True, 'order': order}
                else:
                    return {'executed': False, 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DOGE –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'}
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∫ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'executed': False, 'error': str(e)}
    
    async def cleanup(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ SafeAdapter...")
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_orders = len(self.orders_history)
        buy_orders = len([o for o in self.orders_history if o['action'] == 'buy'])
        sell_orders = len([o for o in self.orders_history if o['action'] == 'sell'])
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_orders} –æ—Ä–¥–µ—Ä–æ–≤ ({buy_orders} –ø–æ–∫—É–ø–æ–∫, {sell_orders} –ø—Ä–æ–¥–∞–∂)")
        self.logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: EUR={self.mock_balance['EUR']}, DOGE={self.mock_balance['DOGE']}")
        
        self.is_initialized = False
    
    def get_trading_history(self) -> List[Dict[str, Any]]:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤"""
        return self.orders_history.copy()
    
    def get_balance(self) -> Dict[str, float]:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        return {k: float(v) for k, v in self.mock_balance.items()}
