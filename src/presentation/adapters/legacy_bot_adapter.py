#!/usr/bin/env python3
"""ü§ñ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

import sys
import asyncio
from typing import Any, Dict, Optional, List
from pathlib import Path
from datetime import datetime

from .base_adapter import BaseAdapter, AdapterInitializationError, AdapterExecutionError


class LegacyBotAdapter(BaseAdapter):
    """ü§ñ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self, use_hybrid: bool = True):
        super().__init__("LegacyBotAdapter")
        self.use_hybrid = use_hybrid
        self.legacy_bot: Optional[Any] = None
        self.legacy_modules: Dict[str, Any] = {}
        self.legacy_config: Dict[str, Any] = {}
        self.is_running = False
        
        self.logger.info(f"ü§ñ Legacy –∞–¥–∞–ø—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω (hybrid={use_hybrid})")
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Legacy –∞–¥–∞–ø—Ç–µ—Ä–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–æ—Ç
            self.legacy_bot = await self._load_legacy_bot()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.legacy_config = await self._load_legacy_config()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await self._load_legacy_strategies()
            
            if self.legacy_bot or self.use_hybrid:
                self.is_initialized = True
                self.logger.info("‚úÖ Legacy –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                raise AdapterInitializationError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Legacy –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
            return False
    
    async def _load_legacy_bot(self) -> Optional[Any]:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            self.logger.info("üì• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞...")
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º
            bot_modules = [
                ('improved_bot', 'ImprovedTradingBot'),
                ('bot', 'ImprovedTradingBot'),
                ('bot', 'TradingBot'),
                ('main', 'TradingBot'),
            ]
            
            for module_name, class_name in bot_modules:
                try:
                    self.logger.debug(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å {class_name} –∏–∑ {module_name}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                    module = __import__(module_name)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å
                    if hasattr(module, class_name):
                        bot_class = getattr(module, class_name)
                        
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                        bot_instance = bot_class()
                        
                        self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {class_name} –∏–∑ {module_name}")
                        return bot_instance
                    
                except ImportError as e:
                    self.logger.debug(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                    continue
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {class_name}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self.logger.warning("‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
            return self._create_bot_stub()
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
            return None
    
    def _create_bot_stub(self) -> Any:
        """üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –±–æ—Ç–∞"""
        class BotStub:
            def __init__(self):
                self.name = "BotStub"
                self.is_running = False
            
            def run(self):
                print("üé≠ –ó–∞–ø—É—Å–∫ –∑–∞–≥–ª—É—à–∫–∏ –±–æ—Ç–∞")
                self.is_running = True
            
            def stop(self):
                print("üé≠ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–ª—É—à–∫–∏ –±–æ—Ç–∞")
                self.is_running = False
            
            def get_balance(self):
                return {'EUR': 1000.0, 'DOGE': 5000.0}
            
            def get_current_price(self):
                return 0.18
            
            def execute_strategy(self):
                return {'action': 'hold', 'reason': '–ó–∞–≥–ª—É—à–∫–∞ –±–æ—Ç–∞'}
        
        return BotStub()
    
    async def _load_legacy_config(self) -> Dict[str, Any]:
        """‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            config_modules = ['config', 'settings', 'bot_config']
            legacy_config = {}
            
            for module_name in config_modules:
                try:
                    module = __import__(module_name)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å _
                    for attr_name in dir(module):
                        if not attr_name.startswith('_'):
                            attr_value = getattr(module, attr_name)
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
                            if not callable(attr_value) and not isinstance(attr_value, type):
                                legacy_config[attr_name] = attr_value
                    
                    self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ {module_name}")
                    break
                    
                except ImportError:
                    self.logger.debug(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_config = {
                'api_key': 'test_key',
                'api_secret': 'test_secret',
                'trading_pair': 'DOGE_EUR',
                'position_size': 100,
                'dca_enabled': True,
                'stop_loss_percent': 15.0
            }
            
            for key, value in default_config.items():
                if key not in legacy_config:
                    legacy_config[key] = value
            
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(legacy_config)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return legacy_config
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def _load_legacy_strategies(self) -> List[Any]:
        """üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            self.logger.info("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
            
            strategies = []
            strategy_modules = [
                'adaptive_dca_strategy',
                'pyramid_strategy',
                'trailing_stop',
                'strategies'
            ]
            
            for module_name in strategy_modules:
                try:
                    module = __import__(module_name)
                    self.legacy_modules[module_name] = module
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if (isinstance(attr, type) and 
                            'strategy' in attr_name.lower() and
                            not attr_name.startswith('_')):
                            strategies.append({
                                'name': attr_name,
                                'class': attr,
                                'module': module_name
                            })
                            self.logger.debug(f"üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {attr_name}")
                
                except ImportError:
                    self.logger.debug(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ {module_name}: {e}")
                    continue
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(strategies)} —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            return strategies
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return []
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not self.is_initialized:
                raise AdapterExecutionError("Legacy –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            self.logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ Legacy –±–æ—Ç–∞...")
            
            cycle_result = {
                'success': False,
                'timestamp': datetime.now().isoformat(),
                'legacy_bot_available': self.legacy_bot is not None,
                'hybrid_mode': self.use_hybrid
            }
            
            if self.legacy_bot:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
                legacy_result = await self._execute_legacy_cycle()
                cycle_result.update(legacy_result)
            else:
                # –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
                hybrid_result = await self._execute_hybrid_cycle()
                cycle_result.update(hybrid_result)
            
            cycle_result['success'] = True
            return cycle_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def _execute_legacy_cycle(self) -> Dict[str, Any]:
        """ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            result = {'legacy_execution': True}
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            if hasattr(self.legacy_bot, 'get_balance'):
                balance = await self.safe_execute(self.legacy_bot.get_balance)
                result['balance'] = balance
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if hasattr(self.legacy_bot, 'get_current_price'):
                price = await self.safe_execute(self.legacy_bot.get_current_price)
                result['current_price'] = price
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if hasattr(self.legacy_bot, 'execute_strategy'):
                strategy_result = await self.safe_execute(self.legacy_bot.execute_strategy)
                result['strategy_result'] = strategy_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DCA
            if hasattr(self.legacy_bot, 'check_dca'):
                dca_result = await self.safe_execute(self.legacy_bot.check_dca)
                result['dca_result'] = dca_result
            
            self.logger.info("‚úÖ Legacy —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ legacy —Ü–∏–∫–ª–∞: {e}")
            return {'legacy_execution': False, 'error': str(e)}
    
    async def _execute_hybrid_cycle(self) -> Dict[str, Any]:
        """üîÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            self.logger.info("üîÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result = {
                'hybrid_execution': True,
                'config_loaded': len(self.legacy_config) > 0,
                'strategies_loaded': len(self.legacy_modules) > 0
            }
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            adapted_config = self._adapt_legacy_config()
            result['adapted_config'] = adapted_config
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            execution_result = await self._simulate_execution(adapted_config)
            result.update(execution_result)
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return {'hybrid_execution': False, 'error': str(e)}
    
    def _adapt_legacy_config(self) -> Dict[str, Any]:
        """üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            adapted = {}
            
            # –ú–∞–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
            config_mapping = {
                'api_key': 'exmo_api_key',
                'api_secret': 'exmo_api_secret',
                'trading_pair': 'trading_pair',
                'position_size': 'position_size_percent',
                'dca_enabled': 'dca_enabled',
                'stop_loss_percent': 'stop_loss_percent'
            }
            
            for old_key, new_key in config_mapping.items():
                if old_key in self.legacy_config:
                    adapted[new_key] = self.legacy_config[old_key]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            defaults = {
                'trading_profile': 'balanced',
                'trading_mode': 'paper',
                'max_position_size_percent': 50.0,
                'take_profit_percent': 25.0
            }
            
            for key, value in defaults.items():
                if key not in adapted:
                    adapted[key] = value
            
            self.logger.debug(f"üîÑ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(adapted)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return adapted
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def _simulate_execution(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """üé≠ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
            import random
            
            result = {
                'market_data': {
                    'price': 0.18 + random.uniform(-0.01, 0.01),
                    'volume': random.randint(1000000, 5000000),
                    'timestamp': datetime.now().isoformat()
                },
                'analysis': {
                    'action': random.choice(['hold', 'buy', 'sell']),
                    'confidence': random.uniform(0.3, 0.9),
                    'reason': '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑'
                },
                'config_used': config
            }
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            return {'simulation_error': str(e)}
    
    async def cleanup(self) -> None:
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ Legacy –∞–¥–∞–ø—Ç–µ—Ä–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –±–æ—Ç –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if self.legacy_bot and hasattr(self.legacy_bot, 'stop'):
                await self.safe_execute(self.legacy_bot.stop)
            
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
            self.legacy_bot = None
            self.legacy_modules.clear()
            self.legacy_config.clear()
            
            self.is_initialized = False
            self.is_running = False
            
            self.logger.info("‚úÖ Legacy –∞–¥–∞–ø—Ç–µ—Ä –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Legacy –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
    
    def get_legacy_bot(self) -> Optional[Any]:
        """ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        return self.legacy_bot
    
    def get_legacy_config(self) -> Dict[str, Any]:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self.legacy_config.copy()
    
    def get_legacy_modules(self) -> Dict[str, Any]:
        """üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        return self.legacy_modules.copy()
    
    async def run_legacy_bot(self) -> None:
        """üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if not self.legacy_bot:
                raise AdapterExecutionError("Legacy –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞...")
            self.is_running = True
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
            if hasattr(self.legacy_bot, 'run'):
                await self.safe_execute(self.legacy_bot.run)
            elif hasattr(self.legacy_bot, 'start'):
                await self.safe_execute(self.legacy_bot.start)
            elif hasattr(self.legacy_bot, 'main_loop'):
                await self.safe_execute(self.legacy_bot.main_loop)
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤ —Å—Ç–∞—Ä–æ–º –±–æ—Ç–µ")
                
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
            raise
        finally:
            self.is_running = False
