#!/usr/bin/env python3
"""üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from typing import Dict, Any, Optional
from decimal import Decimal

class LegacyBotAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self, use_hybrid: bool = True):
        self.use_hybrid = use_hybrid
        self._old_bot = None

    def get_old_bot(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        if self._old_bot is None:
            try:
                if self.use_hybrid:
                    from hybrid_bot import HybridTradingBot
                    self._old_bot = HybridTradingBot()
                else:
                    from bot import TradingBot
                    self._old_bot = TradingBot()
            except ImportError as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç: {e}")
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –±–æ—Ç
                try:
                    from bot import TradingBot
                    self._old_bot = TradingBot()
                except ImportError:
                    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤")

        return self._old_bot

    async def run_trading_cycle(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            old_bot = self.get_old_bot()

            # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ execute_cycle
            if hasattr(old_bot, 'execute_cycle'):
                return await old_bot.execute_cycle()

            # –ï—Å–ª–∏ –µ—Å—Ç—å strategy_manager
            elif hasattr(old_bot, 'strategy_manager'):
                market_data = self._collect_market_data(old_bot)
                return old_bot.strategy_manager.execute_cycle(market_data)

            else:
                return {'success': False, 'reason': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞'}

        except Exception as e:
            return {'success': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}'}

    def _collect_market_data(self, bot) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if hasattr(bot, '_collect_market_data'):
                return bot._collect_market_data()
            else:
                # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                return {
                    'current_price': 0.18,  # –ó–∞–≥–ª—É—à–∫–∞
                    'balance': 1000.0,
                    'timestamp': time.time()
                }
        except Exception:
            return {}

class StrategyAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self):
        self._strategies = {}

    def load_old_strategies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from strategies import StrategyManager
            from config import TradingConfig

            config = TradingConfig()
            self._strategies['legacy'] = StrategyManager(config, None, None)

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def execute_strategy(self, strategy_name: str, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if strategy_name in self._strategies:
            try:
                return self._strategies[strategy_name].execute_cycle(market_data)
            except Exception as e:
                return {'success': False, 'reason': f'–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}'}

        return {'success': False, 'reason': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
