from typing import Optional, List, Dict, Any, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum
import json

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import IPositionManager, IPersistenceService, IMarketDataProvider
    from ...core.models import (
        Position, TradeResult, TradingPair, Money, Price,
        OrderResult, MarketData
    )
    from ...core.exceptions import (
        DataError, ValidationError, TradingSystemError
    )
    from ...core.events import DomainEvent, publish_event
except ImportError:
    # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    class IPositionManager: pass
    class IPersistenceService: pass
    class IMarketDataProvider: pass
    
    class Position: pass
    class TradeResult: pass
    class TradingPair: pass
    class Money: pass
    class Price: pass
    class OrderResult: pass
    class MarketData: pass
    
    class DataError(Exception): pass
    class ValidationError(Exception): pass
    class TradingSystemError(Exception): pass
    
    class DomainEvent: pass
    def publish_event(event): pass


class ReportType(Enum):
    """üìã –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤"""
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    PERFORMANCE = "performance"
    RISK = "risk"
    TRADING_SESSION = "trading_session"
    POSITION_ANALYSIS = "position_analysis"


class MetricType(Enum):
    """üìà –¢–∏–ø—ã –º–µ—Ç—Ä–∏–∫"""
    PNL = "pnl"                    # –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
    ROI = "roi"                    # –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
    WIN_RATE = "win_rate"          # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    DRAWDOWN = "drawdown"          # –ü—Ä–æ—Å–∞–¥–∫–∞
    VOLATILITY = "volatility"      # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    SHARPE_RATIO = "sharpe_ratio"  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    TRADES_COUNT = "trades_count"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫


@dataclass
class TradingMetrics:
    """üìä –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_pnl: Decimal = Decimal('0')
    realized_pnl: Decimal = Decimal('0')
    unrealized_pnl: Decimal = Decimal('0')
    
    # –¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_volume: Decimal = Decimal('0')
    average_trade_size: Decimal = Decimal('0')
    largest_win: Decimal = Decimal('0')
    largest_loss: Decimal = Decimal('0')
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_trading_time: timedelta = field(default_factory=lambda: timedelta())
    average_holding_time: timedelta = field(default_factory=lambda: timedelta())
    
    @property
    def win_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if self.total_trades == 0:
            return 0.0
        return (self.winning_trades / self.total_trades) * 100
    
    @property
    def average_win(self) -> Decimal:
        """–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º —Å–¥–µ–ª–∫–∞–º"""
        if self.winning_trades == 0:
            return Decimal('0')
        return self.realized_pnl / self.winning_trades if self.realized_pnl > 0 else Decimal('0')
    
    @property
    def average_loss(self) -> Decimal:
        """–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –ø–æ —É–±—ã—Ç–æ—á–Ω—ã–º —Å–¥–µ–ª–∫–∞–º"""
        if self.losing_trades == 0:
            return Decimal('0')
        total_losses = sum(trade.pnl for trade in [] if hasattr(trade, 'pnl') and trade.pnl < 0)
        return abs(total_losses / self.losing_trades) if self.losing_trades > 0 else Decimal('0')
    
    @property
    def profit_factor(self) -> float:
        """–§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–µ–π –∫ —É–±—ã—Ç–∫–∞–º)"""
        if self.average_loss == 0:
            return float('inf') if self.average_win > 0 else 0.0
        return float(self.average_win / self.average_loss)


@dataclass
class PerformanceReport:
    """üìà –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    report_type: ReportType
    period_start: datetime
    period_end: datetime
    trading_pair: TradingPair
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    metrics: TradingMetrics
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    daily_pnl: List[Tuple[datetime, Decimal]] = field(default_factory=list)
    hourly_activity: Dict[int, int] = field(default_factory=dict)  # —á–∞—Å -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    max_drawdown: Decimal = Decimal('0')
    volatility: float = 0.0
    var_95: Decimal = Decimal('0')  # Value at Risk 95%
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations: List[str] = field(default_factory=list)
    warnings: List[str] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'report_type': self.report_type.value,
            'period': {
                'start': self.period_start.isoformat(),
                'end': self.period_end.isoformat(),
                'duration_days': (self.period_end - self.period_start).days
            },
            'trading_pair': str(self.trading_pair),
            'metrics': {
                'total_pnl': str(self.metrics.total_pnl),
                'realized_pnl': str(self.metrics.realized_pnl),
                'unrealized_pnl': str(self.metrics.unrealized_pnl),
                'total_trades': self.metrics.total_trades,
                'win_rate': round(self.metrics.win_rate, 2),
                'total_volume': str(self.metrics.total_volume),
                'average_trade_size': str(self.metrics.average_trade_size),
                'profit_factor': round(self.metrics.profit_factor, 2)
            },
            'risk_analysis': {
                'max_drawdown': str(self.max_drawdown),
                'volatility': round(self.volatility, 4),
                'var_95': str(self.var_95)
            },
            'activity_analysis': {
                'daily_pnl_count': len(self.daily_pnl),
                'most_active_hour': max(self.hourly_activity.items(), key=lambda x: x[1])[0] if self.hourly_activity else None,
                'trading_days': len([pnl for date, pnl in self.daily_pnl if pnl != 0])
            },
            'recommendations': self.recommendations,
            'warnings': self.warnings,
            'generated_at': datetime.now().isoformat()
        }


class AnalyticsService:
    """üìä –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
    
    def __init__(
        self,
        position_manager: IPositionManager,
        persistence_service: IPersistenceService,
        market_data_provider: IMarketDataProvider,
        trading_pair: TradingPair
    ):
        self.position_manager = position_manager
        self.persistence = persistence_service
        self.market_data_provider = market_data_provider
        self.trading_pair = trading_pair
        
        # –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self._metrics_cache: Dict[str, Tuple[Any, datetime]] = {}
        self.cache_ttl = timedelta(minutes=15)
        
        # –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫
        self.metrics_history: List[Tuple[datetime, TradingMetrics]] = []
        self.max_history_size = 10000
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.auto_reports_enabled = True
        self.report_generation_time = 22  # 22:00 –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
    async def initialize(self) -> None:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AnalyticsService...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            await self._load_metrics_history()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
            await self._load_trades_history()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            await self._initialize_baseline_metrics()
            
            self.logger.info("‚úÖ AnalyticsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AnalyticsService: {e}")
            raise
    
    async def calculate_current_metrics(self) -> TradingMetrics:
        """üìä –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_metrics = self._get_cached_metrics("current_metrics")
            if cached_metrics:
                return cached_metrics
            
            self.logger.debug("üìä –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            current_position = await self.position_manager.get_current_position(self.trading_pair)
            trades_history = await self._get_trades_history()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = await self._calculate_metrics_from_data(current_position, trades_history)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache_metrics("current_metrics", metrics)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.metrics_history.append((datetime.now(), metrics))
            if len(self.metrics_history) > self.max_history_size:
                self.metrics_history = self.metrics_history[-self.max_history_size:]
            
            return metrics
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
            return TradingMetrics()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    
    async def generate_report(
        self,
        report_type: ReportType,
        period_days: Optional[int] = None,
        custom_start: Optional[datetime] = None,
        custom_end: Optional[datetime] = None
    ) -> PerformanceReport:
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            self.logger.info(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: {report_type.value}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            period_start, period_end = self._determine_report_period(
                report_type, period_days, custom_start, custom_end
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
            period_data = await self._get_period_data(period_start, period_end)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            period_metrics = await self._calculate_period_metrics(period_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            risk_analysis = await self._analyze_risk_metrics(period_data)
            activity_analysis = self._analyze_trading_activity(period_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations, warnings = self._generate_insights(period_metrics, risk_analysis)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = PerformanceReport(
                report_type=report_type,
                period_start=period_start,
                period_end=period_end,
                trading_pair=self.trading_pair,
                metrics=period_metrics,
                daily_pnl=activity_analysis.get('daily_pnl', []),
                hourly_activity=activity_analysis.get('hourly_activity', {}),
                max_drawdown=risk_analysis.get('max_drawdown', Decimal('0')),
                volatility=risk_analysis.get('volatility', 0.0),
                var_95=risk_analysis.get('var_95', Decimal('0')),
                recommendations=recommendations,
                warnings=warnings
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            await self._save_report(report)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._publish_report_event(report)
            
            self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç {report_type.value} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            raise DataError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: {e}")
    
    async def get_performance_summary(self, days_back: int = 30) -> Dict[str, Any]:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            current_metrics = await self.calculate_current_metrics()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days_back)
            
            historical_data = await self._get_period_data(start_date, end_date)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            trends = self._analyze_performance_trends(historical_data)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
            comparison = await self._compare_with_previous_period(days_back)
            
            return {
                'current_metrics': {
                    'total_pnl': str(current_metrics.total_pnl),
                    'win_rate': round(current_metrics.win_rate, 2),
                    'total_trades': current_metrics.total_trades,
                    'profit_factor': round(current_metrics.profit_factor, 2)
                },
                'period_analysis': {
                    'days_analyzed': days_back,
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat(),
                    'total_trading_days': len([d for d in historical_data if d.get('trades_count', 0) > 0])
                },
                'trends': trends,
                'comparison': comparison,
                'generated_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {'error': str(e)}
    
    async def track_trade_performance(self, trade_result: OrderResult) -> None:
        """üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
        try:
            if not trade_result or not getattr(trade_result, 'success', False):
                return
            
            self.logger.debug(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {trade_result}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
            trade_analysis = await self._analyze_single_trade(trade_result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._update_trade_statistics(trade_analysis)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            anomalies = self._detect_trade_anomalies(trade_analysis)
            if anomalies:
                await self._handle_trade_anomalies(anomalies, trade_result)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏
            await self._publish_trade_analysis_event(trade_analysis)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
    
    async def get_risk_metrics(self) -> Dict[str, Any]:
        """üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
            end_date = datetime.now()
            start_date = end_date - timedelta(days=90)  # 3 –º–µ—Å—è—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
            
            historical_data = await self._get_period_data(start_date, end_date)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
            risk_metrics = await self._calculate_risk_metrics(historical_data)
            
            return {
                'analysis_period': {
                    'start': start_date.isoformat(),
                    'end': end_date.isoformat(),
                    'days': 90
                },
                'drawdown': {
                    'current': str(risk_metrics.get('current_drawdown', 0)),
                    'maximum': str(risk_metrics.get('max_drawdown', 0)),
                    'average': str(risk_metrics.get('avg_drawdown', 0))
                },
                'volatility': {
                    'daily': round(risk_metrics.get('daily_volatility', 0), 4),
                    'weekly': round(risk_metrics.get('weekly_volatility', 0), 4),
                    'monthly': round(risk_metrics.get('monthly_volatility', 0), 4)
                },
                'value_at_risk': {
                    'var_95': str(risk_metrics.get('var_95', 0)),
                    'var_99': str(risk_metrics.get('var_99', 0)),
                    'expected_shortfall': str(risk_metrics.get('expected_shortfall', 0))
                },
                'risk_ratios': {
                    'sharpe_ratio': round(risk_metrics.get('sharpe_ratio', 0), 3),
                    'sortino_ratio': round(risk_metrics.get('sortino_ratio', 0), 3),
                    'calmar_ratio': round(risk_metrics.get('calmar_ratio', 0), 3)
                },
                'generated_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫: {e}")
            return {'error': str(e)}
    
    async def export_analytics_data(
        self,
        format_type: str = "json",
        period_days: int = 30,
        include_trades: bool = True,
        include_positions: bool = True
    ) -> Dict[str, Any]:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_type}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
            end_date = datetime.now()
            start_date = end_date - timedelta(days=period_days)
            
            export_data = {
                'export_info': {
                    'format': format_type,
                    'period_days': period_days,
                    'start_date': start_date.isoformat(),
                    'end_date': end_date.isoformat(),
                    'generated_at': datetime.now().isoformat()
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            current_metrics = await self.calculate_current_metrics()
            export_data['current_metrics'] = {
                'total_pnl': str(current_metrics.total_pnl),
                'realized_pnl': str(current_metrics.realized_pnl),
                'unrealized_pnl': str(current_metrics.unrealized_pnl),
                'total_trades': current_metrics.total_trades,
                'win_rate': current_metrics.win_rate,
                'profit_factor': current_metrics.profit_factor
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫
            if include_trades:
                trades_data = await self._export_trades_data(start_date, end_date)
                export_data['trades_history'] = trades_data
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
            if include_positions:
                positions_data = await self._export_positions_data(start_date, end_date)
                export_data['positions_history'] = positions_data
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
            export_data['analytics'] = {
                'daily_pnl': await self._get_daily_pnl_series(start_date, end_date),
                'performance_metrics': await self._get_performance_metrics_series(start_date, end_date),
                'risk_metrics': await self.get_risk_metrics()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            await self._save_export_data(export_data, format_type)
            
            return export_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'error': str(e)}
    
    async def generate_automated_insights(self) -> List[str]:
        """ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        try:
            insights = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            current_metrics = await self.calculate_current_metrics()
            
            # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É
            if current_metrics.win_rate > 70:
                insights.append(f"üéØ –û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç {current_metrics.win_rate:.1f}% - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
            elif current_metrics.win_rate < 40:
                insights.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç {current_metrics.win_rate:.1f}% - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –ò–Ω—Å–∞–π—Ç—ã –ø–æ profit factor
            if current_metrics.profit_factor > 2.0:
                insights.append(f"üí∞ –í—ã—Å–æ–∫–∏–π profit factor {current_metrics.profit_factor:.2f} - –ø—Ä–∏–±—ã–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ø–æ—Ç–µ—Ä–∏")
            elif current_metrics.profit_factor < 1.0:
                insights.append(f"üö® Profit factor {current_metrics.profit_factor:.2f} –Ω–∏–∂–µ 1.0 - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            trends = await self._analyze_recent_trends()
            
            if trends.get('pnl_trend') == 'improving':
                insights.append("üìà –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏")
            elif trends.get('pnl_trend') == 'declining':
                insights.append("üìâ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if current_metrics.total_trades > 0:
                avg_trade_frequency = current_metrics.total_trades / max(current_metrics.total_trading_time.days, 1)
                if avg_trade_frequency > 5:
                    insights.append("‚ö° –í—ã—Å–æ–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–º–∏—Å—Å–∏—è–º–∏")
                elif avg_trade_frequency < 0.5:
                    insights.append("üêå –ù–∏–∑–∫–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —É–ø—É—Å–∫–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫
            if current_metrics.average_trade_size > Decimal('0'):
                insights.append(f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {current_metrics.average_trade_size:.2f}")
            
            return insights
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"]
    
    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =================
    
    async def _load_metrics_history(self) -> None:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        try:
            history_data = await self.persistence.load_data(f"metrics_history_{self.trading_pair}")
            if history_data and isinstance(history_data, list):
                # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
                self.metrics_history = []
                for item in history_data[-self.max_history_size:]:
                    if isinstance(item, dict) and 'timestamp' in item and 'metrics' in item:
                        timestamp = datetime.fromisoformat(item['timestamp'])
                        metrics = self._deserialize_metrics(item['metrics'])
                        self.metrics_history.append((timestamp, metrics))
                
                self.logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.metrics_history)} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫: {e}")
            self.metrics_history = []
    
    async def _load_trades_history(self) -> None:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ persistence
            trades_data = await self.persistence.load_data(f"trades_history_{self.trading_pair}")
            if trades_data:
                self.logger.debug(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: {len(trades_data) if isinstance(trades_data, list) else 'unknown'}")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫: {e}")
    
    async def _initialize_baseline_metrics(self) -> None:
        """üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            if not self.metrics_history:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                initial_metrics = TradingMetrics()
                self.metrics_history.append((datetime.now(), initial_metrics))
                self.logger.debug("üéØ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _get_trades_history(self) -> List[Dict[str, Any]]:
        """üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            trades_data = await self.persistence.load_data(f"trades_history_{self.trading_pair}")
            return trades_data if isinstance(trades_data, list) else []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return []
    
    async def _calculate_metrics_from_data(
        self,
        current_position: Optional[Position],
        trades_history: List[Dict[str, Any]]
    ) -> TradingMetrics:
        """üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        metrics = TradingMetrics()
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
            if trades_history:
                total_pnl = Decimal('0')
                winning_trades = 0
                losing_trades = 0
                total_volume = Decimal('0')
                largest_win = Decimal('0')
                largest_loss = Decimal('0')
                
                for trade in trades_history:
                    if isinstance(trade, dict):
                        pnl = Decimal(str(trade.get('pnl', 0)))
                        volume = Decimal(str(trade.get('volume', 0)))
                        
                        total_pnl += pnl
                        total_volume += volume
                        
                        if pnl > 0:
                            winning_trades += 1
                            largest_win = max(largest_win, pnl)
                        elif pnl < 0:
                            losing_trades += 1
                            largest_loss = min(largest_loss, pnl)
                
                metrics.total_trades = len(trades_history)
                metrics.winning_trades = winning_trades
                metrics.losing_trades = losing_trades
                metrics.realized_pnl = total_pnl
                metrics.total_volume = total_volume
                metrics.largest_win = largest_win
                metrics.largest_loss = abs(largest_loss)
                
                if metrics.total_trades > 0:
                    metrics.average_trade_size = total_volume / metrics.total_trades
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if current_position and not current_position.is_empty:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    market_data = await self.market_data_provider.get_market_data(self.trading_pair)
                    current_value = current_position.quantity * market_data.current_price.value
                    position_cost = current_position.quantity * current_position.average_price
                    metrics.unrealized_pnl = current_value - position_cost
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å: {e}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å
            metrics.total_pnl = metrics.realized_pnl + metrics.unrealized_pnl
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics
    
    def _determine_report_period(
        self,
        report_type: ReportType,
        period_days: Optional[int],
        custom_start: Optional[datetime],
        custom_end: Optional[datetime]
    ) -> Tuple[datetime, datetime]:
        """üìÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
        
        end_date = custom_end or datetime.now()
        
        if custom_start:
            start_date = custom_start
        elif period_days:
            start_date = end_date - timedelta(days=period_days)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞
            if report_type == ReportType.DAILY:
                start_date = end_date - timedelta(days=1)
            elif report_type == ReportType.WEEKLY:
                start_date = end_date - timedelta(weeks=1)
            elif report_type == ReportType.MONTHLY:
                start_date = end_date - timedelta(days=30)
            else:
                start_date = end_date - timedelta(days=7)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è
        
        return start_date, end_date
    
    async def _get_period_data(
        self,
        start_date: datetime,
        end_date: datetime
    ) -> List[Dict[str, Any]]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
            period_data = []
            
            for timestamp, metrics in self.metrics_history:
                if start_date <= timestamp <= end_date:
                    period_data.append({
                        'timestamp': timestamp,
                        'metrics': metrics,
                        'total_pnl': metrics.total_pnl,
                        'trades_count': metrics.total_trades
                    })
            
            return period_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
            return []
    
    async def _calculate_period_metrics(
        self,
        period_data: List[Dict[str, Any]]
    ) -> TradingMetrics:
        """üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        if not period_data:
            return TradingMetrics()
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ø–µ—Ä–∏–æ–¥–∞
        latest_data = max(period_data, key=lambda x: x['timestamp'])
        return latest_data.get('metrics', TradingMetrics())
    
    async def _analyze_risk_metrics(
        self,
        period_data: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """üõ°Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫"""
        
        risk_analysis = {
            'max_drawdown': Decimal('0'),
            'volatility': 0.0,
            'var_95': Decimal('0')
        }
        
        try:
            if not period_data:
                return risk_analysis
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º P&L –∑–Ω–∞—á–µ–Ω–∏—è
            pnl_values = [float(item['total_pnl']) for item in period_data if 'total_pnl' in item]
            
            if len(pnl_values) < 2:
                return risk_analysis
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            peak = pnl_values[0]
            max_drawdown = 0
            
            for pnl in pnl_values:
                if pnl > peak:
                    peak = pnl
                drawdown = peak - pnl
                if drawdown > max_drawdown:
                    max_drawdown = drawdown
            
            risk_analysis['max_drawdown'] = Decimal(str(max_drawdown))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if len(pnl_values) > 1:
                import statistics
                volatility = statistics.stdev(pnl_values) if len(pnl_values) > 1 else 0
                risk_analysis['volatility'] = volatility
            
            # VaR 95% (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
            if len(pnl_values) >= 20:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è VaR
                sorted_pnl = sorted(pnl_values)
                var_95_index = int(len(sorted_pnl) * 0.05)
                risk_analysis['var_95'] = Decimal(str(abs(sorted_pnl[var_95_index])))
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫: {e}")
        
        return risk_analysis
    
    def _analyze_trading_activity(
        self,
        period_data: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """üìà –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        activity_analysis = {
            'daily_pnl': [],
            'hourly_activity': {}
        }
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            daily_pnl = {}
            hourly_activity = {}
            
            for item in period_data:
                timestamp = item['timestamp']
                pnl = item.get('total_pnl', Decimal('0'))
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
                date_key = timestamp.date()
                if date_key not in daily_pnl:
                    daily_pnl[date_key] = Decimal('0')
                daily_pnl[date_key] += pnl
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å–∞–º
                hour_key = timestamp.hour
                if hour_key not in hourly_activity:
                    hourly_activity[hour_key] = 0
                hourly_activity[hour_key] += 1
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            activity_analysis['daily_pnl'] = [
                (datetime.combine(date, datetime.min.time()), pnl)
                for date, pnl in sorted(daily_pnl.items())
            ]
            activity_analysis['hourly_activity'] = hourly_activity
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        
        return activity_analysis
    
    def _generate_insights(
        self,
        metrics: TradingMetrics,
        risk_analysis: Dict[str, Any]
    ) -> Tuple[List[str], List[str]]:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        
        recommendations = []
        warnings = []
        
        # –ê–Ω–∞–ª–∏–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞
        if metrics.win_rate > 80:
            recommendations.append("–û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π")
        elif metrics.win_rate < 30:
            warnings.append(f"–ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç {metrics.win_rate:.1f}% - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –ê–Ω–∞–ª–∏–∑ profit factor
        if metrics.profit_factor < 1.0:
            warnings.append(f"Profit factor {metrics.profit_factor:.2f} - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞")
        elif metrics.profit_factor > 3.0:
            recommendations.append("–í—ã—Å–æ–∫–∏–π profit factor - —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å–∞–¥–∫–∏
        max_drawdown = risk_analysis.get('max_drawdown', Decimal('0'))
        if max_drawdown > Decimal('100'):  # –ë–æ–ª–µ–µ 100 EUR –ø—Ä–æ—Å–∞–¥–∫–∏
            warnings.append(f"–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ {max_drawdown} EUR - —É—Å–∏–ª—å—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = risk_analysis.get('volatility', 0)
        if volatility > 50:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            warnings.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤")
        
        return recommendations, warnings
    
    def _get_cached_metrics(self, cache_key: str) -> Optional[TradingMetrics]:
        """üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if cache_key in self._metrics_cache:
            metrics, timestamp = self._metrics_cache[cache_key]
            if datetime.now() - timestamp < self.cache_ttl:
                return metrics
            else:
                del self._metrics_cache[cache_key]
        return None
    
    def _cache_metrics(self, cache_key: str, metrics: TradingMetrics) -> None:
        """üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        self._metrics_cache[cache_key] = (metrics, datetime.now())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self._metrics_cache) > 50:
            oldest_key = min(self._metrics_cache.keys(),
                           key=lambda k: self._metrics_cache[k][1])
            del self._metrics_cache[oldest_key]
    
    async def _save_report(self, report: PerformanceReport) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        try:
            report_data = report.to_dict()
            filename = f"report_{report.report_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            await self.persistence.save_data(filename, report_data)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _serialize_metrics(self, metrics: TradingMetrics) -> Dict[str, Any]:
        """üì§ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫"""
        return {
            'total_pnl': str(metrics.total_pnl),
            'realized_pnl': str(metrics.realized_pnl),
            'unrealized_pnl': str(metrics.unrealized_pnl),
            'total_trades': metrics.total_trades,
            'winning_trades': metrics.winning_trades,
            'losing_trades': metrics.losing_trades,
            'total_volume': str(metrics.total_volume),
            'average_trade_size': str(metrics.average_trade_size),
            'largest_win': str(metrics.largest_win),
            'largest_loss': str(metrics.largest_loss)
        }
    
    def _deserialize_metrics(self, data: Dict[str, Any]) -> TradingMetrics:
        """üì• –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫"""
        metrics = TradingMetrics()
        
        try:
            metrics.total_pnl = Decimal(str(data.get('total_pnl', 0)))
            metrics.realized_pnl = Decimal(str(data.get('realized_pnl', 0)))
            metrics.unrealized_pnl = Decimal(str(data.get('unrealized_pnl', 0)))
            metrics.total_trades = int(data.get('total_trades', 0))
            metrics.winning_trades = int(data.get('winning_trades', 0))
            metrics.losing_trades = int(data.get('losing_trades', 0))
            metrics.total_volume = Decimal(str(data.get('total_volume', 0)))
            metrics.average_trade_size = Decimal(str(data.get('average_trade_size', 0)))
            metrics.largest_win = Decimal(str(data.get('largest_win', 0)))
            metrics.largest_loss = Decimal(str(data.get('largest_loss', 0)))
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    async def _analyze_single_trade(self, trade_result: OrderResult) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        return {'trade_id': getattr(trade_result, 'id', 'unknown')}
    
    async def _update_trade_statistics(self, trade_analysis: Dict[str, Any]) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–¥–µ–ª–æ–∫"""
        pass
    
    def _detect_trade_anomalies(self, trade_analysis: Dict[str, Any]) -> List[str]:
        """üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–¥–µ–ª–∫–µ"""
        return []
    
    async def _handle_trade_anomalies(self, anomalies: List[str], trade_result: OrderResult) -> None:
        """‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π —Å–¥–µ–ª–∫–∏"""
        pass
    
    async def _analyze_recent_trends(self) -> Dict[str, str]:
        """üìà –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        return {'pnl_trend': 'stable'}
    
    async def _compare_with_previous_period(self, days_back: int) -> Dict[str, Any]:
        """üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º"""
        return {'comparison': 'no_change'}
    
    async def _calculate_risk_metrics(self, historical_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üõ°Ô∏è –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫"""
        return {
            'current_drawdown': 0,
            'max_drawdown': 0,
            'daily_volatility': 0,
            'var_95': 0,
            'sharpe_ratio': 0
        }
    
    async def _export_trades_data(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return []
    
    async def _export_positions_data(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return []
    
    async def _get_daily_pnl_series(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö P&L"""
        return []
    
    async def _get_performance_metrics_series(self, start_date: datetime, end_date: datetime) -> List[Dict[str, Any]]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return []
    
    async def _save_export_data(self, export_data: Dict[str, Any], format_type: str) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    def _analyze_performance_trends(self, historical_data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        return {'trend': 'stable'}
    
    async def _publish_report_event(self, report: PerformanceReport) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            event = DomainEvent()
            event.event_type = "performance_report_generated"
            event.source = "analytics_service"
            event.metadata = {
                'report_type': report.report_type.value,
                'period_days': (report.period_end - report.period_start).days,
                'total_trades': report.metrics.total_trades,
                'win_rate': report.metrics.win_rate
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _publish_trade_analysis_event(self, trade_analysis: Dict[str, Any]) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏"""
        try:
            event = DomainEvent()
            event.event_type = "trade_analyzed"
            event.source = "analytics_service"
            event.metadata = trade_analysis
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–∫–∏: {e}")
