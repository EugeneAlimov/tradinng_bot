from typing import Optional, List, Dict, Any, Tuple
from decimal import Decimal
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass, field
from enum import Enum

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import IRiskManager, IPositionManager, IMarketDataProvider
    from ...core.models import (
        TradeSignal, Position, TradingPair, Money, Price,
        MarketData, RiskLevel, StrategySignalType
    )
    from ...core.exceptions import (
        RiskManagementError, EmergencyStopError, ValidationError,
        TradingError, InsufficientBalanceError
    )
    from ...core.events import DomainEvent, publish_event
except ImportError:
    # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    class IRiskManager: pass
    class IPositionManager: pass
    class IMarketDataProvider: pass
    
    class TradeSignal: pass
    class Position: pass
    class TradingPair: pass
    class Money: pass
    class Price: pass
    class MarketData: pass
    class RiskLevel: pass
    class StrategySignalType: pass
    
    class RiskManagementError(Exception): pass
    class EmergencyStopError(Exception): pass
    class ValidationError(Exception): pass
    class TradingError(Exception): pass
    class InsufficientBalanceError(Exception): pass
    
    class DomainEvent: pass
    def publish_event(event): pass


class RiskDecision(Enum):
    """üéØ –†–µ—à–µ–Ω–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    APPROVE = "approve"           # –û–¥–æ–±—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    APPROVE_WITH_LIMITS = "approve_with_limits"  # –û–¥–æ–±—Ä–∏—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    REJECT = "reject"            # –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
    EMERGENCY_STOP = "emergency_stop"  # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞


@dataclass
class RiskAssessmentResult:
    """üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤"""
    decision: RiskDecision
    risk_score: float  # 0.0 - 1.0
    confidence: float  # 0.0 - 1.0
    
    # –î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏
    factors: Dict[str, Any] = field(default_factory=dict)
    recommendations: List[str] = field(default_factory=list)
    warnings: List[str] = field(default_factory=list)
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã)
    max_position_size: Optional[Decimal] = None
    max_trade_amount: Optional[Decimal] = None
    required_stop_loss: Optional[Decimal] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    cooldown_period: Optional[timedelta] = None
    valid_until: Optional[datetime] = None
    
    @property
    def is_approved(self) -> bool:
        """–û–¥–æ–±—Ä–µ–Ω–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è"""
        return self.decision in [RiskDecision.APPROVE, RiskDecision.APPROVE_WITH_LIMITS]
    
    @property
    def has_restrictions(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        return self.decision == RiskDecision.APPROVE_WITH_LIMITS
    
    @property
    def is_emergency(self) -> bool:
        """–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        return self.decision == RiskDecision.EMERGENCY_STOP


@dataclass
class RiskMonitoringState:
    """üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–æ–≤"""
    # –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
    daily_loss_limit: Decimal = Decimal('100')  # EUR
    position_size_limit: Decimal = Decimal('0.1')  # 10% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
    max_drawdown_limit: Decimal = Decimal('0.15')  # 15%
    
    # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    daily_loss: Decimal = Decimal('0')
    current_drawdown: Decimal = Decimal('0')
    consecutive_losses: int = 0
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    emergency_stop_active: bool = False
    trading_blocked: bool = False
    last_assessment_time: Optional[datetime] = None
    
    # –°—á–µ—Ç—á–∏–∫–∏
    trades_today: int = 0
    risk_violations_today: int = 0
    emergency_stops_count: int = 0


class RiskManagementService:
    """üõ°Ô∏è –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(
        self,
        risk_manager: IRiskManager,
        position_manager: IPositionManager,
        market_data_provider: IMarketDataProvider,
        trading_pair: TradingPair,
        initial_balance: Money
    ):
        self.risk_manager = risk_manager
        self.position_manager = position_manager
        self.market_data_provider = market_data_provider
        self.trading_pair = trading_pair
        self.initial_balance = initial_balance
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_state = RiskMonitoringState()
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫
        self.assessment_history: List[RiskAssessmentResult] = []
        self.max_history_size = 1000
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.risk_tolerance = RiskLevel.MEDIUM
        self.auto_emergency_stop = True
        self.assessment_timeout = timedelta(seconds=30)
        
        # –ö—ç—à –æ—Ü–µ–Ω–æ–∫
        self._assessment_cache: Dict[str, Tuple[RiskAssessmentResult, datetime]] = {}
        self.cache_ttl = timedelta(minutes=1)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_assessments': 0,
            'approved_trades': 0,
            'rejected_trades': 0,
            'emergency_stops': 0,
            'false_positives': 0  # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –±—ã –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏
        }
    
    async def assess_trade_risk(
        self,
        signal: TradeSignal,
        context: Optional[Dict[str, Any]] = None
    ) -> RiskAssessmentResult:
        """üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        
        try:
            start_time = datetime.now()
            self.stats['total_assessments'] += 1
            
            self.logger.debug(f"üîç –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–ª—è {signal.signal_type} {signal.pair}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._get_cache_key(signal)
            cached_result = self._get_cached_assessment(cache_key)
            if cached_result:
                self.logger.debug("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏")
                return cached_result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            result = await self._perform_risk_assessment(signal, context)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache_assessment(cache_key, result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.assessment_history.append(result)
            if len(self.assessment_history) > self.max_history_size:
                self.assessment_history = self.assessment_history[-self.max_history_size:]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if result.is_approved:
                self.stats['approved_trades'] += 1
            else:
                self.stats['rejected_trades'] += 1
            
            if result.is_emergency:
                self.stats['emergency_stops'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._update_monitoring_state(result)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ü–µ–Ω–∫–∏
            await self._publish_risk_assessment_event(signal, result)
            
            assessment_time = (datetime.now() - start_time).total_seconds()
            self.logger.debug(f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {assessment_time:.3f}—Å: {result.decision.value}")
            
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
            return RiskAssessmentResult(
                decision=RiskDecision.REJECT,
                risk_score=1.0,
                confidence=0.0,
                warnings=[f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}"]
            )
    
    async def check_emergency_conditions(self) -> Tuple[bool, Optional[str]]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ domain risk manager
            should_stop = await self.risk_manager.should_emergency_stop()
            
            if should_stop:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç risk manager
                stop_reason = await self._get_emergency_stop_reason()
                
                self.logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_reason}")
                
                if self.auto_emergency_stop:
                    await self.trigger_emergency_stop(stop_reason)
                
                return True, stop_reason
            
            return False, None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
    
    async def trigger_emergency_stop(self, reason: str) -> None:
        """üö® –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            self.logger.critical(f"üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–í–ê–†–ò–ô–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò: {reason}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.monitoring_state.emergency_stop_active = True
            self.monitoring_state.trading_blocked = True
            self.monitoring_state.emergency_stops_count += 1
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ domain layer
            await self.risk_manager.trigger_emergency_stop(reason)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
            await self._publish_emergency_event(reason)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            if self.auto_emergency_stop:
                await self._emergency_close_positions(reason)
            
        except Exception as e:
            self.logger.critical(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            raise EmergencyStopError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É: {e}")
    
    async def reset_emergency_stop(self, authorization_code: str) -> bool:
        """üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            if not self._validate_authorization(authorization_code):
                self.logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                return False
            
            self.logger.info("üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.monitoring_state.emergency_stop_active = False
            self.monitoring_state.trading_blocked = False
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ domain layer
            await self.risk_manager.reset_emergency_stop()
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞
            await self._publish_emergency_reset_event()
            
            self.logger.info("‚úÖ –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    async def update_risk_limits(
        self,
        new_limits: Dict[str, Decimal]
    ) -> None:
        """‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞"""
        try:
            self.logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞: {new_limits}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
            self._validate_risk_limits(new_limits)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
            if 'daily_loss_limit' in new_limits:
                self.monitoring_state.daily_loss_limit = new_limits['daily_loss_limit']
            
            if 'position_size_limit' in new_limits:
                self.monitoring_state.position_size_limit = new_limits['position_size_limit']
            
            if 'max_drawdown_limit' in new_limits:
                self.monitoring_state.max_drawdown_limit = new_limits['max_drawdown_limit']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ domain layer
            await self.risk_manager.update_limits(new_limits)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._publish_limits_update_event(new_limits)
            
            self.logger.info("‚úÖ –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
            raise RiskManagementError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã: {e}")
    
    async def get_risk_report(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∏—Å–∫–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            current_position = await self.position_manager.get_current_position(self.trading_pair)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.market_data_provider.get_market_data(self.trading_pair)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∏—Å–∫–∏
            current_risk_metrics = await self._calculate_current_risk_metrics(
                current_position, market_data
            )
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
            history_analysis = self._analyze_assessment_history()
            
            return {
                'timestamp': datetime.now().isoformat(),
                'status': {
                    'emergency_stop_active': self.monitoring_state.emergency_stop_active,
                    'trading_blocked': self.monitoring_state.trading_blocked,
                    'risk_tolerance': self.risk_tolerance.value if hasattr(self.risk_tolerance, 'value') else str(self.risk_tolerance)
                },
                'current_limits': {
                    'daily_loss_limit': str(self.monitoring_state.daily_loss_limit),
                    'position_size_limit': str(self.monitoring_state.position_size_limit),
                    'max_drawdown_limit': str(self.monitoring_state.max_drawdown_limit)
                },
                'current_values': {
                    'daily_loss': str(self.monitoring_state.daily_loss),
                    'current_drawdown': str(self.monitoring_state.current_drawdown),
                    'consecutive_losses': self.monitoring_state.consecutive_losses
                },
                'risk_metrics': current_risk_metrics,
                'statistics': self.stats.copy(),
                'history_analysis': history_analysis,
                'recent_assessments': [
                    {
                        'decision': assessment.decision.value,
                        'risk_score': assessment.risk_score,
                        'confidence': assessment.confidence,
                        'warnings_count': len(assessment.warnings)
                    }
                    for assessment in self.assessment_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                ]
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    async def simulate_risk_scenario(
        self,
        scenario: Dict[str, Any]
    ) -> Dict[str, Any]:
        """üé≤ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∏—Å–∫–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            self.logger.info(f"üé≤ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario.get('name', 'unnamed')}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            test_signal = self._create_test_signal(scenario)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
            assessment = await self.assess_trade_risk(test_signal, {'simulation': True})
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            simulation_result = {
                'scenario': scenario,
                'assessment': {
                    'decision': assessment.decision.value,
                    'risk_score': assessment.risk_score,
                    'confidence': assessment.confidence,
                    'is_approved': assessment.is_approved,
                    'has_restrictions': assessment.has_restrictions,
                    'warnings': assessment.warnings,
                    'recommendations': assessment.recommendations
                },
                'analysis': {
                    'would_trigger_emergency': assessment.is_emergency,
                    'estimated_impact': self._estimate_scenario_impact(scenario, assessment),
                    'risk_factors': assessment.factors
                }
            }
            
            self.logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {assessment.decision.value}")
            return simulation_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            return {'error': str(e)}
    
    # ================= –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =================
    
    async def _perform_risk_assessment(
        self,
        signal: TradeSignal,
        context: Optional[Dict[str, Any]]
    ) -> RiskAssessmentResult:
        """üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç domain risk manager
        domain_assessment = await self.risk_manager.assess_trade_risk(signal)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ application —É—Ä–æ–≤–Ω–µ
        additional_checks = await self._perform_additional_checks(signal, context)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_result = self._combine_assessments(domain_assessment, additional_checks)
        
        return combined_result
    
    async def _perform_additional_checks(
        self,
        signal: TradeSignal,
        context: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞"""
        
        checks = {
            'context_validation': True,
            'timing_check': True,
            'market_conditions': True,
            'position_correlation': True
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context and context.get('simulation'):
                checks['context_validation'] = True  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç
            else:
                checks['context_validation'] = await self._validate_trading_context(context)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
            checks['timing_check'] = self._check_trading_hours()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            checks['market_conditions'] = await self._check_market_conditions()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            checks['position_correlation'] = await self._check_position_correlation(signal)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
            checks['error'] = str(e)
        
        return checks
    
    def _combine_assessments(
        self,
        domain_assessment: Any,
        additional_checks: Dict[str, Any]
    ) -> RiskAssessmentResult:
        """üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–∑ domain assessment
        base_decision = RiskDecision.APPROVE
        risk_score = 0.3
        confidence = 0.8
        
        if hasattr(domain_assessment, 'action'):
            action_value = getattr(domain_assessment.action, 'value', str(domain_assessment.action))
            if action_value == 'block':
                base_decision = RiskDecision.REJECT
                risk_score = 0.8
            elif action_value == 'emergency_exit':
                base_decision = RiskDecision.EMERGENCY_STOP
                risk_score = 1.0
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        warnings = []
        recommendations = []
        
        if not additional_checks.get('timing_check', True):
            base_decision = RiskDecision.REJECT
            warnings.append("–¢–æ—Ä–≥–æ–≤–ª—è –≤–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Å–æ–≤")
        
        if not additional_checks.get('market_conditions', True):
            if base_decision == RiskDecision.APPROVE:
                base_decision = RiskDecision.APPROVE_WITH_LIMITS
            warnings.append("–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
        
        if not additional_checks.get('position_correlation', True):
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        factors = {
            'domain_assessment': str(domain_assessment),
            'additional_checks': additional_checks,
            'risk_tolerance': str(self.risk_tolerance)
        }
        
        return RiskAssessmentResult(
            decision=base_decision,
            risk_score=risk_score,
            confidence=confidence,
            factors=factors,
            recommendations=recommendations,
            warnings=warnings
        )
    
    async def _get_emergency_stop_reason(self) -> str:
        """üö® –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            reasons = []
            
            if self.monitoring_state.daily_loss >= self.monitoring_state.daily_loss_limit:
                reasons.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å: {self.monitoring_state.daily_loss}")
            
            if self.monitoring_state.current_drawdown >= self.monitoring_state.max_drawdown_limit:
                reasons.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {self.monitoring_state.current_drawdown}")
            
            if self.monitoring_state.consecutive_losses >= 5:
                reasons.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥: {self.monitoring_state.consecutive_losses}")
            
            return "; ".join(reasons) if reasons else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã: {e}"
    
    async def _emergency_close_positions(self, reason: str) -> None:
        """üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            current_position = await self.position_manager.get_current_position(self.trading_pair)
            
            if current_position and not current_position.is_empty:
                self.logger.critical(f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {current_position.quantity}")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
                
        except Exception as e:
            self.logger.critical(f"üí• –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _update_monitoring_state(self, assessment: RiskAssessmentResult) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_state.last_assessment_time = datetime.now()
        
        if not assessment.is_approved:
            self.monitoring_state.risk_violations_today += 1
    
    async def _calculate_current_risk_metrics(
        self,
        position: Optional[Position],
        market_data: MarketData
    ) -> Dict[str, Any]:
        """üìà –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        try:
            metrics = {
                'position_risk': 0.0,
                'market_volatility': 0.0,
                'liquidity_risk': 0.0,
                'overall_risk': 0.0
            }
            
            if position and not position.is_empty:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏
                position_value = position.quantity * market_data.current_price.value
                portfolio_percentage = position_value / self.initial_balance.amount
                metrics['position_risk'] = float(portfolio_percentage)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if hasattr(market_data, 'price_change_24h'):
                metrics['market_volatility'] = abs(float(market_data.price_change_24h))
            
            # –û–±—â–∏–π —Ä–∏—Å–∫ –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ
            metrics['overall_risk'] = (
                metrics['position_risk'] + 
                metrics['market_volatility'] + 
                metrics['liquidity_risk']
            ) / 3.0
            
            return metrics
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞: {e}")
            return {'error': str(e)}
    
    def _analyze_assessment_history(self) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫"""
        if not self.assessment_history:
            return {'insufficient_data': True}
        
        recent_assessments = self.assessment_history[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50
        
        approval_rate = sum(1 for a in recent_assessments if a.is_approved) / len(recent_assessments)
        avg_risk_score = sum(a.risk_score for a in recent_assessments) / len(recent_assessments)
        avg_confidence = sum(a.confidence for a in recent_assessments) / len(recent_assessments)
        
        return {
            'total_assessments': len(self.assessment_history),
            'recent_assessments': len(recent_assessments),
            'approval_rate': approval_rate,
            'average_risk_score': avg_risk_score,
            'average_confidence': avg_confidence,
            'emergency_stops': sum(1 for a in recent_assessments if a.is_emergency)
        }
    
    def _get_cache_key(self, signal: TradeSignal) -> str:
        """üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        return f"{signal.signal_type}_{signal.pair}_{signal.quantity}_{signal.confidence}"
    
    def _get_cached_assessment(self, cache_key: str) -> Optional[RiskAssessmentResult]:
        """üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        if cache_key in self._assessment_cache:
            result, timestamp = self._assessment_cache[cache_key]
            if datetime.now() - timestamp < self.cache_ttl:
                return result
            else:
                del self._assessment_cache[cache_key]
        return None
    
    def _cache_assessment(self, cache_key: str, result: RiskAssessmentResult) -> None:
        """üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
        self._assessment_cache[cache_key] = (result, datetime.now())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self._assessment_cache) > 100:
            oldest_key = min(self._assessment_cache.keys(), 
                           key=lambda k: self._assessment_cache[k][1])
            del self._assessment_cache[oldest_key]
    
    def _validate_authorization(self, code: str) -> bool:
        """üîê –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return code == "EMERGENCY_RESET_2024"
    
    def _validate_risk_limits(self, limits: Dict[str, Decimal]) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞"""
        for key, value in limits.items():
            if value < 0:
                raise ValidationError(f"–õ–∏–º–∏—Ç {key} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            
            if key == 'position_size_limit' and value > 1:
                raise ValidationError("–õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%")
    
    async def _validate_trading_context(self, context: Optional[Dict[str, Any]]) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not context:
            return True  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        # –ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return True
    
    def _check_trading_hours(self) -> bool:
        """üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤"""
        # –ö—Ä–∏–ø—Ç–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è 24/7, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        now = datetime.now()
        
        # –ü—Ä–∏–º–µ—Ä: –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # if now.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ = 5, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
        #     return False
        
        return True
    
    async def _check_market_conditions(self) -> bool:
        """üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            market_data = await self.market_data_provider.get_market_data(self.trading_pair)
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(market_data, 'volatility') and market_data.volatility > 0.1:  # 10%
                return False
            
            return True
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    
    async def _check_position_correlation(self, signal: TradeSignal) -> bool:
        """üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        try:
            current_position = await self.position_manager.get_current_position(self.trading_pair)
            
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–µ –≤–∞–∂–Ω–∞
            if not current_position or current_position.is_empty:
                return True
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ
            if signal.signal_type == StrategySignalType.BUY:
                if current_position.quantity > self.initial_balance.amount * self.monitoring_state.position_size_limit:
                    return False
            
            return True
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
            return True
    
    def _create_test_signal(self, scenario: Dict[str, Any]) -> TradeSignal:
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è TradeSignal
        return None  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _estimate_scenario_impact(
        self,
        scenario: Dict[str, Any],
        assessment: RiskAssessmentResult
    ) -> Dict[str, Any]:
        """üìä –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        return {
            'potential_loss': scenario.get('expected_loss', 0),
            'probability': scenario.get('probability', 0.5),
            'impact_severity': 'high' if assessment.risk_score > 0.7 else 'medium' if assessment.risk_score > 0.4 else 'low'
        }
    
    async def _publish_risk_assessment_event(
        self,
        signal: TradeSignal,
        result: RiskAssessmentResult
    ) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"""
        try:
            event = DomainEvent()
            event.event_type = "risk_assessment_completed"
            event.source = "risk_management_service"
            event.metadata = {
                'signal_type': str(signal.signal_type) if signal else 'unknown',
                'decision': result.decision.value,
                'risk_score': result.risk_score,
                'confidence': result.confidence,
                'has_warnings': len(result.warnings) > 0
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def _publish_emergency_event(self, reason: str) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            event = DomainEvent()
            event.event_type = "emergency_stop_triggered"
            event.source = "risk_management_service"
            event.metadata = {
                'reason': reason,
                'timestamp': datetime.now().isoformat(),
                'monitoring_state': {
                    'daily_loss': str(self.monitoring_state.daily_loss),
                    'consecutive_losses': self.monitoring_state.consecutive_losses,
                    'emergency_stops_count': self.monitoring_state.emergency_stops_count
                }
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.critical(f"üí• –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def _publish_emergency_reset_event(self) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            event = DomainEvent()
            event.event_type = "emergency_stop_reset"
            event.source = "risk_management_service"
            event.metadata = {
                'timestamp': datetime.now().isoformat(),
                'reset_by': 'system'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å–±—Ä–æ—Å–∞: {e}")
    
    async def _publish_limits_update_event(self, new_limits: Dict[str, Decimal]) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        try:
            event = DomainEvent()
            event.event_type = "risk_limits_updated"
            event.source = "risk_management_service"
            event.metadata = {
                'new_limits': {k: str(v) for k, v in new_limits.items()},
                'timestamp': datetime.now().isoformat()
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
