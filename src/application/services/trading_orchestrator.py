from typing import Optional, Dict, Any, List
from decimal import Decimal
from datetime import datetime, timedelta
import logging
import asyncio
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Core —Å–ª–æ—è
try:
    from ...core.interfaces import (
        ITradingStrategy, IRiskManager, IMarketDataProvider,
        IPositionManager, IExchangeAPI, INotificationService
    )
    from ...core.models import (
        TradingPair, Position, TradeSignal, MarketData,
        OrderResult, Money, Price, StrategySignalType
    )
    from ...core.exceptions import (
        TradingError, RiskManagementError, APIError,
        ValidationError, EmergencyStopError
    )
    from ...core.events import DomainEvent, publish_event
    from ...core.di_container import DependencyContainer
except ImportError:
    # Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    class ITradingStrategy: pass
    class IRiskManager: pass
    class IMarketDataProvider: pass
    class IPositionManager: pass  
    class IExchangeAPI: pass
    class INotificationService: pass
    
    class TradingPair: pass
    class Position: pass
    class TradeSignal: pass
    class MarketData: pass
    class OrderResult: pass
    class Money: pass
    class Price: pass
    class StrategySignalType: pass
    
    class TradingError(Exception): pass
    class RiskManagementError(Exception): pass
    class APIError(Exception): pass
    class ValidationError(Exception): pass
    class EmergencyStopError(Exception): pass
    
    class DomainEvent: pass
    def publish_event(event): pass
    class DependencyContainer: pass


@dataclass
class TradingContext:
    """üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    trading_pair: TradingPair
    current_price: Price
    market_data: MarketData
    position: Optional[Position]
    available_balance: Money
    risk_level: str
    session_id: str


@dataclass
class TradingResult:
    """üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    success: bool
    action: str  # 'buy', 'sell', 'hold'
    order_result: Optional[OrderResult] = None
    message: str = ""
    risk_assessment: Dict[str, Any] = None
    execution_time: Optional[datetime] = None
    context: Optional[TradingContext] = None


class TradingOrchestrator:
    """üéØ –ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(
        self,
        container: DependencyContainer,
        trading_pair: TradingPair = None,
        enabled: bool = True
    ):
        # –ò–Ω–∂–µ–∫—Ç–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        self.trading_service = container.resolve(ITradingStrategy)
        self.risk_manager = container.resolve(IRiskManager)
        self.market_data_provider = container.resolve(IMarketDataProvider)
        self.position_manager = container.resolve(IPositionManager)
        self.exchange_api = container.resolve(IExchangeAPI)
        self.notification_service = container.resolve(INotificationService)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.trading_pair = trading_pair or TradingPair("DOGE", "EUR")
        self.enabled = enabled
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.current_session_id = None
        self.last_execution_time = None
        self.execution_count = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_cycles': 0,
            'successful_trades': 0,
            'failed_trades': 0,
            'holds': 0,
            'last_error': None
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
    async def start_trading_session(self) -> str:
        """üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if self.is_running:
            raise TradingError("–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å–µ—Å—Å–∏–∏
            self.current_session_id = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._validate_components()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            await self._initialize_session()
            
            self.is_running = True
            self.logger.info(f"üöÄ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {self.current_session_id}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞
            await self._publish_session_event("session_started")
            
            return self.current_session_id
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: {e}")
            raise TradingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é: {e}")
    
    async def stop_trading_session(self) -> None:
        """‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.is_running:
            return
            
        try:
            self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await self._finalize_session()
            
            self.is_running = False
            self.current_session_id = None
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self._publish_session_event("session_stopped")
            
            self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    async def execute_trading_cycle(self) -> TradingResult:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        if not self.is_running:
            raise TradingError("–¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            
        start_time = datetime.now()
        self.stats['total_cycles'] += 1
        
        try:
            self.logger.debug(f"üîÑ –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ #{self.stats['total_cycles']}")
            
            # 1. –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            context = await self._collect_trading_context()
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal = await self._analyze_market(context)
            
            # 3. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
            risk_assessment = await self._assess_risks(signal, context)
            
            # 4. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
            decision = await self._make_trading_decision(signal, risk_assessment, context)
            
            # 5. –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            result = await self._execute_decision(decision, context)
            
            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self._update_statistics(result)
            
            # 7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self._send_notifications(result)
            
            self.last_execution_time = datetime.now()
            execution_duration = (self.last_execution_time - start_time).total_seconds()
            
            self.logger.info(
                f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {execution_duration:.2f}—Å: {result.action}"
            )
            
            return result
            
        except EmergencyStopError as e:
            # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
            self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {e}")
            await self.stop_trading_session()
            
            result = TradingResult(
                success=False,
                action="emergency_stop",
                message=f"–ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: {e}"
            )
            
            self.stats['failed_trades'] += 1
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            self.stats['last_error'] = str(e)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –æ—Ç –æ—à–∏–±–∫–∏
            await self._handle_cycle_error(e)
            
            return TradingResult(
                success=False,
                action="error",
                message=f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}"
            )
    
    async def _collect_trading_context(self) -> TradingContext:
        """üìä –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.market_data_provider.get_market_data(self.trading_pair)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            position = await self.position_manager.get_current_position(self.trading_pair)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = await self.exchange_api.get_balance()
            available_balance = Money(
                balance.get(self.trading_pair.quote, {}).get('available', 0),
                self.trading_pair.quote
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤
            risk_level = await self.risk_manager.get_current_risk_level()
            
            return TradingContext(
                trading_pair=self.trading_pair,
                current_price=market_data.current_price,
                market_data=market_data,
                position=position,
                available_balance=available_balance,
                risk_level=risk_level,
                session_id=self.current_session_id
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            raise TradingError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}")
    
    async def _analyze_market(self, context: TradingContext) -> TradeSignal:
        """üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            decision = await self.trading_service.analyze_market(
                context.trading_pair,
                context.position
            )
            
            return decision.signal
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª HOLD
            return TradeSignal(
                signal_type=StrategySignalType.HOLD,
                pair=context.trading_pair,
                strategy_name="emergency_hold",
                reason=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}",
                confidence=0.0
            )
    
    async def _assess_risks(
        self, 
        signal: TradeSignal, 
        context: TradingContext
    ) -> Dict[str, Any]:
        """üõ°Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            if await self.risk_manager.should_emergency_stop():
                raise EmergencyStopError("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∏—Å–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
            assessment = await self.risk_manager.assess_trade_risk(signal)
            
            return {
                'risk_level': assessment.severity.value if hasattr(assessment, 'severity') else 'unknown',
                'approved': assessment.action.value == 'allow' if hasattr(assessment, 'action') else False,
                'recommendation': getattr(assessment, 'recommendation', ''),
                'score': getattr(assessment, 'score', 0.0),
                'details': assessment
            }
            
        except EmergencyStopError:
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            return {
                'risk_level': 'high',
                'approved': False,
                'recommendation': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤',
                'score': 0.0,
                'error': str(e)
            }
    
    async def _make_trading_decision(
        self,
        signal: TradeSignal,
        risk_assessment: Dict[str, Any],
        context: TradingContext
    ) -> Dict[str, Any]:
        """üéØ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        
        # –ï—Å–ª–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –æ–¥–æ–±—Ä–∏–ª - –æ—Ç–∫–ª–æ–Ω—è–µ–º
        if not risk_assessment.get('approved', False):
            return {
                'action': 'hold',
                'reason': f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º: {risk_assessment.get('recommendation', '')}",
                'signal': signal,
                'risk_assessment': risk_assessment,
                'approved': False
            }
        
        # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª HOLD - –¥–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é
        if signal.signal_type == StrategySignalType.HOLD:
            return {
                'action': 'hold',
                'reason': signal.reason,
                'signal': signal,
                'risk_assessment': risk_assessment,
                'approved': True
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if signal.signal_type == StrategySignalType.BUY:
            required_amount = signal.quantity * signal.price if signal.price else Decimal('0')
            if context.available_balance.amount < required_amount:
                return {
                    'action': 'hold',
                    'reason': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {required_amount}, –¥–æ—Å—Ç—É–ø–Ω–æ {context.available_balance.amount}',
                    'signal': signal,
                    'risk_assessment': risk_assessment,
                    'approved': False
                }
        
        # –†–µ—à–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ
        return {
            'action': signal.signal_type.value.lower(),
            'reason': signal.reason,
            'signal': signal,
            'risk_assessment': risk_assessment,
            'approved': True,
            'quantity': signal.quantity,
            'price': signal.price
        }
    
    async def _execute_decision(
        self,
        decision: Dict[str, Any],
        context: TradingContext
    ) -> TradingResult:
        """‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        
        action = decision['action']
        
        try:
            if action == 'hold':
                self.stats['holds'] += 1
                return TradingResult(
                    success=True,
                    action='hold',
                    message=decision['reason'],
                    risk_assessment=decision['risk_assessment'],
                    execution_time=datetime.now(),
                    context=context
                )
            
            elif action in ['buy', 'sell']:
                # –ò—Å–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                order_result = await self._execute_trade_order(decision, context)
                
                if order_result and getattr(order_result, 'success', False):
                    self.stats['successful_trades'] += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    await self.position_manager.update_position_from_trade(order_result)
                    
                    return TradingResult(
                        success=True,
                        action=action,
                        order_result=order_result,
                        message=f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω {action}",
                        risk_assessment=decision['risk_assessment'],
                        execution_time=datetime.now(),
                        context=context
                    )
                else:
                    self.stats['failed_trades'] += 1
                    return TradingResult(
                        success=False,
                        action=action,
                        order_result=order_result,
                        message=f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è {action}",
                        risk_assessment=decision['risk_assessment'],
                        execution_time=datetime.now(),
                        context=context
                    )
            
            else:
                raise TradingError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            self.stats['failed_trades'] += 1
            
            return TradingResult(
                success=False,
                action=action,
                message=f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}",
                risk_assessment=decision['risk_assessment'],
                execution_time=datetime.now(),
                context=context
            )
    
    async def _execute_trade_order(
        self,
        decision: Dict[str, Any],
        context: TradingContext
    ) -> Optional[OrderResult]:
        """üí± –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            signal = decision['signal']
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ –±–∏—Ä–∂–µ–≤–æ–π API
            order_result = await self.exchange_api.create_order(
                pair=str(signal.pair),
                order_type=signal.signal_type.value.lower(),
                quantity=signal.quantity,
                price=signal.price
            )
            
            self.logger.info(f"üìã –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order_result}")
            return order_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def _validate_components(self) -> None:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components = {
            'trading_service': self.trading_service,
            'risk_manager': self.risk_manager,
            'market_data_provider': self.market_data_provider,
            'position_manager': self.position_manager,
            'exchange_api': self.exchange_api,
            'notification_service': self.notification_service
        }
        
        for name, component in components.items():
            if component is None:
                raise TradingError(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _initialize_session(self) -> None:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        self.execution_count = 0
        self.last_execution_time = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        try:
            await self.exchange_api.test_connection()
        except Exception as e:
            raise TradingError(f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ: {e}")
    
    async def _finalize_session(self) -> None:
        """üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        session_stats = {
            'session_id': self.current_session_id,
            'total_cycles': self.stats['total_cycles'],
            'successful_trades': self.stats['successful_trades'],
            'failed_trades': self.stats['failed_trades'],
            'success_rate': (self.stats['successful_trades'] / max(self.stats['total_cycles'], 1)) * 100
        }
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏: {session_stats}")
    
    async def _update_statistics(self, result: TradingResult) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.execution_count += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
        
    async def _send_notifications(self, result: TradingResult) -> None:
        """üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if self.notification_service and result.action != 'hold':
                await self.notification_service.send_trade_notification(result)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _publish_session_event(self, event_type: str) -> None:
        """üì° –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏"""
        try:
            event = DomainEvent()
            event.event_type = event_type
            event.source = "trading_orchestrator"
            event.metadata = {
                'session_id': self.current_session_id,
                'trading_pair': str(self.trading_pair),
                'stats': self.stats.copy()
            }
            
            await publish_event(event)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def _handle_cycle_error(self, error: Exception) -> None:
        """üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        pass
    
    def get_session_statistics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        return {
            'session_id': self.current_session_id,
            'is_running': self.is_running,
            'execution_count': self.execution_count,
            'last_execution_time': self.last_execution_time,
            'stats': self.stats.copy(),
            'trading_pair': str(self.trading_pair),
            'enabled': self.enabled
        }
    
    def enable_trading(self) -> None:
        """‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.enabled = True
        self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞")
    
    def disable_trading(self) -> None:
        """üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.enabled = False
        self.logger.info("üö´ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
