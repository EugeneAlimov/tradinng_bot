#!/usr/bin/env python3
"""üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Clean Architecture - –≠—Ç–∞–ø 1.2"""

from dataclasses import dataclass, field
from typing import Dict, List, Set, Optional, Any
from enum import Enum
from pathlib import Path
import json


class LayerType(Enum):
    """üèóÔ∏è –¢–∏–ø—ã —Å–ª–æ–µ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    CORE = "core"
    DOMAIN = "domain"
    APPLICATION = "application"
    INFRASTRUCTURE = "infrastructure"
    PRESENTATION = "presentation"


class ComponentType(Enum):
    """üì¶ –¢–∏–ø—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    INTERFACE = "interface"
    MODEL = "model"
    SERVICE = "service"
    REPOSITORY = "repository"
    CONTROLLER = "controller"
    ADAPTER = "adapter"
    FACTORY = "factory"
    VALIDATOR = "validator"


@dataclass
class ArchitecturalComponent:
    """üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
    name: str
    layer: LayerType
    component_type: ComponentType
    file_path: str
    dependencies: Set[str] = field(default_factory=set)
    interfaces: Set[str] = field(default_factory=set)
    responsibilities: List[str] = field(default_factory=list)
    size_estimate: int = 0  # —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    priority: int = 1  # 1-–≤—ã—Å–æ–∫–∏–π, 3-–Ω–∏–∑–∫–∏–π
    migration_status: str = "planned"  # planned, in_progress, completed
    legacy_mapping: Optional[str] = None  # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ä–æ–º—É –∫–æ–¥—É


@dataclass
class BoundedContext:
    """üó∫Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    name: str
    description: str
    components: List[ArchitecturalComponent] = field(default_factory=list)
    interfaces: Set[str] = field(default_factory=set)
    events: Set[str] = field(default_factory=set)


@dataclass
class ArchitecturalPlan:
    """üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω"""
    contexts: Dict[str, BoundedContext] = field(default_factory=dict)
    dependency_rules: Dict[str, List[str]] = field(default_factory=dict)
    di_configuration: Dict[str, Any] = field(default_factory=dict)
    error_handling_strategy: Dict[str, Any] = field(default_factory=dict)


class ArchitecturePlanner:
    """üèóÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    def __init__(self):
        self.plan = ArchitecturalPlan()
        self._setup_dependency_rules()
        self._setup_error_handling()
    
    def create_clean_architecture_plan(self) -> ArchitecturalPlan:
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ Clean Architecture"""
        print("üèóÔ∏è –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω Clean Architecture...")
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º bounded contexts
        self._define_bounded_contexts()
        
        # 2. –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–æ–∏
        self._plan_core_layer()
        self._plan_domain_layer()
        self._plan_application_layer()
        self._plan_infrastructure_layer()
        self._plan_presentation_layer()
        
        # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DI
        self._configure_dependency_injection()
        
        print("‚úÖ –ü–ª–∞–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω")
        return self.plan
    
    def _define_bounded_contexts(self) -> None:
        """üó∫Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤"""
        
        # Trading Context - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        trading_context = BoundedContext(
            name="trading",
            description="–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏",
            interfaces={
                "ITradingService", "IPositionService", "IStrategyService"
            },
            events={
                "TradeExecuted", "PositionOpened", "PositionClosed", "StrategySignal"
            }
        )
        
        # Risk Context - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        risk_context = BoundedContext(
            name="risk",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏, –ª–∏–º–∏—Ç—ã, stop-loss",
            interfaces={
                "IRiskManager", "IRiskAssessor", "ILimitChecker"
            },
            events={
                "RiskLimitExceeded", "StopLossTriggered", "EmergencyStop"
            }
        )
        
        # Market Data Context - —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_context = BoundedContext(
            name="market",
            description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            interfaces={
                "IMarketDataProvider", "IPriceService", "IAnalyticsService"
            },
            events={
                "PriceUpdated", "MarketDataReceived", "ConnectionLost"
            }
        )
        
        # Infrastructure Context - –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        infrastructure_context = BoundedContext(
            name="infrastructure",
            description="API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            interfaces={
                "IExchangeAPI", "INotificationService", "ICacheService"
            },
            events={
                "APICallFailed", "NotificationSent", "DataPersisted"
            }
        )
        
        self.plan.contexts = {
            "trading": trading_context,
            "risk": risk_context,
            "market": market_context,
            "infrastructure": infrastructure_context
        }
    
    def _plan_core_layer(self) -> None:
        """üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Core —Å–ª–æ—è"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        interfaces_component = ArchitecturalComponent(
            name="Interfaces",
            layer=LayerType.CORE,
            component_type=ComponentType.INTERFACE,
            file_path="src/core/interfaces.py",
            responsibilities=[
                "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏",
                "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã"
            ],
            size_estimate=300,
            priority=1
        )
        
        # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        models_component = ArchitecturalComponent(
            name="Models",
            layer=LayerType.CORE,
            component_type=ComponentType.MODEL,
            file_path="src/core/models.py",
            responsibilities=[
                "–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö",
                "Value objects",
                "Enums –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"
            ],
            size_estimate=250,
            priority=1
        )
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        exceptions_component = ArchitecturalComponent(
            name="Exceptions",
            layer=LayerType.CORE,
            component_type=ComponentType.MODEL,
            file_path="src/core/exceptions.py",
            responsibilities=[
                "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è",
                "–ò–µ—Ä–∞—Ä—Ö–∏—è –æ—à–∏–±–æ–∫",
                "Error handling utilities"
            ],
            size_estimate=150,
            priority=1
        )
        
        # –°–æ–±—ã—Ç–∏—è
        events_component = ArchitecturalComponent(
            name="Events",
            layer=LayerType.CORE,
            component_type=ComponentType.MODEL,
            file_path="src/core/events.py",
            responsibilities=[
                "–î–æ–º–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                "Event bus –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã",
                "Event handlers"
            ],
            size_estimate=200,
            priority=2
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        for context in self.plan.contexts.values():
            context.components.extend([
                interfaces_component, models_component, 
                exceptions_component, events_component
            ])
    
    def _plan_domain_layer(self) -> None:
        """üèõÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Domain —Å–ª–æ—è"""
        
        # Trading Domain
        trading_components = [
            ArchitecturalComponent(
                name="TradingService",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/trading/trading_service.py",
                interfaces={"ITradingService"},
                responsibilities=[
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º —Ü–∏–∫–ª–æ–º"
                ],
                size_estimate=400,
                priority=1,
                legacy_mapping="TradeOrchestrator"
            ),
            
            ArchitecturalComponent(
                name="StrategyService",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/trading/strategy_service.py",
                interfaces={"IStrategyService"},
                dependencies={"ITradingStrategy", "IMarketData"},
                responsibilities=[
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏",
                    "–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                    "–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
                ],
                size_estimate=350,
                priority=1,
                legacy_mapping="StrategyManager"
            ),
            
            ArchitecturalComponent(
                name="PositionService",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/trading/position_service.py",
                interfaces={"IPositionService"},
                dependencies={"IPositionRepository", "ITradeValidator"},
                responsibilities=[
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏",
                    "–†–∞—Å—á–µ—Ç P&L",
                    "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"
                ],
                size_estimate=300,
                priority=1,
                legacy_mapping="PositionManager"
            )
        ]
        
        # Risk Domain
        risk_components = [
            ArchitecturalComponent(
                name="RiskManager",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/risk/risk_manager.py",
                interfaces={"IRiskManager"},
                dependencies={"IRiskAssessor", "ILimitChecker"},
                responsibilities=[
                    "–û—Ü–µ–Ω–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤",
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤",
                    "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
                ],
                size_estimate=350,
                priority=1,
                legacy_mapping="RiskManager"
            ),
            
            ArchitecturalComponent(
                name="EmergencyExitManager",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/risk/emergency_exit_manager.py",
                interfaces={"IEmergencyExitManager"},
                responsibilities=[
                    "–ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π",
                    "–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç–µ—Ä—å",
                    "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"
                ],
                size_estimate=200,
                priority=2,
                legacy_mapping="EmergencyExitManager"
            )
        ]
        
        # Analytics Domain
        analytics_components = [
            ArchitecturalComponent(
                name="AnalyticsService",
                layer=LayerType.DOMAIN,
                component_type=ComponentType.SERVICE,
                file_path="src/domain/analytics/analytics_service.py",
                interfaces={"IAnalyticsService"},
                dependencies={"IMetricsCollector", "IReportGenerator"},
                responsibilities=[
                    "–°–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤",
                    "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                ],
                size_estimate=300,
                priority=2,
                legacy_mapping="AnalyticsSystem"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        self.plan.contexts["trading"].components.extend(trading_components)
        self.plan.contexts["risk"].components.extend(risk_components)
        self.plan.contexts["market"].components.extend(analytics_components)
    
    def _plan_application_layer(self) -> None:
        """‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Application —Å–ª–æ—è"""
        
        # Services (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏)
        services_components = [
            ArchitecturalComponent(
                name="TradingOrchestrator",
                layer=LayerType.APPLICATION,
                component_type=ComponentType.SERVICE,
                file_path="src/application/services/trading_orchestrator.py",
                dependencies={
                    "ITradingService", "IPositionService", 
                    "IRiskManager", "IMarketDataProvider"
                },
                responsibilities=[
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –¥–æ–º–µ–Ω–∞–º–∏",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"
                ],
                size_estimate=400,
                priority=1,
                legacy_mapping="TradeOrchestrator"
            ),
            
            ArchitecturalComponent(
                name="MarketDataOrchestrator",
                layer=LayerType.APPLICATION,
                component_type=ComponentType.SERVICE,
                file_path="src/application/services/market_data_orchestrator.py",
                dependencies={"IMarketDataProvider", "ICacheService"},
                responsibilities=[
                    "–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
                ],
                size_estimate=250,
                priority=2
            )
        ]
        
        # Command/Query Handlers
        handlers_components = [
            ArchitecturalComponent(
                name="TradingCommandHandlers",
                layer=LayerType.APPLICATION,
                component_type=ComponentType.SERVICE,  
                file_path="src/application/handlers/trading_commands.py",
                dependencies={"ITradingService", "IValidator"},
                responsibilities=[
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥",
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥",
                    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                ],
                size_estimate=300,
                priority=2
            ),
            
            ArchitecturalComponent(
                name="QueryHandlers",
                layer=LayerType.APPLICATION,
                component_type=ComponentType.SERVICE,
                file_path="src/application/handlers/queries.py",
                dependencies={"IRepository", "IAnalyticsService"},
                responsibilities=[
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                    "–ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                    "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"
                ],
                size_estimate=200,
                priority=3
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        all_app_components = services_components + handlers_components
        for context in self.plan.contexts.values():
            context.components.extend(all_app_components)
    
    def _plan_infrastructure_layer(self) -> None:
        """üîß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Infrastructure —Å–ª–æ—è"""
        
        # API Integration
        api_components = [
            ArchitecturalComponent(
                name="ExmoApiAdapter",
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.ADAPTER,
                file_path="src/infrastructure/api/exmo_adapter.py",
                interfaces={"IExchangeAPI"},
                dependencies={"IRateLimiter", "IHttpClient"},
                responsibilities=[
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å EXMO API",
                    "–ê–¥–∞–ø—Ç–∞—Ü–∏—è API –æ—Ç–≤–µ—Ç–æ–≤",
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—à–∏–±–æ–∫"
                ],
                size_estimate=400,
                priority=1,
                legacy_mapping="ExmoAPIClient"
            ),
            
            ArchitecturalComponent(
                name="RateLimiter",
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.SERVICE,
                file_path="src/infrastructure/api/rate_limiter.py",
                interfaces={"IRateLimiter"},
                responsibilities=[
                    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤",
                    "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"
                ],
                size_estimate=250,
                priority=1,
                legacy_mapping="RateLimiter"
            )
        ]
        
        # Persistence
        persistence_components = [
            ArchitecturalComponent(
                name="PositionRepository",
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.REPOSITORY,
                file_path="src/infrastructure/persistence/position_repository.py",
                interfaces={"IPositionRepository"},
                dependencies={"IFileStorage", "ISerializer"},
                responsibilities=[
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π",
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π",
                    "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
                ],
                size_estimate=200,
                priority=2
            ),
            
            ArchitecturalComponent(
                name="TradeHistoryRepository", 
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.REPOSITORY,
                file_path="src/infrastructure/persistence/trade_history_repository.py",
                interfaces={"ITradeHistoryRepository"},
                responsibilities=[
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤",
                    "–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫",
                    "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
                ],
                size_estimate=180,
                priority=3
            )
        ]
        
        # Monitoring
        monitoring_components = [
            ArchitecturalComponent(
                name="LoggingService",
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.SERVICE,
                file_path="src/infrastructure/monitoring/logging_service.py",
                interfaces={"ILogger"},
                responsibilities=[
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤",
                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º"
                ],
                size_estimate=150,
                priority=2
            ),
            
            ArchitecturalComponent(
                name="MetricsCollector",
                layer=LayerType.INFRASTRUCTURE,
                component_type=ComponentType.SERVICE,
                file_path="src/infrastructure/monitoring/metrics_collector.py",
                interfaces={"IMetricsCollector"},
                responsibilities=[
                    "–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    "–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫"
                ],
                size_estimate=200,
                priority=3
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ infrastructure –∫–æ–Ω—Ç–µ–∫—Å—Ç
        all_infra_components = api_components + persistence_components + monitoring_components
        self.plan.contexts["infrastructure"].components.extend(all_infra_components)
    
    def _plan_presentation_layer(self) -> None:
        """üé® –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Presentation —Å–ª–æ—è"""
        
        # CLI Interface
        cli_components = [
            ArchitecturalComponent(
                name="CLIController",
                layer=LayerType.PRESENTATION,
                component_type=ComponentType.CONTROLLER,
                file_path="src/presentation/cli/cli_controller.py",
                dependencies={"ITradingOrchestrator", "IConfigProvider"},
                responsibilities=[
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ CLI –∫–æ–º–∞–Ω–¥",
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞"
                ],
                size_estimate=250,
                priority=2,
                legacy_mapping="main.py"
            ),
            
            ArchitecturalComponent(
                name="StatusDisplay",
                layer=LayerType.PRESENTATION,
                component_type=ComponentType.SERVICE,
                file_path="src/presentation/cli/status_display.py",
                dependencies={"IAnalyticsService", "IPositionService"},
                responsibilities=[
                    "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞",
                    "–†–µ–∞–ª-—Ç–∞–π–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"  
                ],
                size_estimate=180,
                priority=3
            )
        ]
        
        # Future: Web API (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞)
        web_components = [
            ArchitecturalComponent(
                name="WebApiController",
                layer=LayerType.PRESENTATION,
                component_type=ComponentType.CONTROLLER,
                file_path="src/presentation/web/api_controller.py",
                dependencies={"ITradingOrchestrator", "IAuthService"},
                responsibilities=[
                    "REST API endpoints",
                    "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                    "JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è"
                ],
                size_estimate=300,
                priority=3,
                migration_status="future"
            )
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        all_presentation_components = cli_components + web_components
        for context in self.plan.contexts.values():
            context.components.extend(all_presentation_components)
    
    def _setup_dependency_rules(self) -> None:
        """üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.plan.dependency_rules = {
            # Core —Å–ª–æ–π - –Ω–∏ –æ—Ç –∫–æ–≥–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç
            "core": [],
            
            # Domain —Å–ª–æ–π - –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç Core
            "domain": ["core"],
            
            # Application —Å–ª–æ–π - –æ—Ç Domain –∏ Core
            "application": ["domain", "core"],
            
            # Infrastructure —Å–ª–æ–π - –æ—Ç Application, Domain –∏ Core
            "infrastructure": ["application", "domain", "core"],
            
            # Presentation —Å–ª–æ–π - –æ—Ç –≤—Å–µ—Ö
            "presentation": ["infrastructure", "application", "domain", "core"]
        }
    
    def _setup_error_handling(self) -> None:
        """üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.plan.error_handling_strategy = {
            "global_exception_handler": {
                "file": "src/core/error_handler.py",
                "responsibilities": [
                    "–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
                    "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"
                ]
            },
            "domain_errors": {
                "trading_errors": "src/domain/trading/exceptions.py",
                "risk_errors": "src/domain/risk/exceptions.py",
                "market_errors": "src/domain/market/exceptions.py"
            },
            "infrastructure_errors": {
                "api_errors": "src/infrastructure/api/exceptions.py",
                "persistence_errors": "src/infrastructure/persistence/exceptions.py"
            },
            "error_recovery": {
                "retry_policies": "Exponential backoff –¥–ª—è API",
                "circuit_breaker": "–ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö API",
                "fallback_strategies": "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ backup –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
            }
        }
    
    def _configure_dependency_injection(self) -> None:
        """üíâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Dependency Injection"""
        self.plan.di_configuration = {
            "container_location": "src/core/di_container.py",
            "registration_strategy": "Decorator-based auto-registration",
            "lifetimes": {
                "singleton": [
                    "IExchangeAPI", "IConfigProvider", "ILogger",
                    "IRateLimiter", "ICacheService"
                ],
                "scoped": [
                    "ITradingService", "IRiskManager", "IPositionService"
                ],
                "transient": [
                    "IValidator", "IMapper", "IEventHandler"
                ]
            },
            "configuration_files": {
                "development": "src/config/di_dev.json",
                "production": "src/config/di_prod.json",
                "testing": "src/config/di_test.json"
            },
            "bootstrap_sequence": [
                "1. Load configuration",
                "2. Register infrastructure services",
                "3. Register domain services", 
                "4. Register application services",
                "5. Register presentation controllers",
                "6. Validate dependencies",
                "7. Start services"
            ]
        }
    
    def generate_migration_timeline(self) -> Dict[str, Any]:
        """üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        high_priority = []
        medium_priority = []
        low_priority = []
        
        for context in self.plan.contexts.values():
            for component in context.components:
                if component.priority == 1:
                    high_priority.append(component)
                elif component.priority == 2:
                    medium_priority.append(component)
                else:
                    low_priority.append(component)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_components = []
        seen = set()
        for comp_list in [high_priority, medium_priority, low_priority]:
            for comp in comp_list:
                if comp.name not in seen:
                    all_components.append(comp)
                    seen.add(comp.name)
        
        return {
            "phase_1_core": {
                "duration_days": 2,
                "components": [c.name for c in all_components if c.layer == LayerType.CORE],
                "deliverables": [
                    "–í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã",
                    "–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã",
                    "–°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞"
                ]
            },
            "phase_2_domain": {
                "duration_days": 3,
                "components": [c.name for c in all_components if c.layer == LayerType.DOMAIN],
                "deliverables": [
                    "–î–æ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã",
                    "–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞",
                    "Unit —Ç–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã"
                ]
            },
            "phase_3_application": {
                "duration_days": 2,
                "components": [c.name for c in all_components if c.layer == LayerType.APPLICATION],
                "deliverables": [
                    "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã",
                    "Command/Query handlers –≥–æ—Ç–æ–≤—ã",
                    "Integration —Ç–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã"
                ]
            },
            "phase_4_infrastructure": {
                "duration_days": 3,
                "components": [c.name for c in all_components if c.layer == LayerType.INFRASTRUCTURE],
                "deliverables": [
                    "API –∞–¥–∞–ø—Ç–µ—Ä—ã –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã",
                    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", 
                    "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω"
                ]
            },
            "phase_5_presentation": {
                "duration_days": 1,
                "components": [c.name for c in all_components if c.layer == LayerType.PRESENTATION],
                "deliverables": [
                    "CLI –æ–±–Ω–æ–≤–ª–µ–Ω",
                    "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    "E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
                ]
            },
            "total_estimate": {
                "days": 11,
                "total_components": len(all_components),
                "total_lines_estimate": sum(c.size_estimate for c in all_components)
            }
        }
    
    def save_plan(self, output_file: str = "architecture_plan.json") -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        plan_data = {
            "contexts": {},
            "dependency_rules": self.plan.dependency_rules,
            "di_configuration": self.plan.di_configuration,
            "error_handling_strategy": self.plan.error_handling_strategy,
            "migration_timeline": self.generate_migration_timeline()
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        for name, context in self.plan.contexts.items():
            components_data = []
            seen_components = set()
            
            for component in context.components:
                if component.name in seen_components:
                    continue
                seen_components.add(component.name)
                
                components_data.append({
                    "name": component.name,
                    "layer": component.layer.value,
                    "component_type": component.component_type.value,
                    "file_path": component.file_path,
                    "dependencies": list(component.dependencies),
                    "interfaces": list(component.interfaces),
                    "responsibilities": component.responsibilities,
                    "size_estimate": component.size_estimate,
                    "priority": component.priority,
                    "migration_status": component.migration_status,
                    "legacy_mapping": component.legacy_mapping
                })
            
            plan_data["contexts"][name] = {
                "name": context.name,
                "description": context.description,
                "components": components_data,
                "interfaces": list(context.interfaces),
                "events": list(context.events)
            }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(plan_data, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    planner = ArchitecturePlanner()
    plan = planner.create_clean_architecture_plan()
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ü–õ–ê–ù")
    print("="*60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
    print(f"üìã Bounded Contexts: {len(plan.contexts)}")
    for name, context in plan.contexts.items():
        unique_components = len(set(c.name for c in context.components))
        print(f"  üóÇÔ∏è {name}: {unique_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ—è–º
    all_components = []
    seen = set()
    for context in plan.contexts.values():
        for comp in context.components:
            if comp.name not in seen:
                all_components.append(comp)
                seen.add(comp.name)
    
    layer_stats = {}
    for comp in all_components:
        layer = comp.layer.value
        if layer not in layer_stats:
            layer_stats[layer] = 0
        layer_stats[layer] += 1
    
    print(f"\nüìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º:")
    for layer, count in layer_stats.items():
        print(f"  üèóÔ∏è {layer}: {count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
    timeline = planner.generate_migration_timeline()
    print(f"\nüìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞:")
    print(f"  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {timeline['total_estimate']['days']} –¥–Ω–µ–π")
    print(f"  üì¶ –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {timeline['total_estimate']['total_components']}")
    print(f"  üìè –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {timeline['total_estimate']['total_lines_estimate']}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    priority_stats = {}
    for comp in all_components:
        priority = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {comp.priority}"
        if priority not in priority_stats:
            priority_stats[priority] = 0
        priority_stats[priority] += 1
    
    print(f"\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:")
    for priority, count in priority_stats.items():
        print(f"  {priority}: {count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
    planner.save_plan()
    
    print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"  1. –ò–∑—É—á–∏—Ç–µ architecture_plan.json")
    print(f"  2. –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    print(f"  3. –ù–∞—á–Ω–∏—Ç–µ —Å Core —Å–ª–æ—è (–≠—Ç–∞–ø 2)")
    
    return plan


if __name__ == "__main__":
    main()