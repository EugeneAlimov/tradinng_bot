#!/usr/bin/env python3
"""üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""

import json
import os
import glob
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import logging


@dataclass
class TradeProfitAnalysis:
    """üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–æ–∫"""
    total_profit: float
    profitable_trades: int
    losing_trades: int
    success_rate: float
    avg_profit_per_trade: float
    best_trade: float
    worst_trade: float


class TradesAnalyzer:
    """üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self):
        self.setup_logging()
        self.logger.info("üìä TradesAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger(__name__)
    
    def load_trades_from_json(self, filename: str) -> List[Dict[str, Any]]:
        """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if 'trades' in data:
                trades = data['trades']
            elif isinstance(data, list):
                trades = data
            else:
                self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: {filename}")
                return []
            
            self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫ –∏–∑ {filename}")
            return trades
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return []
    
    def find_latest_trades_file(self, directory: str = 'data') -> Optional[str]:
        """üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫"""
        
        pattern = os.path.join(directory, 'trades_history_*.json')
        files = glob.glob(pattern)
        
        if not files:
            self.logger.warning("‚ö†Ô∏è –§–∞–π–ª—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        latest_file = max(files, key=os.path.getctime)
        self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {latest_file}")
        
        return latest_file
    
    def analyze_profit_loss(self, trades: List[Dict[str, Any]]) -> TradeProfitAnalysis:
        """üí∞ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤"""
        
        if not trades:
            return TradeProfitAnalysis(0, 0, 0, 0, 0, 0, 0)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º –∏ –ø—Ä–æ–¥–∞–∂–∞–º
        buys = [t for t in trades if t.get('type') == 'buy']
        sells = [t for t in trades if t.get('type') == 'sell']
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        if not buys or not sells:
            self.logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ P&L")
            return TradeProfitAnalysis(0, 0, 0, 0, 0, 0, 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        avg_buy_price = sum(float(t.get('price', 0)) for t in buys) / len(buys)
        avg_sell_price = sum(float(t.get('price', 0)) for t in sells) / len(sells)
        
        # –û–±—â–∏–µ –æ–±—ä–µ–º—ã
        total_buy_volume = sum(float(t.get('quantity', 0)) for t in buys)
        total_sell_volume = sum(float(t.get('quantity', 0)) for t in sells)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        min_volume = min(total_buy_volume, total_sell_volume)
        profit = min_volume * (avg_sell_price - avg_buy_price)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        profitable = sum(1 for t in sells if float(t.get('price', 0)) > avg_buy_price)
        losing = len(sells) - profitable
        
        return TradeProfitAnalysis(
            total_profit=profit,
            profitable_trades=profitable,
            losing_trades=losing,
            success_rate=(profitable / len(sells) * 100) if sells else 0,
            avg_profit_per_trade=profit / len(sells) if sells else 0,
            best_trade=max(float(t.get('price', 0)) - avg_buy_price for t in sells) * max(float(t.get('quantity', 0)) for t in sells),
            worst_trade=min(float(t.get('price', 0)) - avg_buy_price for t in sells) * min(float(t.get('quantity', 0)) for t in sells)
        )
    
    def analyze_time_patterns(self, trades: List[Dict[str, Any]]) -> Dict[str, Any]:
        """‚è∞ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        
        if not trades:
            return {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
        hourly_activity = {}
        daily_activity = {}
        monthly_activity = {}
        
        for trade in trades:
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                date_str = trade.get('date', '')
                date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00').replace(' ', 'T'))
                
                # –ü–æ —á–∞—Å–∞–º
                hour = date_obj.hour
                hourly_activity[hour] = hourly_activity.get(hour, 0) + 1
                
                # –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                weekday = date_obj.strftime('%A')
                daily_activity[weekday] = daily_activity.get(weekday, 0) + 1
                
                # –ü–æ –º–µ—Å—è—Ü–∞–º
                month = date_obj.strftime('%Y-%m')
                monthly_activity[month] = monthly_activity.get(month, 0) + 1
                
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {date_str}: {e}")
                continue
        
        return {
            'hourly_activity': hourly_activity,
            'daily_activity': daily_activity,
            'monthly_activity': monthly_activity,
            'most_active_hour': max(hourly_activity.items(), key=lambda x: x[1]) if hourly_activity else None,
            'most_active_day': max(daily_activity.items(), key=lambda x: x[1]) if daily_activity else None
        }
    
    def analyze_price_movements(self, trades: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üìà –ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω"""
        
        if not trades:
            return {}
        
        prices = [float(trade.get('price', 0)) for trade in trades if trade.get('price')]
        
        if not prices:
            return {}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_trades = sorted(trades, key=lambda t: t.get('timestamp', 0))
        sorted_prices = [float(t.get('price', 0)) for t in sorted_trades if t.get('price')]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        price_changes = []
        for i in range(1, len(sorted_prices)):
            change = (sorted_prices[i] - sorted_prices[i-1]) / sorted_prices[i-1] * 100
            price_changes.append(change)
        
        return {
            'min_price': min(prices),
            'max_price': max(prices),
            'avg_price': sum(prices) / len(prices),
            'price_range': max(prices) - min(prices),
            'volatility': sum(abs(change) for change in price_changes) / len(price_changes) if price_changes else 0,
            'total_price_change': ((sorted_prices[-1] - sorted_prices[0]) / sorted_prices[0] * 100) if len(sorted_prices) > 1 else 0,
            'biggest_price_jump': max(price_changes) if price_changes else 0,
            'biggest_price_drop': min(price_changes) if price_changes else 0
        }
    
    def create_detailed_report(self, trades: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        if not trades:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        buys = [t for t in trades if t.get('type') == 'buy']
        sells = [t for t in trades if t.get('type') == 'sell']
        
        # –ê–Ω–∞–ª–∏–∑—ã
        profit_analysis = self.analyze_profit_loss(trades)
        time_patterns = self.analyze_time_patterns(trades)
        price_movements = self.analyze_price_movements(trades)
        
        # –ö–æ–º–∏—Å—Å–∏–∏
        total_commission = sum(float(t.get('commission', 0)) for t in trades)
        
        report = {
            'analysis_date': datetime.now().isoformat(),
            'data_summary': {
                'total_trades': len(trades),
                'buy_trades': len(buys),
                'sell_trades': len(sells),
                'date_range': {
                    'first_trade': min(trades, key=lambda t: t.get('timestamp', 0)).get('date') if trades else None,
                    'last_trade': max(trades, key=lambda t: t.get('timestamp', 0)).get('date') if trades else None
                }
            },
            'volume_analysis': {
                'total_crypto_volume': sum(float(t.get('quantity', 0)) for t in trades),
                'total_fiat_volume': sum(float(t.get('amount', 0)) for t in trades),
                'buy_volume': sum(float(t.get('quantity', 0)) for t in buys),
                'sell_volume': sum(float(t.get('quantity', 0)) for t in sells),
                'avg_trade_size': sum(float(t.get('quantity', 0)) for t in trades) / len(trades)
            },
            'profit_analysis': {
                'estimated_profit_eur': profit_analysis.total_profit,
                'profitable_trades': profit_analysis.profitable_trades,
                'losing_trades': profit_analysis.losing_trades,
                'success_rate_percent': profit_analysis.success_rate,
                'avg_profit_per_trade': profit_analysis.avg_profit_per_trade,
                'best_trade_profit': profit_analysis.best_trade,
                'worst_trade_loss': profit_analysis.worst_trade
            },
            'cost_analysis': {
                'total_commission': total_commission,
                'avg_commission_per_trade': total_commission / len(trades),
                'commission_as_percent_of_volume': (total_commission / sum(float(t.get('amount', 0)) for t in trades) * 100) if trades else 0
            },
            'price_analysis': price_movements,
            'time_patterns': time_patterns,
            'trading_frequency': {
                'avg_trades_per_day': len(trades) / max(1, len(time_patterns.get('daily_activity', {}))),
                'most_active_period': time_patterns.get('most_active_hour'),
                'most_active_day': time_patterns.get('most_active_day')
            }
        }
        
        return report
    
    def save_analysis_report(self, report: Dict[str, Any], filename: str = None) -> str:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"data/trades_analysis_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üíæ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None
    
    def print_summary_report(self, report: Dict[str, Any]):
        """üìã –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        if 'error' in report:
            print(f"‚ùå {report['error']}")
            return
        
        print("\nüìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –°–î–ï–õ–ö–ê–ú")
        print("=" * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = report['data_summary']
        print(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {data['total_trades']}")
        print(f"üõí –ü–æ–∫—É–ø–æ–∫: {data['buy_trades']}")
        print(f"üíé –ü—Ä–æ–¥–∞–∂: {data['sell_trades']}")
        
        if data['date_range']['first_trade'] and data['date_range']['last_trade']:
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {data['date_range']['first_trade']} - {data['date_range']['last_trade']}")
        
        # –û–±—ä–µ–º—ã
        volumes = report['volume_analysis']
        print(f"\nüí∞ –û–ë–™–ï–ú–´:")
        print(f"   –ö—Ä–∏–ø—Ç–æ: {volumes['total_crypto_volume']:.2f}")
        print(f"   –§–∏–∞—Ç: {volumes['total_fiat_volume']:.2f} EUR")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {volumes['avg_trade_size']:.2f}")
        
        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        profit = report['profit_analysis']
        print(f"\nüìà –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–¨:")
        print(f"   –†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit['estimated_profit_eur']:.2f} EUR")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profit['profitable_trades']}")
        print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profit['losing_trades']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {profit['success_rate_percent']:.1f}%")
        
        # –ó–∞—Ç—Ä–∞—Ç—ã
        costs = report['cost_analysis']
        print(f"\nüí∏ –ó–ê–¢–†–ê–¢–´:")
        print(f"   –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {costs['total_commission']:.4f} EUR")
        print(f"   –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: {costs['avg_commission_per_trade']:.4f} EUR")
        print(f"   –ö–æ–º–∏—Å—Å–∏–∏ –æ—Ç –æ–±–æ—Ä–æ—Ç–∞: {costs['commission_as_percent_of_volume']:.3f}%")
        
        # –¶–µ–Ω—ã
        prices = report['price_analysis']
        if prices:
            print(f"\nüìä –¶–ï–ù–´:")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {prices['min_price']:.8f} - {prices['max_price']:.8f}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {prices['avg_price']:.8f}")
            print(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {prices['volatility']:.2f}%")
            print(f"   –û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {prices['total_price_change']:.2f}%")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        time_patterns = report['time_patterns']
        if time_patterns.get('most_active_hour'):
            hour, count = time_patterns['most_active_hour']
            print(f"\n‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨:")
            print(f"   –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {hour}:00 ({count} —Å–¥–µ–ª–æ–∫)")
        
        if time_patterns.get('most_active_day'):
            day, count = time_patterns['most_active_day']
            print(f"   –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {day} ({count} —Å–¥–µ–ª–æ–∫)")
        
        # –ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        frequency = report['trading_frequency']
        print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {frequency['avg_trades_per_day']:.1f}")


def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üìä –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö")
    print("=" * 40)
    
    try:
        analyzer = TradesAnalyzer()
        
        # –ò—â–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫...")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –º—ã –Ω–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        custom_file = input("üìÅ –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É (Enter –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞): ").strip()
        
        if custom_file and os.path.exists(custom_file):
            json_file = custom_file
        else:
            json_file = analyzer.find_latest_trades_file()
            
            if not json_file:
                print("‚ùå –§–∞–π–ª—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ trades_history_fetcher.py")
                return
        
        print(f"üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {json_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        trades = analyzer.load_trades_from_json(json_file)
        
        if not trades:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–¥–µ–ª–∫–∏")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
        
        # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        print("üîÑ –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
        report = analyzer.create_detailed_report(trades)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        analyzer.print_summary_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = analyzer.save_analysis_report(report)
        
        if report_file:
            print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        print(f"\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò:")
        print(f"1. –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –¥–ª—è Excel")
        print(f"2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
        print(f"3. –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö/—Ö—É–¥—à–∏—Ö —Å–¥–µ–ª–æ–∫")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3, Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()
        
        if choice == "1":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            try:
                import csv
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                csv_filename = f"data/trades_analysis_summary_{timestamp}.csv"
                
                with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile)
                    
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    writer.writerow(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'])
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    data = report['data_summary']
                    writer.writerow(['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', data['total_trades']])
                    writer.writerow(['–ü–æ–∫—É–ø–æ–∫', data['buy_trades']])
                    writer.writerow(['–ü—Ä–æ–¥–∞–∂', data['sell_trades']])
                    
                    # –û–±—ä–µ–º—ã
                    volumes = report['volume_analysis']
                    writer.writerow(['–û–±—â–∏–π –æ–±—ä–µ–º –∫—Ä–∏–ø—Ç–æ', f"{volumes['total_crypto_volume']:.2f}"])
                    writer.writerow(['–û–±—â–∏–π –æ–±—ä–µ–º —Ñ–∏–∞—Ç', f"{volumes['total_fiat_volume']:.2f} EUR"])
                    
                    # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
                    profit = report['profit_analysis']
                    writer.writerow(['–†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', f"{profit['estimated_profit_eur']:.2f} EUR"])
                    writer.writerow(['–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏', f"{profit['success_rate_percent']:.1f}%"])
                    
                    # –ó–∞—Ç—Ä–∞—Ç—ã
                    costs = report['cost_analysis']
                    writer.writerow(['–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏', f"{costs['total_commission']:.4f} EUR"])
                
                print(f"üìä CSV –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_filename}")
                
            except ImportError:
                print("‚ö†Ô∏è CSV –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {e}")
        
        elif choice == "2":
            # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∏–æ–¥–∞
            print("üìÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:")
            try:
                days_back = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7): ") or "7")
                cutoff_date = datetime.now() - timedelta(days=days_back)
                
                recent_trades = [
                    t for t in trades 
                    if datetime.fromtimestamp(t.get('timestamp', 0)) >= cutoff_date
                ]
                
                if recent_trades:
                    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π:")
                    period_report = analyzer.create_detailed_report(recent_trades)
                    analyzer.print_summary_report(period_report)
                else:
                    print(f"‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
                    
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
        
        elif choice == "3":
            # –õ—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
            print("üéØ –ü–æ–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
            sorted_by_price = sorted(trades, key=lambda t: float(t.get('price', 0)))
            
            print(f"\nüíé –°–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è —Å–¥–µ–ª–∫–∞:")
            expensive = sorted_by_price[-1]
            print(f"   –¶–µ–Ω–∞: {expensive.get('price')} | –î–∞—Ç–∞: {expensive.get('date')} | –¢–∏–ø: {expensive.get('type')}")
            
            print(f"\nüõí –°–∞–º–∞—è –¥–µ—à–µ–≤–∞—è —Å–¥–µ–ª–∫–∞:")
            cheap = sorted_by_price[0]
            print(f"   –¶–µ–Ω–∞: {cheap.get('price')} | –î–∞—Ç–∞: {cheap.get('date')} | –¢–∏–ø: {cheap.get('type')}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
            sorted_by_volume = sorted(trades, key=lambda t: float(t.get('quantity', 0)))
            
            print(f"\nüìà –°–∞–º–∞—è –∫—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞:")
            largest = sorted_by_volume[-1]
            print(f"   –û–±—ä–µ–º: {largest.get('quantity')} | –¶–µ–Ω–∞: {largest.get('price')} | –î–∞—Ç–∞: {largest.get('date')}")
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")


if __name__ == "__main__":
    main()