import time
import logging
from typing import Dict, List, Optional
from collections import deque
from threading import Lock
from dataclasses import dataclass
from datetime import datetime, timedelta


@dataclass
class APILimits:
    """üìä –õ–∏–º–∏—Ç—ã API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    requests_per_second: int
    requests_per_minute: int
    requests_per_hour: int
    trading_requests_per_minute: int = 10  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π


class RateLimiter:
    """‚è±Ô∏è –£–º–Ω—ã–π rate limiter —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, api_limits: APILimits):
        self.limits = api_limits
        self.logger = logging.getLogger(__name__)

        # –¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.requests_per_second = deque(maxlen=api_limits.requests_per_second * 2)
        self.requests_per_minute = deque(maxlen=api_limits.requests_per_minute * 2)
        self.requests_per_hour = deque(maxlen=api_limits.requests_per_hour * 2)
        self.trading_requests = deque(maxlen=api_limits.trading_requests_per_minute * 2)

        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        self._lock = Lock()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = 0
        self.total_waits = 0
        self.total_wait_time = 0.0
        self.last_request_time = 0.0

        self.logger.info("‚è±Ô∏è Rate Limiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üìä –õ–∏–º–∏—Ç—ã: {api_limits.requests_per_second}/—Å–µ–∫, {api_limits.requests_per_minute}/–º–∏–Ω")
        self.logger.info(f"   üîÑ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {api_limits.trading_requests_per_minute}/–º–∏–Ω")

    def wait_if_needed(self, request_type: str = 'general') -> float:
        """‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç—ã"""

        with self._lock:
            current_time = time.time()
            wait_time = 0.0

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            self._cleanup_old_requests(current_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            wait_time = self._calculate_wait_time(current_time, request_type)

            if wait_time > 0:
                self.logger.info(f"‚è≥ Rate limit: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f}—Å –¥–ª—è {request_type}")
                self.total_waits += 1
                self.total_wait_time += wait_time

                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º lock –ø–µ—Ä–µ–¥ —Å–Ω–æ–º
                self._lock.release()
                time.sleep(wait_time)
                self._lock.acquire()

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                current_time = time.time()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            self._register_request(current_time, request_type)

            return wait_time

    def _cleanup_old_requests(self, current_time: float):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""

        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
        while self.requests_per_second and current_time - self.requests_per_second[0] >= 1.0:
            self.requests_per_second.popleft()

        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        while self.requests_per_minute and current_time - self.requests_per_minute[0] >= 60.0:
            self.requests_per_minute.popleft()

        # –û—á–∏—â–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        while self.requests_per_hour and current_time - self.requests_per_hour[0] >= 3600.0:
            self.requests_per_hour.popleft()

        # –û—á–∏—â–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        while self.trading_requests and current_time - self.trading_requests[0][0] >= 60.0:
            self.trading_requests.popleft()

    def _calculate_wait_time(self, current_time: float, request_type: str) -> float:
        """‚è∞ –†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""

        max_wait = 0.0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞ —Å–µ–∫—É–Ω–¥—É
        if len(self.requests_per_second) >= self.limits.requests_per_second:
            oldest_request = self.requests_per_second[0]
            wait_for_second = 1.0 - (current_time - oldest_request)
            max_wait = max(max_wait, wait_for_second)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞ –º–∏–Ω—É—Ç—É
        if len(self.requests_per_minute) >= self.limits.requests_per_minute:
            oldest_request = self.requests_per_minute[0]
            wait_for_minute = 60.0 - (current_time - oldest_request)
            max_wait = max(max_wait, wait_for_minute)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞ —á–∞—Å
        if len(self.requests_per_hour) >= self.limits.requests_per_hour:
            oldest_request = self.requests_per_hour[0]
            wait_for_hour = 3600.0 - (current_time - oldest_request)
            max_wait = max(max_wait, wait_for_hour)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if request_type in ['order_create', 'order_cancel', 'trading']:
            trading_count = len([req for req in self.trading_requests
                                 if req[1] in ['order_create', 'order_cancel', 'trading']])

            if trading_count >= self.limits.trading_requests_per_minute:
                oldest_trading = min(self.trading_requests, key=lambda x: x[0])[0]
                wait_for_trading = 60.0 - (current_time - oldest_trading)
                max_wait = max(max_wait, wait_for_trading)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (100ms)
        if self.last_request_time > 0:
            min_interval = 0.1
            since_last = current_time - self.last_request_time
            if since_last < min_interval:
                max_wait = max(max_wait, min_interval - since_last)

        return max(0.0, max_wait)

    def _register_request(self, current_time: float, request_type: str):
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""

        self.requests_per_second.append(current_time)
        self.requests_per_minute.append(current_time)
        self.requests_per_hour.append(current_time)

        if request_type in ['order_create', 'order_cancel', 'trading']:
            self.trading_requests.append((current_time, request_type))

        self.total_requests += 1
        self.last_request_time = current_time

    def get_stats(self) -> Dict[str, any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiter"""

        current_time = time.time()

        # –û—á–∏—â–∞–µ–º –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._cleanup_old_requests(current_time)

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        requests_last_second = len(self.requests_per_second)
        requests_last_minute = len(self.requests_per_minute)
        requests_last_hour = len(self.requests_per_hour)
        trading_requests_minute = len([req for req in self.trading_requests
                                       if req[1] in ['order_create', 'order_cancel', 'trading']])

        # –ó–∞–≥—Ä—É–∑–∫–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –ª–∏–º–∏—Ç–∞)
        load_per_second = (requests_last_second / self.limits.requests_per_second) * 100
        load_per_minute = (requests_last_minute / self.limits.requests_per_minute) * 100
        load_per_hour = (requests_last_hour / self.limits.requests_per_hour) * 100

        avg_wait_time = self.total_wait_time / max(1, self.total_waits)

        return {
            'total_requests': self.total_requests,
            'total_waits': self.total_waits,
            'total_wait_time': self.total_wait_time,
            'avg_wait_time': avg_wait_time,
            'requests_last_second': requests_last_second,
            'requests_last_minute': requests_last_minute,
            'requests_last_hour': requests_last_hour,
            'trading_requests_last_minute': trading_requests_minute,
            'load_percentage': {
                'per_second': load_per_second,
                'per_minute': load_per_minute,
                'per_hour': load_per_hour
            },
            'limits': {
                'per_second': self.limits.requests_per_second,
                'per_minute': self.limits.requests_per_minute,
                'per_hour': self.limits.requests_per_hour,
                'trading_per_minute': self.limits.trading_requests_per_minute
            }
        }

    def log_stats(self):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.get_stats()

        self.logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê RATE LIMITER:")
        self.logger.info(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
        self.logger.info(f"   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–π: {stats['total_waits']}")
        self.logger.info(f"   üïí –°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ: {stats['avg_wait_time']:.2f}—Å")

        self.logger.info(f"   üìä –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:")
        self.logger.info(
            f"      –ó–∞ —Å–µ–∫—É–Ω–¥—É: {stats['requests_last_second']}/{stats['limits']['per_second']} ({stats['load_percentage']['per_second']:.1f}%)")
        self.logger.info(
            f"      –ó–∞ –º–∏–Ω—É—Ç—É: {stats['requests_last_minute']}/{stats['limits']['per_minute']} ({stats['load_percentage']['per_minute']:.1f}%)")
        self.logger.info(
            f"      –¢–æ—Ä–≥–æ–≤—ã—Ö/–º–∏–Ω: {stats['trading_requests_last_minute']}/{stats['limits']['trading_per_minute']}")

        if stats['load_percentage']['per_minute'] > 80:
            self.logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ API: {stats['load_percentage']['per_minute']:.1f}%")


class ExmoRateLimiter(RateLimiter):
    """üîÑ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π rate limiter –¥–ª—è EXMO API"""

    def __init__(self):
        # –õ–∏–º–∏—Ç—ã EXMO (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        exmo_limits = APILimits(
            requests_per_second=8,  # EXMO –ø–æ–∑–≤–æ–ª—è–µ—Ç 10/—Å–µ–∫, –±–µ—Ä–µ–º 8 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            requests_per_minute=300,  # EXMO –ø–æ–∑–≤–æ–ª—è–µ—Ç 600/–º–∏–Ω, –±–µ—Ä–µ–º 300
            requests_per_hour=10000,  # EXMO –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ–ª—å—à–µ, –Ω–æ –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
            trading_requests_per_minute=20,  # –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—â–µ –±–æ–ª–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
        )

        super().__init__(exmo_limits)

    def wait_for_trading_request(self) -> float:
        """üîÑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return self.wait_if_needed('trading')

    def wait_for_market_data(self) -> float:
        """üìä –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.wait_if_needed('market_data')

    def wait_for_account_data(self) -> float:
        """üë§ –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return self.wait_if_needed('account')


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
class RateLimitedAPIClient:
    """üîó API –∫–ª–∏–µ–Ω—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º rate limiting"""

    def __init__(self, original_api_client):
        self.api = original_api_client
        self.rate_limiter = ExmoRateLimiter()
        self.logger = logging.getLogger(__name__)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.blocked_requests = 0
        self.total_wait_time = 0.0

    def get_user_info(self):
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_account_data()
        self.total_wait_time += wait_time

        return self.api.get_user_info()

    def get_open_orders(self):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_account_data()
        self.total_wait_time += wait_time

        return self.api.get_open_orders()

    def create_order(self, pair: str, quantity: float, price: float, order_type: str):
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_trading_request()
        self.total_wait_time += wait_time

        if wait_time > 5.0:  # –ï—Å–ª–∏ –∂–¥–µ–º –±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
            self.blocked_requests += 1
            self.logger.warning(f"‚ö†Ô∏è –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {wait_time:.2f}—Å")

        return self.api.create_order(pair, quantity, price, order_type)

    def cancel_order(self, order_id: int):
        """‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_trading_request()
        self.total_wait_time += wait_time

        return self.api.cancel_order(order_id)

    def get_trades(self, pair: str):
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_market_data()
        self.total_wait_time += wait_time

        return self.api.get_trades(pair)

    def get_user_trades(self, pair: str, limit: int = 100):
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_account_data()
        self.total_wait_time += wait_time

        return self.api.get_user_trades(pair, limit)

    def get_pair_settings(self):
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä —Å rate limiting"""
        wait_time = self.rate_limiter.wait_for_market_data()
        self.total_wait_time += wait_time

        return self.api.get_pair_settings()

    def check_connection(self) -> bool:
        """üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å rate limiting"""
        try:
            wait_time = self.rate_limiter.wait_for_market_data()
            self.total_wait_time += wait_time

            return self.api.check_connection()
        except Exception:
            return False

    def get_rate_limit_stats(self) -> Dict[str, any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting"""
        limiter_stats = self.rate_limiter.get_stats()

        return {
            **limiter_stats,
            'blocked_requests': self.blocked_requests,
            'client_total_wait_time': self.total_wait_time,
            'efficiency': {
                'wait_time_per_request': self.total_wait_time / max(1, limiter_stats['total_requests']),
                'block_rate': (self.blocked_requests / max(1, limiter_stats['total_requests'])) * 100
            }
        }

    def log_rate_limit_stats(self):
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.rate_limiter.log_stats()

        stats = self.get_rate_limit_stats()
        self.logger.info(f"üîó –°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ö–õ–ò–ï–ù–¢–ê:")
        self.logger.info(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['blocked_requests']}")
        self.logger.info(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {stats['client_total_wait_time']:.1f}—Å")
        self.logger.info(f"   üìä –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {stats['efficiency']['wait_time_per_request']:.2f}—Å")
        self.logger.info(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats['efficiency']['block_rate']:.1f}%")

    def close(self):
        """üîö –ó–∞–∫—Ä—ã—Ç–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        self.log_rate_limit_stats()
        if hasattr(self.api, 'close'):
            self.api.close()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RATE LIMITER")
    print("=" * 40)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–∏–º–∏—Ç–µ—Ä
    test_limits = APILimits(
        requests_per_second=2,
        requests_per_minute=10,
        requests_per_hour=100,
        trading_requests_per_minute=3
    )

    limiter = RateLimiter(test_limits)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(5):
        start_time = time.time()
        wait_time = limiter.wait_if_needed('general')
        end_time = time.time()

        print(f"–ó–∞–ø—Ä–æ—Å {i + 1}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f}—Å, —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è {end_time - start_time:.2f}—Å")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for i in range(4):
        start_time = time.time()
        wait_time = limiter.wait_if_needed('trading')
        end_time = time.time()

        print(f"–¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å {i + 1}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.2f}—Å")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    limiter.log_stats()
