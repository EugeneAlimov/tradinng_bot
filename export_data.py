import json
import pandas as pd
import os
from datetime import datetime
from analytics_system import TradingAnalytics


def export_analytics_to_csv(data_dir: str = 'data', output_file: str = None):
    """üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ CSV –¥–ª—è Excel"""
    analytics = TradingAnalytics(data_dir)

    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
        analysis = analytics.analyze_trades_performance(30)  # –ó–∞ –º–µ—Å—è—Ü

        if not analysis.get('detailed_trades'):
            print("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return None

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(analysis['detailed_trades'])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df['profitable'] = df['profit_percent'] > 0
        df['entry_date'] = pd.to_datetime(df['entry_time']).dt.date
        df['entry_hour'] = pd.to_datetime(df['entry_time']).dt.hour
        df['hold_days'] = df['hold_time_hours'] / 24

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        if output_file is None:
            output_file = f"data/analytics_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_file}")

        # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
        print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df)} —Å–¥–µ–ª–æ–∫")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {df['net_profit'].sum():.4f} EUR")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {df['profitable'].sum()}/{len(df)} ({df['profitable'].mean() * 100:.1f}%)")

        return output_file

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return None


def export_all_data():
    print("üì§ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•:")
    print("=" * 30)

    # 1. –≠–∫—Å–ø–æ—Ä—Ç —Å–¥–µ–ª–æ–∫ –≤ CSV
    csv_file = export_analytics_to_csv()
    if csv_file:
        print(f"‚úÖ –°–¥–µ–ª–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {csv_file}")

    # 2. –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    today = datetime.now().strftime('%Y%m%d')
    stats_file = f'data/analytics/runtime_stats_{today}.json'

    if os.path.exists(stats_file):
        # –ß–∏—Ç–∞–µ–º JSON –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        stats_data = []
        with open(stats_file, 'r') as f:
            for line in f:
                try:
                    stats_data.append(json.loads(line.strip()))
                except:
                    continue

        if stats_data:
            df = pd.DataFrame(stats_data)
            stats_csv = f'data/stats_export_{today}.csv'
            df.to_csv(stats_csv, index=False)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {stats_csv}")
        else:
            print("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    else:
        print("üìù –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


if __name__ == "__main__":
    export_all_data()
