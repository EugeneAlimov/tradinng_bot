# emergency_exit_manager.py
"""
üö® –ü–ê–¢–ß 1: –°–∏—Å—Ç–µ–º–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ" –±–æ—Ç–∞ –≤ —É–±—ã—Ç–∫–µ
"""

import time
import logging
from typing import Dict, Any, Tuple, Optional
from datetime import datetime, timedelta


class EmergencyExitManager:
    """üö® –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
    
    def __init__(self, config, api_service, position_manager):
        self.config = config
        self.api_service = api_service
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)
        
        # üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
        self.CRITICAL_LOSS_THRESHOLD = 0.10    # 10% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫
        self.EMERGENCY_LOSS_THRESHOLD = 0.15   # 15% —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
        self.TIME_BASED_THRESHOLD = 24 * 3600  # 24 —á–∞—Å–∞ –≤ —É–±—ã—Ç–∫–µ
        self.MODERATE_LOSS_TIME = 6 * 3600     # 6 —á–∞—Å–æ–≤ —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞
        
        # üìä –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É–±—ã—Ç–∫–µ
        self.loss_start_time = {}
        
        self.logger.info("üö® EmergencyExitManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫: {self.CRITICAL_LOSS_THRESHOLD*100:.0f}%")
        self.logger.info(f"   üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥: {self.EMERGENCY_LOSS_THRESHOLD*100:.0f}%")
    
    def should_emergency_exit(self, position_data: Dict[str, Any], 
                            current_price: float) -> Tuple[bool, str, float]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        
        if not position_data or position_data['quantity'] == 0:
            return False, "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏", 0.0
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–±—ã—Ç–æ–∫
        avg_price = position_data['avg_price']
        quantity = position_data['quantity']
        current_value = quantity * current_price
        invested_value = quantity * avg_price
        loss_percent = (current_price - avg_price) / avg_price
        
        currency = self.config.CURRENCY_1
        
        # üö® –ö–†–ò–¢–ï–†–ò–ô 1: –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (15%)
        if loss_percent <= -self.EMERGENCY_LOSS_THRESHOLD:
            return True, f"–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–¢–û–ü: —É–±—ã—Ç–æ–∫ {loss_percent*100:.1f}%", 1.0
            
        # üö® –ö–†–ò–¢–ï–†–ò–ô 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫ (10%) + –≤—Ä–µ–º—è
        if loss_percent <= -self.CRITICAL_LOSS_THRESHOLD:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É–±—ã—Ç–∫–µ
            if currency not in self.loss_start_time:
                self.loss_start_time[currency] = time.time()
                self.logger.warning(f"‚è∞ –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–±—ã—Ç–∫–∞: {loss_percent*100:.1f}%")
                
            time_in_loss = time.time() - self.loss_start_time[currency]
            
            if time_in_loss > self.TIME_BASED_THRESHOLD:
                return True, f"–í–†–ï–ú–ï–ù–ù–û–ô –°–¢–û–ü: {loss_percent*100:.1f}% —É–∂–µ {time_in_loss/3600:.1f}—á", 1.0
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ —É–±—ã—Ç–æ–∫ —É–º–µ–Ω—å—à–∏–ª—Å—è
            if currency in self.loss_start_time:
                del self.loss_start_time[currency]
                
        # üö® –ö–†–ò–¢–ï–†–ò–ô 3: –£–º–µ—Ä–µ–Ω–Ω—ã–π —É–±—ã—Ç–æ–∫ (5%) + –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if loss_percent <= -0.05:  # 5%
            if currency not in self.loss_start_time:
                self.loss_start_time[currency] = time.time()
                
            time_in_loss = time.time() - self.loss_start_time[currency]
            
            if time_in_loss > self.MODERATE_LOSS_TIME:
                # –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ 30%
                return True, f"–ß–ê–°–¢–ò–ß–ù–´–ô –í–´–•–û–î: {loss_percent*100:.1f}% –¥–µ—Ä–∂–∏—Ç—Å—è {time_in_loss/3600:.1f}—á", 0.3
                
        return False, "–ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", 0.0
    
    def execute_emergency_exit(self, position_data: Dict[str, Any], 
                             current_price: float, sell_percentage: float, 
                             reason: str) -> Dict[str, Any]:
        """üö® –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        
        try:
            quantity = position_data['quantity']
            sell_quantity = quantity * sell_percentage
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–∫–∏–¥–∫–∞ 0.3%)
            aggressive_price = current_price * 0.997
            
            self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–´–ô –í–´–•–û–î –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
            self.logger.critical(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            self.logger.critical(f"   –ü—Ä–æ–¥–∞–µ–º: {sell_quantity:.6f} –∏–∑ {quantity:.6f} ({sell_percentage*100:.0f}%)")
            self.logger.critical(f"   –¶–µ–Ω–∞: {aggressive_price:.8f} (—Å–∫–∏–¥–∫–∞ 0.3%)")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ API Service
            result = self.api_service.create_sell_order(
                quantity=sell_quantity,
                price=aggressive_price
            )
            
            if result['success']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.position_manager.update_position(
                    currency=self.config.CURRENCY_1,
                    trade_info={
                        'type': 'emergency_exit',
                        'quantity': -sell_quantity,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                        'price': aggressive_price,
                        'reason': reason
                    }
                )
                
                return {
                    'success': True,
                    'action': 'emergency_exit',
                    'quantity_sold': sell_quantity,
                    'price': aggressive_price,
                    'reason': reason,
                    'order_id': result.get('order_id')
                }
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {result.get('error')}")
                return {'success': False, 'error': result.get('error')}
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {e}")
            return {'success': False, 'error': str(e)}
    
    def get_emergency_status(self, position_data: Dict[str, Any], 
                           current_price: float) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
        
        if not position_data or position_data['quantity'] == 0:
            return {'status': 'no_position'}
            
        avg_price = position_data['avg_price']
        loss_percent = (current_price - avg_price) / avg_price
        currency = self.config.CURRENCY_1
        
        status = {
            'loss_percent': loss_percent * 100,
            'is_critical': loss_percent <= -self.CRITICAL_LOSS_THRESHOLD,
            'is_emergency': loss_percent <= -self.EMERGENCY_LOSS_THRESHOLD,
            'time_in_loss': 0
        }
        
        if currency in self.loss_start_time:
            status['time_in_loss'] = time.time() - self.loss_start_time[currency]
            status['time_in_loss_hours'] = status['time_in_loss'] / 3600
            
        return status