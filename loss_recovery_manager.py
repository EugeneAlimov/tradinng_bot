# loss_recovery_manager.py - –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Tuple, Optional
from config import TradingConfig


class LossRecoveryManager:
    """ü©π –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""

    def __init__(self, config: TradingConfig, api_client, position_manager):
        self.config = config
        self.api = api_client
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)

        # üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.dca_loss_threshold = 0.02      # –î–æ–∫—É–ø–∫–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ >2%
        self.dca_max_attempts = 3           # –ú–∞–∫—Å–∏–º—É–º 3 –¥–æ–∫—É–ø–∫–∏
        self.emergency_stop_loss = 0.08     # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å—Ç–æ–ø –ø—Ä–∏ -8%
        self.time_based_stop_hours = 6      # –°—Ç–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
        self.trailing_activation_in_loss = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing –¥–∞–∂–µ –≤ —É–±—ã—Ç–∫–µ

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.dca_attempts = 0
        self.position_start_time = None
        self.last_dca_time = None
        self.min_time_between_dca = 1800    # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –¥–æ–∫—É–ø–∫–∞–º–∏

        self.logger.info("ü©π –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"   DCA –ø—Ä–∏ —É–±—ã—Ç–∫–µ: >{self.dca_loss_threshold*100:.0f}%")
        self.logger.info(f"   –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å—Ç–æ–ø: {self.emergency_stop_loss*100:.0f}%")
        self.logger.info(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–æ–ø: {self.time_based_stop_hours} —á–∞—Å–æ–≤")

    def analyze_loss_situation(self, current_price: float, position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª–∏–∑ —É–±—ã—Ç–æ—á–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""

        if not position_data or position_data.get('quantity', 0) == 0:
            return {'action': 'none', 'reason': '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏'}

        avg_price = position_data.get('avg_price', 0)
        quantity = position_data.get('quantity', 0)

        if avg_price == 0:
            return {'action': 'none', 'reason': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–±—ã—Ç–æ–∫
        loss_percent = (avg_price - current_price) / avg_price
        loss_amount = (avg_price - current_price) * quantity

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if loss_percent > 0.005 and not self.position_start_time:  # >0.5% —É–±—ã—Ç–æ–∫
            self.position_start_time = datetime.now()

        analysis = {
            'current_price': current_price,
            'avg_price': avg_price,
            'quantity': quantity,
            'loss_percent': loss_percent,
            'loss_amount': loss_amount,
            'dca_attempts': self.dca_attempts,
            'time_in_position': self._get_time_in_position(),
            'is_profitable': loss_percent <= 0
        }

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if loss_percent > 0.01:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —É–±—ã—Ç–∫–∏
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —É–±—ã—Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
            self.logger.info(f"   –£–±—ã—Ç–æ–∫: {loss_percent*100:.2f}%")
            self.logger.info(f"   –í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏: {analysis['time_in_position']:.1f} —á–∞—Å–æ–≤")
            self.logger.info(f"   DCA –ø–æ–ø—ã—Ç–æ–∫: {self.dca_attempts}/{self.dca_max_attempts}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        action_result = self._determine_recovery_action(analysis)
        analysis.update(action_result)

        return analysis

    def _determine_recovery_action(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""

        loss_percent = analysis['loss_percent']
        current_price = analysis['current_price']
        time_in_position = analysis['time_in_position']

        # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è - –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
        if loss_percent <= 0:
            return {
                'action': 'none',
                'reason': f'–ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è: {abs(loss_percent)*100:+.2f}%',
                'urgency': 'none'
            }

        # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–¢–û–ü-–õ–û–°–°
        if loss_percent >= self.emergency_stop_loss:
            return {
                'action': 'emergency_stop',
                'reason': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫ {loss_percent*100:.1f}% >= {self.emergency_stop_loss*100:.0f}%',
                'urgency': 'critical',
                'sell_price': current_price * 0.995,  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
                'quantity': analysis['quantity']
            }

        # ‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –°–¢–û–ü
        if (time_in_position > self.time_based_stop_hours and
            loss_percent > 0.04):  # –£–±—ã—Ç–æ–∫ >4% –¥–µ—Ä–∂–∏—Ç—Å—è >6 —á–∞—Å–æ–≤
            return {
                'action': 'time_stop',
                'reason': f'–£–±—ã—Ç–æ–∫ {loss_percent*100:.1f}% –¥–µ—Ä–∂–∏—Ç—Å—è {time_in_position:.1f} —á–∞—Å–æ–≤',
                'urgency': 'high',
                'sell_price': current_price * 0.998,
                'quantity': analysis['quantity']
            }

        # ü©π DCA –î–û–ö–£–ü–ö–ê
        if (loss_percent >= self.dca_loss_threshold and
            self.dca_attempts < self.dca_max_attempts and
            self._can_make_dca()):

            # –†–∞–∑–º–µ—Ä –¥–æ–∫—É–ø–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —É–±—ã—Ç–∫–∞
            if loss_percent > 0.05:      # >5% —É–±—ã—Ç–æ–∫
                dca_size_percent = 0.15   # 15% –¥–µ–ø–æ–∑–∏—Ç–∞
            elif loss_percent > 0.03:    # >3% —É–±—ã—Ç–æ–∫
                dca_size_percent = 0.12   # 12% –¥–µ–ø–æ–∑–∏—Ç–∞
            else:                        # 2-3% —É–±—ã—Ç–æ–∫
                dca_size_percent = 0.08   # 8% –¥–µ–ø–æ–∑–∏—Ç–∞

            return {
                'action': 'dca_buy',
                'reason': f'DCA –¥–æ–∫—É–ø–∫–∞ #{self.dca_attempts + 1} –ø—Ä–∏ —É–±—ã—Ç–∫–µ {loss_percent*100:.1f}%',
                'urgency': 'medium',
                'buy_size_percent': dca_size_percent,
                'buy_price': current_price * 0.9995  # –ù–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
            }

        # üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø TRAILING –í –£–ë–´–¢–ö–ï (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        if (loss_percent > 0.005 and loss_percent < 0.03 and
            self.trailing_activation_in_loss):
            return {
                'action': 'activate_trailing_in_loss',
                'reason': f'–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop –≤ —É–±—ã—Ç–∫–µ {loss_percent*100:.1f}%',
                'urgency': 'low',
                'trailing_distance': 0.01  # 1% trailing –≤ —É–±—ã—Ç–∫–µ
            }

        # üíé HODL - –¥–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é
        return {
            'action': 'hold',
            'reason': f'–î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é, —É–±—ã—Ç–æ–∫ {loss_percent*100:.1f}% –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã',
            'urgency': 'low'
        }

    def _can_make_dca(self) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ DCA –¥–æ–∫—É–ø–∫–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self.last_dca_time:
            time_since_dca = (datetime.now() - self.last_dca_time).total_seconds()
            if time_since_dca < self.min_time_between_dca:
                remaining_minutes = (self.min_time_between_dca - time_since_dca) / 60
                self.logger.info(f"‚è∞ DCA –∫—É–ª–¥–∞—É–Ω: {remaining_minutes:.0f} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –¥–æ–∫—É–ø–∫–∏")
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
        if self.dca_attempts >= self.dca_max_attempts:
            self.logger.info(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç DCA: {self.dca_attempts}/{self.dca_max_attempts}")
            return False

        return True

    def _get_time_in_position(self) -> float:
        """‚è∞ –í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (—á–∞—Å—ã)"""
        if not self.position_start_time:
            return 0

        return (datetime.now() - self.position_start_time).total_seconds() / 3600

    def execute_recovery_action(self, action_data: Dict[str, Any], balance: float) -> bool:
        """üöÄ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""

        action = action_data['action']

        try:
            if action == 'emergency_stop':
                return self._execute_emergency_stop(action_data)

            elif action == 'time_stop':
                return self._execute_time_stop(action_data)

            elif action == 'dca_buy':
                return self._execute_dca_buy(action_data, balance)

            elif action == 'activate_trailing_in_loss':
                self.logger.info(f"üîÑ {action_data['reason']}")
                return True  # Trailing –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ

            elif action == 'hold':
                self.logger.info(f"üíé {action_data['reason']}")
                return True

            elif action == 'none':
                return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {e}")
            return False

        return False

    def _execute_emergency_stop(self, action_data: Dict[str, Any]) -> bool:
        """üö® –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""

        self.logger.error(f"üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–¢–û–ü-–õ–û–°–°!")
        self.logger.error(f"   –ü—Ä–∏—á–∏–Ω–∞: {action_data['reason']}")

        sell_price = action_data['sell_price']
        quantity = action_data['quantity']

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"
            precision = 8  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ü–µ–Ω—ã
            price_rounded = round(sell_price, precision)

            result = self.api.create_order(pair, quantity, price_rounded, 'sell')

            if result.get('result'):
                self.logger.error(f"‚úÖ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –ò–°–ü–û–õ–ù–ï–ù–ê!")
                self.logger.error(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
                self.logger.error(f"   –¶–µ–Ω–∞: {price_rounded:.8f}")
                self.logger.error(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self._reset_recovery_state()
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {result}")
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ: {e}")

        return False

    def _execute_time_stop(self, action_data: Dict[str, Any]) -> bool:
        """‚è∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""

        self.logger.warning(f"‚è∞ –í–†–ï–ú–ï–ù–ù–û–ô –°–¢–û–ü-–õ–û–°–°!")
        self.logger.warning(f"   –ü—Ä–∏—á–∏–Ω–∞: {action_data['reason']}")

        sell_price = action_data['sell_price']
        quantity = action_data['quantity']

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"
            precision = 8
            price_rounded = round(sell_price, precision)

            result = self.api.create_order(pair, quantity, price_rounded, 'sell')

            if result.get('result'):
                self.logger.warning(f"‚úÖ –í–†–ï–ú–ï–ù–ù–û–ô –°–¢–û–ü –ò–°–ü–û–õ–ù–ï–ù!")
                self.logger.warning(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
                self.logger.warning(f"   –¶–µ–Ω–∞: {price_rounded:.8f}")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self._reset_recovery_state()
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø–∞: {result}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ø–∞: {e}")

        return False

    def _execute_dca_buy(self, action_data: Dict[str, Any], balance: float) -> bool:
        """ü©π –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ DCA –¥–æ–∫—É–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏"""

        buy_size_percent = action_data['buy_size_percent']
        buy_price = action_data['buy_price']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–ø–∫–∏
        buy_amount = balance * buy_size_percent
        quantity = buy_amount / buy_price

        self.logger.info(f"ü©π DCA –î–û–ö–£–ü–ö–ê #{self.dca_attempts + 1}")
        self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {action_data['reason']}")
        self.logger.info(f"   –†–∞–∑–º–µ—Ä: {buy_size_percent * 100:.0f}% –¥–µ–ø–æ–∑–∏—Ç–∞")
        self.logger.info(f"   –°—É–º–º–∞: {buy_amount:.2f} EUR")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
        self.logger.info(f"   –¶–µ–Ω–∞: {buy_price:.8f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        pair_settings = self.api.get_pair_settings()
        pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"
        min_amount = float(pair_settings.get(pair, {}).get('min_amount', 10.0))

        if buy_amount < min_amount:
            self.logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–∫—É–ø–∫–∏ {buy_amount:.2f} < –º–∏–Ω–∏–º—É–º–∞ {min_amount}")
            return False

        try:
            precision = int(pair_settings.get(pair, {}).get('price_precision', 8))
            price_rounded = round(buy_price, precision)

            result = self.api.create_order(pair, quantity, price_rounded, 'buy')

            if result.get('result'):
                self.logger.info(f"‚úÖ DCA –î–û–ö–£–ü–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê!")
                self.logger.info(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.dca_attempts += 1
                self.last_dca_time = datetime.now()

                # üìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                trade_info = {
                    'type': 'buy',
                    'quantity': quantity,
                    'price': price_rounded,
                    'amount': buy_amount,
                    'commission': buy_amount * self.config.AUTO_COMMISSION_RATE,
                    'timestamp': int(time.time())  # Unix timestamp
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.position_manager.update_position(self.config.CURRENCY_1, trade_info)

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π
                time.sleep(2)  # 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏

                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                updated_position = self.position_manager.get_position(self.config.CURRENCY_1)
                if updated_position:
                    self.logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
                    self.logger.info(f"   –ù–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {updated_position.avg_price:.8f}")
                    self.logger.info(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {updated_position.quantity:.6f}")

                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ DCA –¥–æ–∫—É–ø–∫–∏: {result}")
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ DCA –¥–æ–∫—É–ø–∫–µ: {e}")

        return False

    def _reset_recovery_state(self):
        """üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        self.logger.info("üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        self.dca_attempts = 0
        self.position_start_time = None
        self.last_dca_time = None

    def get_recovery_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return {
            'dca_attempts': self.dca_attempts,
            'max_dca_attempts': self.dca_max_attempts,
            'time_in_position_hours': self._get_time_in_position(),
            'can_make_dca': self._can_make_dca(),
            'last_dca_time': self.last_dca_time.isoformat() if self.last_dca_time else None,
            'emergency_stop_threshold': self.emergency_stop_loss * 100,
            'time_stop_threshold_hours': self.time_based_stop_hours
        }

    def force_reset_state(self):
        """üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        self.logger.warning("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ë–†–û–° —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        self._reset_recovery_state()


if __name__ == "__main__":
    print("ü©π –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    print("=" * 50)
    print("–§—É–Ω–∫—Ü–∏–∏:")
    print("‚Ä¢ DCA –¥–æ–∫—É–ø–∫–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ >2%")
    print("‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –ø—Ä–∏ -8%")
    print("‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç–æ–ø —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤")
    print("‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è trailing –≤ —É–±—ã—Ç–∫–µ")
    print("‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 DCA –ø–æ–ø—ã—Ç–∫–∏")
    print("‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É DCA: 30 –º–∏–Ω—É—Ç")
