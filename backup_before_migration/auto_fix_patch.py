#!/usr/bin/env python3
"""üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""

import os
import sys
import shutil
import subprocess
import importlib.util
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
import json


class AutoFixPatch:
    """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""

    def __init__(self):
        self.root_dir = Path(".")
        self.backup_dir = Path("backup_before_autofix")
        self.errors_found = []
        self.fixes_applied = []
        self.warnings = []

        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.GREEN = "\033[92m"
        self.RED = "\033[91m"
        self.YELLOW = "\033[93m"
        self.BLUE = "\033[94m"
        self.END = "\033[0m"

    def apply_auto_fix(self):
        """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"{self.BLUE}üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö{self.END}")
        print("=" * 60)

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self._create_safety_backup()

            # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            self._diagnose_issues()

            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            self._fix_pytest_conflicts()

            # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ core —Ñ–∞–π–ª—ã
            self._create_missing_core_files()

            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py
            self._fix_main_py()

            # 6. –°–æ–∑–¥–∞–µ–º fallback –∞–¥–∞–ø—Ç–µ—Ä—ã
            self._create_fallback_adapters()

            # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º imports
            self._fix_broken_imports()

            # 8. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self._create_basic_infrastructure()

            # 9. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._update_dependencies()

            # 10. –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç
            self._create_working_test()

            # 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self._final_verification()

            print(f"\n{self.GREEN}‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!{self.END}")
            self._print_summary()

        except Exception as e:
            print(f"\n{self.RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}{self.END}")
            self._restore_from_backup()
            raise

    def _create_safety_backup(self):
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞"""
        print(f"{self.YELLOW}üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞...{self.END}")

        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)

        self.backup_dir.mkdir()

        # –ë—ç–∫–∞–ø–∏–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        important_files = [
            "main.py", "config.py", "requirements.txt", ".env",
            "bot.py", "hybrid_bot.py", "api_client.py"
        ]

        for file_name in important_files:
            file_path = self.root_dir / file_name
            if file_path.exists():
                shutil.copy2(file_path, self.backup_dir / file_name)
                print(f"  üìÑ {file_name}")

        # –ë—ç–∫–∞–ø–∏–º src/ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        src_dir = self.root_dir / "src"
        if src_dir.exists():
            shutil.copytree(src_dir, self.backup_dir / "src")
            print(f"  üìÅ src/")

        print(f"{self.GREEN}‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ {self.backup_dir}{self.END}")

    def _diagnose_issues(self):
        """üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
        print(f"\n{self.YELLOW}üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º...{self.END}")

        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if self._check_pytest_conflicts():
            issues.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        missing_files = self._check_missing_files()
        if missing_files:
            issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_files)} —Ñ–∞–π–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º broken imports
        broken_imports = self._check_broken_imports()
        if broken_imports:
            issues.append(f"{len(broken_imports)} broken imports")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if not self._check_directory_structure():
            issues.append("–Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

        self.errors_found = issues

        if issues:
            print(f"{self.RED}‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}{self.END}")
            for issue in issues:
                print(f"  ‚Ä¢ {issue}")
        else:
            print(f"{self.GREEN}‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{self.END}")

    def _fix_pytest_conflicts(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...{self.END}")

        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
            conflicting_packages = [
                "pytest-twisted", "pytest-qt", "pytest-xdist"
            ]

            for package in conflicting_packages:
                try:
                    subprocess.run([sys.executable, "-m", "pip", "uninstall", package, "-y"],
                                   capture_output=True, check=False)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω {package}")
                except:
                    pass

            # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pytest
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade",
                            "pytest", "pytest-asyncio"],
                           capture_output=True, check=True)

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π pytest.ini
            pytest_ini_content = """[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    -p no:twisted
    -p no:qt
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
"""

            with open("pytest.ini", "w") as f:
                f.write(pytest_ini_content)

            self.fixes_applied.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"{self.GREEN}‚úÖ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã{self.END}")

        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å pytest: {e}")
            print(f"{self.YELLOW}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å pytest: {e}{self.END}")

    def _create_missing_core_files(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤"""
        print(f"\n{self.YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤...{self.END}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring",
            "tests", "logs", "data"
        ]

        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
        init_dirs = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring"
        ]

        for directory in init_dirs:
            init_file = Path(directory) / "__init__.py"
            init_file.write_text('"""üì¶ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""\n')

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ core —Ñ–∞–π–ª—ã
        self._create_core_interfaces()
        self._create_core_models()
        self._create_core_exceptions()
        self._create_core_constants()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._create_config_settings()

        print(f"{self.GREEN}‚úÖ Core —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã{self.END}")
        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω—ã core —Ñ–∞–π–ª—ã")

    def _create_core_interfaces(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ core –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        interfaces_content = '''#!/usr/bin/env python3
"""üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from abc import ABC, abstractmethod
from typing import Protocol, Dict, Any, Optional, List
from decimal import Decimal


class IExchangeAPI(Protocol):
    """üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å API –±–∏—Ä–∂–∏"""

    async def get_balance(self, currency: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã"""
        ...

    async def get_current_price(self, pair: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–∞—Ä—ã"""
        ...

    async def create_order(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        ...


class ICacheService(Protocol):
    """üíæ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""

    async def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        ...

    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        ...

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        ...

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        ...


class IMonitoringService(Protocol):
    """üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    async def record_trade(self, pair: str, action: str, quantity: float, price: float, success: bool, profit: Optional[float] = None) -> None:
        """–ó–∞–ø–∏—Å—å —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        ...

    async def record_balance(self, currency: str, balance: float) -> None:
        """–ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞"""
        ...

    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        ...


class INotificationService(Protocol):
    """üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    async def send_alert(self, alert: Any) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        ...


class IRepository(Protocol):
    """üóÑÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""

    async def save(self, entity: Any) -> Any:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        ...

    async def find_by_id(self, entity_id: str) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ –ø–æ ID"""
        ...

    async def find_all(self) -> List[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        ...


class IUnitOfWork(Protocol):
    """üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Unit of Work"""

    async def commit(self) -> None:
        """–§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...

    async def rollback(self) -> None:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...
'''

        (Path("src/core") / "interfaces.py").write_text(interfaces_content)

    def _create_core_models(self):
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ core –º–æ–¥–µ–ª–µ–π"""
        models_content = '''#!/usr/bin/env python3
"""üèóÔ∏è –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any
from enum import Enum


class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    BUY = "buy"
    SELL = "sell"


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    FILLED = "filled"
    CANCELLED = "cancelled"
    FAILED = "failed"


@dataclass
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""
    base: str
    quote: str

    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"

    @classmethod
    def from_string(cls, pair_str: str) -> 'TradingPair':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        base, quote = pair_str.split('_')
        return cls(base, quote)


@dataclass
class TradeSignal:
    """üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    action: str
    quantity: Decimal
    price: Decimal
    confidence: float
    reason: str
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)

    @property
    def current_value(self) -> Decimal:
        """–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        return self.quantity * self.avg_price

    def update_position(self, new_quantity: Decimal, new_price: Decimal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if new_quantity > 0:
            total_quantity = self.quantity + new_quantity
            total_cost = self.total_cost + (new_quantity * new_price)
            self.avg_price = total_cost / total_quantity
            self.quantity = total_quantity
            self.total_cost = total_cost
            self.updated_at = datetime.now()


@dataclass
class TradeResult:
    """üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    trade_id: Optional[str] = None
    pair: str = ""
    action: str = ""
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    success: bool = False
    profit: Decimal = Decimal("0")
    timestamp: datetime = field(default_factory=datetime.now)
    error_message: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class TradeOrder:
    """üìù –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–¥–µ—Ä"""
    order_id: Optional[str] = None
    pair: str = ""
    order_type: OrderType = OrderType.BUY
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    status: OrderStatus = OrderStatus.PENDING
    created_at: datetime = field(default_factory=datetime.now)
    filled_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ConfigProfile:
    """‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name: str
    position_size_percent: float
    max_positions: int
    risk_level: str
    settings: Dict[str, Any] = field(default_factory=dict)


@dataclass
class APIResponse:
    """üåê –û—Ç–≤–µ—Ç API"""
    success: bool
    data: Any = None
    error: Optional[str] = None
    status_code: Optional[int] = None
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class ErrorInfo:
    """‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_type: str
    message: str
    details: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
'''

        (Path("src/core") / "models.py").write_text(models_content)

    def _create_core_exceptions(self):
        """üö® –°–æ–∑–¥–∞–Ω–∏–µ core –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        exceptions_content = '''#!/usr/bin/env python3
"""üö® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""


class TradingSystemError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, message: str, details: dict = None):
        super().__init__(message)
        self.message = message
        self.details = details or {}


class ConfigurationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class APIError(TradingSystemError):
    """–û—à–∏–±–∫–∞ API"""

    def __init__(self, message: str, status_code: int = None, details: dict = None):
        super().__init__(message, details)
        self.status_code = status_code


class RateLimitError(APIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass


class ConnectionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    pass


class PositionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    pass


class StrategyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass


class MonitoringError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    pass


class CacheError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass


class PersistenceError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    pass


class ValidationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    pass


class DependencyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ dependency injection"""

    def __init__(self, service_name: str, message: str):
        super().__init__(f"Dependency error for {service_name}: {message}")
        self.service_name = service_name
'''

        (Path("src/core") / "exceptions.py").write_text(exceptions_content)

    def _create_core_constants(self):
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ core –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        constants_content = '''#!/usr/bin/env python3
"""üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from decimal import Decimal


# üåê API –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class API:
    EXMO_BASE_URL = "https://api.exmo.com/v1.1/"
    EXMO_TIMEOUT = 10
    EXMO_MAX_RETRIES = 3

    DEFAULT_CALLS_PER_MINUTE = 30
    DEFAULT_CALLS_PER_HOUR = 300

    HTTP_OK = 200
    HTTP_TOO_MANY_REQUESTS = 429
    HTTP_UNAUTHORIZED = 401


# üí± –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Trading:
    DEFAULT_PAIR = "DOGE_EUR"
    SUPPORTED_PAIRS = ["DOGE_EUR", "DOGE_USD", "DOGE_BTC", "ETH_EUR", "BTC_EUR"]

    MIN_ORDER_SIZE = Decimal("5.0")
    MIN_QUANTITY = Decimal("0.000001")
    MIN_PRICE = Decimal("0.00000001")

    TAKER_FEE = Decimal("0.003")
    MAKER_FEE = Decimal("0.002")


# üõ°Ô∏è –†–∏—Å–∫-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Risk:
    DEFAULT_POSITION_SIZE = 6.0  # %
    DEFAULT_STOP_LOSS = 8.0      # %
    DEFAULT_TAKE_PROFIT = 2.0    # %

    MAX_POSITION_SIZE = 15.0     # %
    MAX_DAILY_LOSS = 5.0         # %


# ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Timing:
    DEFAULT_UPDATE_INTERVAL = 30    # —Å–µ–∫—É–Ω–¥
    API_TIMEOUT = 10                # —Å–µ–∫—É–Ω–¥
    CACHE_DEFAULT_TTL = 300         # —Å–µ–∫—É–Ω–¥
    CACHE_PRICE_TTL = 30            # —Å–µ–∫—É–Ω–¥
    CACHE_BALANCE_TTL = 60          # —Å–µ–∫—É–Ω–¥


# üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
class Profiles:
    CONSERVATIVE = {
        "name": "conservative",
        "position_size": 4.0,
        "max_positions": 2,
        "risk_level": "low"
    }

    BALANCED = {
        "name": "balanced", 
        "position_size": 6.0,
        "max_positions": 3,
        "risk_level": "medium"
    }

    AGGRESSIVE = {
        "name": "aggressive",
        "position_size": 10.0,
        "max_positions": 5,
        "risk_level": "high"
    }
'''

        (Path("src/core") / "constants.py").write_text(constants_content)

    def _create_config_settings(self):
        """‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        settings_content = '''#!/usr/bin/env python3
"""‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

import os
from dataclasses import dataclass, field
from typing import Dict, Optional
from decimal import Decimal

try:
    from dotenv import load_dotenv
    load_dotenv()
    DOTENV_AVAILABLE = True
except ImportError:
    DOTENV_AVAILABLE = False

from ..core.exceptions import ConfigurationError


@dataclass
class APISettings:
    """üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
    exmo_api_key: str = ""
    exmo_api_secret: str = ""
    exmo_base_url: str = "https://api.exmo.com/v1.1/"
    exmo_timeout: int = 10
    exmo_max_retries: int = 3

    calls_per_minute: int = 30
    calls_per_hour: int = 300
    adaptive_rate_limiting: bool = True

    cache_enabled: bool = True
    cache_default_ttl: int = 300

    def __post_init__(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.exmo_api_key:
            self.exmo_api_key = os.getenv('EXMO_API_KEY', '')

        if not self.exmo_api_secret:
            self.exmo_api_secret = os.getenv('EXMO_API_SECRET', '')

    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        if not self.exmo_api_key:
            raise ConfigurationError("EXMO API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        if not self.exmo_api_secret:
            raise ConfigurationError("EXMO API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        if len(self.exmo_api_key) < 16:
            raise ConfigurationError("EXMO API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")


@dataclass
class TradingSettings:
    """üí± –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    pair: str = "DOGE_EUR"
    position_size_percent: float = 6.0
    max_positions: int = 3

    min_profit_percent: float = 0.8
    stop_loss_percent: float = 8.0

    dca_enabled: bool = True
    dca_drop_threshold: float = 1.5
    dca_purchase_size: float = 3.0
    dca_max_purchases: int = 5

    monitoring_enabled: bool = True
    monitoring_port: int = 8080

    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.position_size_percent <= 0 or self.position_size_percent > 15:
            raise ConfigurationError("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 15%")

        if self.stop_loss_percent <= 0:
            raise ConfigurationError("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")


@dataclass
class SystemSettings:
    """üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    log_level: str = "INFO"
    log_file: str = "logs/trading_bot.log"

    data_dir: str = "data"
    backup_enabled: bool = True

    storage_type: str = "json"  # json, sqlite
    export_enabled: bool = True
    export_interval: int = 3600  # —Å–µ–∫—É–Ω–¥


class Settings:
    """‚öôÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def __init__(self):
        self.api = APISettings()
        self.trading = TradingSettings() 
        self.system = SystemSettings()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if DOTENV_AVAILABLE:
            self._load_from_env()

    def _load_from_env(self):
        """üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ APISettings.__post_init__

        # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('TRADING_PAIR'):
            self.trading.pair = os.getenv('TRADING_PAIR')

        if os.getenv('POSITION_SIZE_PERCENT'):
            try:
                self.trading.position_size_percent = float(os.getenv('POSITION_SIZE_PERCENT'))
            except ValueError:
                pass

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('LOG_LEVEL'):
            self.system.log_level = os.getenv('LOG_LEVEL')

    def validate_all(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.api.validate()
            self.trading.validate()
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def get_profile(self, profile_name: str) -> Dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        profiles = {
            "conservative": {
                "position_size_percent": 4.0,
                "max_positions": 2,
                "min_profit_percent": 1.2,
                "stop_loss_percent": 6.0
            },
            "balanced": {
                "position_size_percent": 6.0,
                "max_positions": 3,
                "min_profit_percent": 0.8,
                "stop_loss_percent": 8.0
            },
            "aggressive": {
                "position_size_percent": 10.0,
                "max_positions": 5,
                "min_profit_percent": 0.5,
                "stop_loss_percent": 12.0
            }
        }

        return profiles.get(profile_name, profiles["balanced"])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
_settings_instance: Optional[Settings] = None


def get_settings() -> Settings:
    """üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance

    if _settings_instance is None:
        _settings_instance = Settings()

    return _settings_instance


def reset_settings() -> None:
    """üîÑ –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance
    _settings_instance = None
'''

        (Path("src/config") / "settings.py").write_text(settings_content)

    def _fix_main_py(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py —Å fallback –ª–æ–≥–∏–∫–æ–π
        main_py_content = '''#!/usr/bin/env python3
"""üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (Auto-Fixed)"""

import sys
import os
import argparse
import asyncio
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))


def parse_arguments():
    """üìã –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="ü§ñ DOGE Trading Bot v4.1-refactored (Auto-Fixed)")

    parser.add_argument(
        '--mode', '-m',
        choices=['new', 'legacy', 'hybrid', 'enhanced', 'safe'],
        default='safe',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
    )

    parser.add_argument(
        '--profile', '-p',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
    )

    parser.add_argument(
        '--validate', '-v',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--test-mode', '-t',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
    )

    return parser.parse_args()


async def run_safe_mode(args):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    print("üõ°Ô∏è


    print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config.settings import get_settings
            settings = get_settings()
            print("‚úÖ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except ImportError:
            print("‚ö†Ô∏è –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é")
            settings = None
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        cycle_count = 0
        max_cycles = 10 if args.test_mode else 100
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–º–∞–∫—Å–∏–º—É–º {max_cycles} —Ü–∏–∫–ª–æ–≤)...")
        
        while cycle_count < max_cycles:
            cycle_count += 1
            
            print(f"üìä –¶–∏–∫–ª {cycle_count}")
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                market_data = {
                    "pair": "DOGE_EUR",
                    "current_price": 0.18,
                    "balance": 1000.0,
                    "timestamp": asyncio.get_event_loop().time()
                }
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if market_data["current_price"] > 0:
                    print(f"  üí± –¶–µ–Ω–∞ DOGE: {market_data['current_price']} EUR")
                    print(f"  üí∞ –ë–∞–ª–∞–Ω—Å: {market_data['balance']} EUR")
                    print(f"  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    print("  ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(10 if args.test_mode else 30)
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
        
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        traceback.print_exc()
        return False


async def run_enhanced_mode(args):
    """üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    try:
        from enhanced_bot import EnhancedBot
        
        bot = EnhancedBot()
        await bot.initialize()
        await bot.run()
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Enhanced –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
        return await run_safe_mode(args)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ enhanced —Ä–µ–∂–∏–º–∞: {e}")
        return await run_safe_mode(args)


async def run_legacy_mode(args):
    """üìú Legacy —Ä–µ–∂–∏–º"""
    print("üìú –ó–∞–ø—É—Å–∫ legacy —Ä–µ–∂–∏–º–∞...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
        if Path("hybrid_bot.py").exists():
            from hybrid_bot import HybridTradingBot
            bot = HybridTradingBot()
            bot.run()
        elif Path("bot.py").exists():
            from bot import TradingBot
            bot = TradingBot()
            bot.run()
        else:
            print("‚ö†Ô∏è Legacy –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
            return await run_safe_mode(args)
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ legacy —Ä–µ–∂–∏–º–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º...")
        return await run_safe_mode(args)


async def validate_configuration(args):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.settings import get_settings
        settings = get_settings()
        settings.validate_all()
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìä API –∫–ª—é—á: {settings.api.exmo_api_key[:8]}..." if settings.api.exmo_api_key else "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {settings.trading.pair}")
        print(f"üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings.trading.position_size_percent}%")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if Path("config.py").exists():
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            return True
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    print("ü§ñ DOGE Trading Bot v4.1-refactored (Auto-Fixed)")
    print("=" * 50)
    
    try:
        if args.validate:
            success = await validate_configuration(args)
            return 0 if success else 1
        
        if args.mode == 'safe':
            success = await run_safe_mode(args)
        elif args.mode == 'enhanced':
            success = await run_enhanced_mode(args)
        elif args.mode == 'legacy':
            success = await run_legacy_mode(args)
        elif args.mode == 'hybrid':
            success = await run_enhanced_mode(args)  # Fallback to enhanced
        else:
            success = await run_safe_mode(args)  # Default fallback
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\\n‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        return 0
    except Exception as e:
        print(f"\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\\n‚å®Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(0)
    except Exception as e:
        print(f"\\nüí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
'''

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py
        with open("main.py", "w", encoding="utf-8") as f:
            f.write(main_py_content)

        self.fixes_applied.append("main.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å fallback –ª–æ–≥–∏–∫–æ–π")
        print(f"{self.GREEN}‚úÖ main.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω{self.END}")

    def _create_fallback_adapters(self):
        """üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        print(f"\n{self.YELLOW}üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–¥–∞–ø—Ç–µ—Ä
        adapters_content = '''#!/usr/bin/env python3
"""üîÑ Fallback –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""

import sys
import os
import asyncio
from typing import Dict, Any, Optional
from pathlib import Path


class SafeAdapter:
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è fallback —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.initialized = False
        self.cycle_count = 0
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SafeAdapter...")
            self.initialized = True
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
            return False
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        if not self.initialized:
            return {"success": False, "reason": "–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        self.cycle_count += 1
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
            market_data = {
                "pair": "DOGE_EUR",
                "current_price": 0.18,
                "balance": 1000.0
            }
            
            return {
                "success": True,
                "action": "monitor",
                "reason": f"–¶–∏–∫–ª {self.cycle_count}: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã {market_data['current_price']}",
                "data": market_data
            }
            
        except Exception as e:
            return {
                "success": False,
                "reason": f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}"
            }


class LegacyBotAdapter:
    """üìú –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self, use_hybrid: bool = True):
        self.use_hybrid = use_hybrid
        self._old_bot = None
    
    def get_old_bot(self):
        """üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        if self._old_bot is None:
            try:
                if self.use_hybrid and Path("hybrid_bot.py").exists():
                    import hybrid_bot
                    self._old_bot = hybrid_bot.HybridTradingBot()
                elif Path("bot.py").exists():
                    import bot
                    self._old_bot = bot.TradingBot()
                else:
                    raise ImportError("–°—Ç–∞—Ä—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç: {e}")
                self._old_bot = SafeAdapter()
        
        return self._old_bot
    
    async def run_trading_cycle(self) -> Dict[str, Any]:
        """üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            old_bot = self.get_old_bot()
            
            if hasattr(old_bot, 'execute_cycle'):
                return await old_bot.execute_cycle()
            elif hasattr(old_bot, 'run_cycle'):
                return old_bot.run_cycle()
            else:
                # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
                safe_adapter = SafeAdapter()
                await safe_adapter.initialize()
                return await safe_adapter.execute_cycle()
                
        except Exception as e:
            return {"success": False, "reason": f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def get_safe_adapter() -> SafeAdapter:
    """üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    adapter = SafeAdapter()
    await adapter.initialize()
    return adapter


def get_legacy_adapter(use_hybrid: bool = True) -> LegacyBotAdapter:
    """üìú –ü–æ–ª—É—á–µ–Ω–∏–µ legacy –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    return LegacyBotAdapter(use_hybrid)
'''

        (Path("src") / "adapters.py").write_text(adapters_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω—ã fallback –∞–¥–∞–ø—Ç–µ—Ä—ã")
        print(f"{self.GREEN}‚úÖ Fallback –∞–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã{self.END}")

    def _fix_broken_imports(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ broken imports"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ broken imports...{self.END}")

        # –°–æ–∑–¥–∞–µ–º enhanced_bot.py –∫–∞–∫ fallback
        enhanced_bot_content = '''#!/usr/bin/env python3
"""ü§ñ Enhanced –±–æ—Ç (Auto-Generated Fallback)"""

import asyncio
import logging
from pathlib import Path


class EnhancedBot:
    """ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç (fallback –≤–µ—Ä—Å–∏—è)"""
    
    def __init__(self):
        self.setup_logging()
        self.running = False
        self.cycle_count = 0
    
    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        Path("logs").mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/enhanced_bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced –±–æ—Ç–∞ (fallback)...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components_available = 0
            
            try:
                from src.config.settings import get_settings
                settings = get_settings()
                components_available += 1
                self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            try:
                from src.adapters import SafeAdapter
                components_available += 1
                self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {components_available}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def run(self):
        """üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.running = True
        
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            while self.running and self.cycle_count < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                self.cycle_count += 1
                
                self.logger.info(f"üìä –¶–∏–∫–ª {self.cycle_count}")
                
                # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                try:
                    result = await self._execute_cycle()
                    self.logger.info(f"‚úÖ {result.get('reason', '–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω')}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                
                await asyncio.sleep(15)  # 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        finally:
            await self.shutdown()
    
    async def _execute_cycle(self):
        """üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        market_data = {
            "pair": "DOGE_EUR",
            "current_price": 0.18,
            "balance": 1000.0
        }
        
        return {
            "success": True,
            "action": "monitor",
            "reason": f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ü–µ–Ω–∞ {market_data['current_price']} EUR"
        }
    
    async def shutdown(self):
        """üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self.running = False
        self.logger.info("‚úÖ Enhanced –±–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
'''

        with open("enhanced_bot.py", "w", encoding="utf-8") as f:
            f.write(enhanced_bot_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω fallback enhanced_bot.py")
        print(f"{self.GREEN}‚úÖ Enhanced bot fallback —Å–æ–∑–¥–∞–Ω{self.END}")

    def _create_basic_infrastructure(self):
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print(f"\n{self.YELLOW}üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫—ç—à
        cache_content = '''#!/usr/bin/env python3
"""üíæ –ë–∞–∑–æ–≤—ã–π –∫—ç—à (Fallback)"""

import asyncio
from typing import Any, Optional


class SimpleCache:
    """üíæ –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à"""
    
    def __init__(self):
        self._storage = {}
        self._running = False
    
    async def start(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –∫—ç—à–∞"""
        self._running = True
    
    async def stop(self):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—ç—à–∞"""
        self._running = False
        self._storage.clear()
    
    async def get(self, key: str, default: Any = None) -> Any:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        return self._storage.get(key, default)
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        self._storage[key] = value
        
        # –ü—Ä–æ—Å—Ç–æ–π TTL (–±–µ–∑ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏)
        if ttl:
            asyncio.create_task(self._expire_key(key, ttl))
    
    async def _expire_key(self, key: str, ttl: int):
        """‚è∞ –ò—Å—Ç–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞"""
        await asyncio.sleep(ttl)
        self._storage.pop(key, None)
'''

        (Path("src/infrastructure/cache") / "simple_cache.py").write_text(cache_content)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_content = '''#!/usr/bin/env python3
"""üìä –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Fallback)"""

import asyncio
import logging
from typing import Dict, Any, Optional


class SimpleMonitoring:
    """üìä –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._stats = {
            "trades_count": 0,
            "successful_trades": 0,
            "api_calls": 0
        }
        self._running = False
    
    async def start(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = True
        self.logger.info("üìä –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = False
        self.logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def record_trade(self, pair: str, action: str, quantity: float, price: float, success: bool, profit: Optional[float] = None):
        """üìà –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏"""
        self._stats["trades_count"] += 1
        if success:
            self._stats["successful_trades"] += 1
        
        self.logger.info(f"üìà –°–¥–µ–ª–∫–∞: {action} {quantity} {pair} –ø–æ {price}, —É—Å–ø–µ—Ö: {success}")
    
    async def record_balance(self, currency: str, balance: float):
        """üí∞ –ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞"""
        self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å {currency}: {balance}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "monitoring_type": "SimpleMonitoring",
            "running": self._running,
            "stats": self._stats.copy()
        }
'''

        (Path("src/infrastructure/monitoring") / "simple_monitoring.py").write_text(monitoring_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        print(f"{self.GREEN}‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞{self.END}")

    def _update_dependencies(self):
        """üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print(f"\n{self.YELLOW}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π requirements.txt
        requirements_content = '''# üêç –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (Auto-Fixed)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
requests>=2.28.0
pandas>=1.5.0
numpy>=1.21.0

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
python-dotenv>=0.19.0

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
matplotlib>=3.5.0
seaborn>=0.11.0

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
psutil>=5.9.0

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
pytest>=7.0.0
pytest-asyncio>=0.21.0

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
aiosqlite>=0.17.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
python-dateutil>=2.8.0
'''

        with open("requirements.txt", "w") as f:
            f.write(requirements_content)

        # –û–±–Ω–æ–≤–ª—è–µ–º .env.example
        env_example_content = '''# üîß –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (Auto-Fixed)

# API –∫–ª—é—á–∏ EXMO
EXMO_API_KEY=your_api_key_here
EXMO_API_SECRET=your_api_secret_here

# –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_PAIR=DOGE_EUR
POSITION_SIZE_PERCENT=6.0

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=INFO
MONITORING_ENABLED=true
MONITORING_PORT=8080

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_ENABLED=true
CACHE_TTL=300

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
STORAGE_TYPE=json
STORAGE_PATH=data
BACKUP_ENABLED=true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
NOTIFICATION_TYPE=console
'''

        with open(".env.example", "w") as f:
            f.write(env_example_content)

        self.fixes_applied.append("–æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print(f"{self.GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã{self.END}")

    def _create_working_test(self):
        """üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"\n{self.YELLOW}üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tests
        Path("tests").mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_content = '''#!/usr/bin/env python3
"""üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã (Auto-Generated)"""

import pytest
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))


class TestBasicSystem:
    """üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    def test_python_version(self):
        """üêç –¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ Python"""
        assert sys.version_info >= (3, 8), "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+"
    
    def test_imports(self):
        """üì¶ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
        import json
        import asyncio
        import logging
        assert True
    
    def test_config_import(self):
        """‚öôÔ∏è –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from config.settings import get_settings
            settings = get_settings()
            assert settings is not None
        except ImportError:
            pytest.skip("–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def test_adapters_import(self):
        """üîÑ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        try:
            from adapters import SafeAdapter
            adapter = SafeAdapter()
            assert adapter is not None
        except ImportError:
            pytest.skip("–ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    @pytest.mark.asyncio
    async def test_safe_adapter(self):
        """üõ°Ô∏è –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            from adapters import SafeAdapter
            
            adapter = SafeAdapter()
            result = await adapter.initialize()
            assert result is True
            
            cycle_result = await adapter.execute_cycle()
            assert cycle_result["success"] is True
            
        except ImportError:
            pytest.skip("SafeAdapter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    @pytest.mark.asyncio
    async def test_enhanced_bot(self):
        """ü§ñ –¢–µ—Å—Ç enhanced –±–æ—Ç–∞"""
        try:
            from enhanced_bot import EnhancedBot
            
            bot = EnhancedBot()
            result = await bot.initialize()
            assert result is True
            
        except ImportError:
            pytest.skip("EnhancedBot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ pytest
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    test_instance = TestBasicSystem()
    
    try:
        test_instance.test_python_version()
        print("‚úÖ Python –≤–µ—Ä—Å–∏—è")
    except Exception as e:
        print(f"‚ùå Python –≤–µ—Ä—Å–∏—è: {e}")
    
    try:
        test_instance.test_imports()
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {e}")
    
    try:
        test_instance.test_config_import()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    print("üéâ –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
'''

        with open("tests/test_basic_fixed.py", "w") as f:
            f.write(test_content)

        # –°–æ–∑–¥–∞–µ–º conftest.py
        conftest_content = '''#!/usr/bin/env python3
"""üß™ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest (Auto-Fixed)"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))

@pytest.fixture
def sample_config():
    """‚öôÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    return {
        "api_key": "test_key",
        "api_secret": "test_secret",
        "pair": "DOGE_EUR",
        "test_mode": True
    }
'''

        with open("tests/conftest.py", "w") as f:
            f.write(conftest_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç")
        print(f"{self.GREEN}‚úÖ –†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω{self.END}")

    def _final_verification(self):
        """‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        print(f"\n{self.YELLOW}‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...{self.END}")

        checks = [
            ("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ src/", self._verify_src_structure),
            ("üìÑ Core —Ñ–∞–π–ª—ã", self._verify_core_files),
            ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self._verify_configuration),
            ("üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã", self._verify_adapters),
            ("üß™ –¢–µ—Å—Ç—ã", self._verify_tests),
            ("üöÄ Main.py", self._verify_main_py)
        ]

        verification_results = []

        for check_name, check_func in checks:
            try:
                result = check_func()
                status = "‚úÖ" if result else "‚ùå"
                verification_results.append((check_name, result))
                print(f"  {status} {check_name}")
            except Exception as e:
                verification_results.append((check_name, False))
                print(f"  ‚ùå {check_name}: {e}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        passed = sum(1 for _, result in verification_results if result)
        total = len(verification_results)

        if passed >= total * 0.8:  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            print(f"\n{self.GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ({passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏){self.END}")
            return True
        else:
            print(f"\n{self.YELLOW}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞ ({passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏){self.END}")
            return False

    def _verify_src_structure(self) -> bool:
        """üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã src/"""
        required_dirs = [
            "src/core", "src/config", "src/infrastructure"
        ]
        return all(Path(d).exists() for d in required_dirs)

    def _verify_core_files(self) -> bool:
        """üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ core —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            "src/core/interfaces.py",
            "src/core/models.py",
            "src/core/exceptions.py",
            "src/core/constants.py"
        ]
        return all(Path(f).exists() for f in required_files)

    def _verify_configuration(self) -> bool:
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return Path("src/config/settings.py").exists()

    def _verify_adapters(self) -> bool:
        """üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        return Path("src/adapters.py").exists()

    def _verify_tests(self) -> bool:
        """üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        return Path("tests/test_basic_fixed.py").exists()

    #!/usr/bin/env python3
"""üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""

import os
import sys
import shutil
import subprocess
import importlib.util
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
import json


class AutoFixPatch:
    """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""

    def __init__(self):
        self.root_dir = Path(".")
        self.backup_dir = Path("backup_before_autofix")
        self.errors_found = []
        self.fixes_applied = []
        self.warnings = []

        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.GREEN = "\033[92m"
        self.RED = "\033[91m"
        self.YELLOW = "\033[93m"
        self.BLUE = "\033[94m"
        self.END = "\033[0m"

    def apply_auto_fix(self):
        """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"{self.BLUE}üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö{self.END}")
        print("=" * 60)

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self._create_safety_backup()

            # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            self._diagnose_issues()

            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            self._fix_pytest_conflicts()

            # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ core —Ñ–∞–π–ª—ã
            self._create_missing_core_files()

            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py
            self._fix_main_py()

            # 6. –°–æ–∑–¥–∞–µ–º fallback –∞–¥–∞–ø—Ç–µ—Ä—ã
            self._create_fallback_adapters()

            # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º imports
            self._fix_broken_imports()

            # 8. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self._create_basic_infrastructure()

            # 9. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._update_dependencies()

            # 10. –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç
            self._create_working_test()

            # 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self._final_verification()

            print(f"\n{self.GREEN}‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!{self.END}")
            self._print_summary()

        except Exception as e:
            print(f"\n{self.RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}{self.END}")
            self._restore_from_backup()
            raise

    def _create_safety_backup(self):
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞"""
        print(f"{self.YELLOW}üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞...{self.END}")

        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)

        self.backup_dir.mkdir()

        # –ë—ç–∫–∞–ø–∏–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        important_files = [
            "main.py", "config.py", "requirements.txt", ".env",
            "bot.py", "hybrid_bot.py", "api_client.py"
        ]

        for file_name in important_files:
            file_path = self.root_dir / file_name
            if file_path.exists():
                shutil.copy2(file_path, self.backup_dir / file_name)
                print(f"  üìÑ {file_name}")

        # –ë—ç–∫–∞–ø–∏–º src/ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        src_dir = self.root_dir / "src"
        if src_dir.exists():
            shutil.copytree(src_dir, self.backup_dir / "src")
            print(f"  üìÅ src/")

        print(f"{self.GREEN}‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ {self.backup_dir}{self.END}")

    def _diagnose_issues(self):
        """üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
        print(f"\n{self.YELLOW}üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º...{self.END}")

        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if self._check_pytest_conflicts():
            issues.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        missing_files = self._check_missing_files()
        if missing_files:
            issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_files)} —Ñ–∞–π–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º broken imports
        broken_imports = self._check_broken_imports()
        if broken_imports:
            issues.append(f"{len(broken_imports)} broken imports")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if not self._check_directory_structure():
            issues.append("–Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

        self.errors_found = issues

        if issues:
            print(f"{self.RED}‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}{self.END}")
            for issue in issues:
                print(f"  ‚Ä¢ {issue}")
        else:
            print(f"{self.GREEN}‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{self.END}")

    def _fix_pytest_conflicts(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...{self.END}")

        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
            conflicting_packages = [
                "pytest-twisted", "pytest-qt", "pytest-xdist"
            ]

            for package in conflicting_packages:
                try:
                    subprocess.run([sys.executable, "-m", "pip", "uninstall", package, "-y"],
                                 capture_output=True, check=False)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω {package}")
                except:
                    pass

            # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pytest
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade",
                          "pytest", "pytest-asyncio"],
                         capture_output=True, check=True)

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π pytest.ini
            pytest_ini_content = """[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    -p no:twisted
    -p no:qt
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
"""

            with open("pytest.ini", "w") as f:
                f.write(pytest_ini_content)

            self.fixes_applied.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"{self.GREEN}‚úÖ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã{self.END}")

        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å pytest: {e}")
            print(f"{self.YELLOW}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å pytest: {e}{self.END}")

    def _create_missing_core_files(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤"""
        print(f"\n{self.YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤...{self.END}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring",
            "tests", "logs", "data"
        ]

        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
        init_dirs = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring"
        ]

        for directory in init_dirs:
            init_file = Path(directory) / "__init__.py"
            init_file.write_text('"""üì¶ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""\n')

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ core —Ñ–∞–π–ª—ã
        self._create_core_interfaces()
        self._create_core_models()
        self._create_core_exceptions()
        self._create_core_constants()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._create_config_settings()

        print(f"{self.GREEN}‚úÖ Core —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã{self.END}")
        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω—ã core —Ñ–∞–π–ª—ã")

    def _create_core_interfaces(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ core –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        interfaces_content = '''#!/usr/bin/env python3
"""üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from abc import ABC, abstractmethod
from typing import Protocol, Dict, Any, Optional, List
from decimal import Decimal


class IExchangeAPI(Protocol):
    """üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å API –±–∏—Ä–∂–∏"""
    
    async def get_balance(self, currency: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã"""
        ...
    
    async def get_current_price(self, pair: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–∞—Ä—ã"""
        ...
    
    async def create_order(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        ...


class ICacheService(Protocol):
    """üíæ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        ...
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        ...
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        ...
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        ...


class IMonitoringService(Protocol):
    """üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    async def record_trade(self, pair: str, action: str, quantity: float, price: float, success: bool, profit: Optional[float] = None) -> None:
        """–ó–∞–ø–∏—Å—å —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        ...
    
    async def record_balance(self, currency: str, balance: float) -> None:
        """–ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞"""
        ...
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        ...


class INotificationService(Protocol):
    """üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    async def send_alert(self, alert: Any) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        ...


class IRepository(Protocol):
    """üóÑÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    
    async def save(self, entity: Any) -> Any:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        ...
    
    async def find_by_id(self, entity_id: str) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ –ø–æ ID"""
        ...
    
    async def find_all(self) -> List[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        ...


class IUnitOfWork(Protocol):
    """üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Unit of Work"""
    
    async def commit(self) -> None:
        """–§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...
    
    async def rollback(self) -> None:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...
'''

        (Path("src/core") / "interfaces.py").write_text(interfaces_content)

    def _create_core_models(self):
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ core –º–æ–¥–µ–ª–µ–π"""
        models_content = '''#!/usr/bin/env python3
"""üèóÔ∏è –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any
from enum import Enum


class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    BUY = "buy"
    SELL = "sell"


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    FILLED = "filled"
    CANCELLED = "cancelled"
    FAILED = "failed"


@dataclass
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""
    base: str
    quote: str
    
    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"
    
    @classmethod
    def from_string(cls, pair_str: str) -> 'TradingPair':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        base, quote = pair_str.split('_')
        return cls(base, quote)


@dataclass
class TradeSignal:
    """üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    action: str
    quantity: Decimal
    price: Decimal
    confidence: float
    reason: str
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    
    @property
    def current_value(self) -> Decimal:
        """–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        return self.quantity * self.avg_price
    
    def update_position(self, new_quantity: Decimal, new_price: Decimal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if new_quantity > 0:
            total_quantity = self.quantity + new_quantity
            total_cost = self.total_cost + (new_quantity * new_price)
            self.avg_price = total_cost / total_quantity
            self.quantity = total_quantity
            self.total_cost = total_cost
            self.updated_at = datetime.now()


@dataclass
class TradeResult:
    """üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    trade_id: Optional[str] = None
    pair: str = ""
    action: str = ""
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    success: bool = False
    profit: Decimal = Decimal("0")
    timestamp: datetime = field(default_factory=datetime.now)
    error_message: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class TradeOrder:
    """üìù –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–¥–µ—Ä"""
    order_id: Optional[str] = None
    pair: str = ""
    order_type: OrderType = OrderType.BUY
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    status: OrderStatus = OrderStatus.PENDING
    created_at: datetime = field(default_factory=datetime.now)
    filled_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ConfigProfile:
    """‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name: str
    position_size_percent: float
    max_positions: int
    risk_level: str
    settings: Dict[str, Any] = field(default_factory=dict)


@dataclass
class APIResponse:
    """üåê –û—Ç–≤–µ—Ç API"""
    success: bool
    data: Any = None
    error: Optional[str] = None
    status_code: Optional[int] = None
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class ErrorInfo:
    """‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_type: str
    message: str
    details: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
'''

        (Path("src/core") / "models.py").write_text(models_content)

    def _create_core_exceptions(self):
        """üö® –°–æ–∑–¥–∞–Ω–∏–µ core –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        exceptions_content = '''#!/usr/bin/env python3
"""üö® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""


class TradingSystemError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, message: str, details: dict = None):
        super().__init__(message)
        self.message = message
        self.details = details or {}


class ConfigurationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class APIError(TradingSystemError):
    """–û—à–∏–±–∫–∞ API"""
    
    def __init__(self, message: str, status_code: int = None, details: dict = None):
        super().__init__(message, details)
        self.status_code = status_code


class RateLimitError(APIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass


class ConnectionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    pass


class PositionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    pass


class StrategyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass


class MonitoringError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    pass


class CacheError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass


class PersistenceError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    pass


class ValidationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    pass


class DependencyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ dependency injection"""
    
    def __init__(self, service_name: str, message: str):
        super().__init__(f"Dependency error for {service_name}: {message}")
        self.service_name = service_name
'''

        (Path("src/core") / "exceptions.py").write_text(exceptions_content)

    def _create_core_constants(self):
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ core –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        constants_content = '''#!/usr/bin/env python3
"""üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from decimal import Decimal


# üåê API –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class API:
    EXMO_BASE_URL = "https://api.exmo.com/v1.1/"
    EXMO_TIMEOUT = 10
    EXMO_MAX_RETRIES = 3
    
    DEFAULT_CALLS_PER_MINUTE = 30
    DEFAULT_CALLS_PER_HOUR = 300
    
    HTTP_OK = 200
    HTTP_TOO_MANY_REQUESTS = 429
    HTTP_UNAUTHORIZED = 401


# üí± –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Trading:
    DEFAULT_PAIR = "DOGE_EUR"
    SUPPORTED_PAIRS = ["DOGE_EUR", "DOGE_USD", "DOGE_BTC", "ETH_EUR", "BTC_EUR"]
    
    MIN_ORDER_SIZE = Decimal("5.0")
    MIN_QUANTITY = Decimal("0.000001")
    MIN_PRICE = Decimal("0.00000001")
    
    TAKER_FEE = Decimal("0.003")
    MAKER_FEE = Decimal("0.002")


# üõ°Ô∏è –†–∏—Å–∫-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Risk:
    DEFAULT_POSITION_SIZE = 6.0  # %
    DEFAULT_STOP_LOSS = 8.0      # %
    DEFAULT_TAKE_PROFIT = 2.0    # %
    
    MAX_POSITION_SIZE = 15.0     # %
    MAX_DAILY_LOSS = 5.0         # %


# ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Timing:
    DEFAULT_UPDATE_INTERVAL = 30    # —Å–µ–∫—É–Ω–¥
    API_TIMEOUT = 10                # —Å–µ–∫—É–Ω–¥
    CACHE_DEFAULT_TTL = 300         # —Å–µ–∫—É–Ω–¥
    CACHE_PRICE_TTL = 30            # —Å–µ–∫—É–Ω–¥
    CACHE_BALANCE_TTL = 60          # —Å–µ–∫—É–Ω–¥


# üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
class Profiles:
    CONSERVATIVE = {
        "name": "conservative",
        "position_size": 4.0,
        "max_positions": 2,
        "risk_level": "low"
    }
    
    BALANCED = {
        "name": "balanced", 
        "position_size": 6.0,
        "max_positions": 3,
        "risk_level": "medium"
    }
    
    AGGRESSIVE = {
        "name": "aggressive",
        "position_size": 10.0,
        "max_positions": 5,
        "risk_level": "high"
    }
'''

        (Path("src/core") / "constants.py").write_text(constants_content)

    def _create_config_settings(self):
        """‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        settings_content = '''#!/usr/bin/env python3
"""‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

import os
from dataclasses import dataclass, field
from typing import Dict, Optional
from decimal import Decimal

try:
    from dotenv import load_dotenv
    load_dotenv()
    DOTENV_AVAILABLE = True
except ImportError:
    DOTENV_AVAILABLE = False

from ..core.exceptions import ConfigurationError


@dataclass
class APISettings:
    """üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
    exmo_api_key: str = ""
    exmo_api_secret: str = ""
    exmo_base_url: str = "https://api.exmo.com/v1.1/"
    exmo_timeout: int = 10
    exmo_max_retries: int = 3
    
    calls_per_minute: int = 30
    calls_per_hour: int = 300
    adaptive_rate_limiting: bool = True
    
    cache_enabled: bool = True
    cache_default_ttl: int = 300
    
    def __post_init__(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.exmo_api_key:
            self.exmo_api_key = os.getenv('EXMO_API_KEY', '')
        
        if not self.exmo_api_secret:
            self.exmo_api_secret = os.getenv('EXMO_API_SECRET', '')
    
    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        if not self.exmo_api_key:
            raise ConfigurationError("EXMO API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.exmo_api_secret:
            raise ConfigurationError("EXMO API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if len(self.exmo_api_key) < 16:
            raise ConfigurationError("EXMO API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")


@dataclass
class TradingSettings:
    """üí± –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    pair: str = "DOGE_EUR"
    position_size_percent: float = 6.0
    max_positions: int = 3
    
    min_profit_percent: float = 0.8
    stop_loss_percent: float = 8.0
    
    dca_enabled: bool = True
    dca_drop_threshold: float = 1.5
    dca_purchase_size: float = 3.0
    dca_max_purchases: int = 5
    
    monitoring_enabled: bool = True
    monitoring_port: int = 8080
    
    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.position_size_percent <= 0 or self.position_size_percent > 15:
            raise ConfigurationError("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 15%")
        
        if self.stop_loss_percent <= 0:
            raise ConfigurationError("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")


@dataclass
class SystemSettings:
    """üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    log_level: str = "INFO"
    log_file: str = "logs/trading_bot.log"
    
    data_dir: str = "data"
    backup_enabled: bool = True
    
    storage_type: str = "json"  # json, sqlite
    export_enabled: bool = True
    export_interval: int = 3600  # —Å–µ–∫—É–Ω–¥


class Settings:
    """‚öôÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self):
        self.api = APISettings()
        self.trading = TradingSettings() 
        self.system = SystemSettings()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if DOTENV_AVAILABLE:
            self._load_from_env()
    
    def _load_from_env(self):
        """üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ APISettings.__post_init__
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('TRADING_PAIR'):
            self.trading.pair = os.getenv('TRADING_PAIR')
        
        if os.getenv('POSITION_SIZE_PERCENT'):
            try:
                self.trading.position_size_percent = float(os.getenv('POSITION_SIZE_PERCENT'))
            except ValueError:
                pass
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('LOG_LEVEL'):
            self.system.log_level = os.getenv('LOG_LEVEL')
    
    def validate_all(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.api.validate()
            self.trading.validate()
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get_profile(self, profile_name: str) -> Dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        profiles = {
            "conservative": {
                "position_size_percent": 4.0,
                "max_positions": 2,
                "min_profit_percent": 1.2,
                "stop_loss_percent": 6.0
            },
            "balanced": {
                "position_size_percent": 6.0,
                "max_positions": 3,
                "min_profit_percent": 0.8,
                "stop_loss_percent": 8.0
            },
            "aggressive": {
                "position_size_percent": 10.0,
                "max_positions": 5,
                "min_profit_percent": 0.5,
                "stop_loss_percent": 12.0
            }
        }
        
        return profiles.get(profile_name, profiles["balanced"])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
_settings_instance: Optional[Settings] = None


def get_settings() -> Settings:
    """üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance
    
    if _settings_instance is None:
        _settings_instance = Settings()
    
    return _settings_instance


def reset_settings() -> None:
    """üîÑ –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance
    _settings_instance = None
'''

        (Path("src/config") / "settings.py").write_text(settings_content)

    def _fix_main_py(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py —Å fallback –ª–æ–≥–∏–∫–æ–π
        main_py_content = '''#!/usr/bin/env python3
"""üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (Auto-Fixed)"""

import sys
import os
import argparse
import asyncio
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))


def parse_arguments():
    """üìã –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="ü§ñ DOGE Trading Bot v4.1-refactored (Auto-Fixed)")

    parser.add_argument(
        '--mode', '-m',
        choices=['new', 'legacy', 'hybrid', 'enhanced', 'safe'],
        default='safe',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
    )

    parser.add_argument(
        '--profile', '-p',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
    )

    parser.add_argument(
        '--validate', '-v',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--test-mode', '-t',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
    )

    return parser.parse_args()


async def run_safe_mode(args):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
print("üõ°Ô∏è –ó–∞–ø—É—Å–∫ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config.settings import get_settings
            settings = get_settings()
            print("‚úÖ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except ImportError:
            print("‚ö†Ô∏è –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é")
            settings = None
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        cycle_count = 0
        max_cycles = 10 if args.test_mode else 100
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ (–º–∞–∫—Å–∏–º—É–º {max_cycles} —Ü–∏–∫–ª–æ–≤)...")
        
        while cycle_count < max_cycles:
            cycle_count += 1
            
            print(f"üìä –¶–∏–∫–ª {cycle_count}")
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
            try:
                # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                market_data = {
                    "pair": "DOGE_EUR",
                    "current_price": 0.18,
                    "balance": 1000.0,
                    "timestamp": asyncio.get_event_loop().time()
                }
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                if market_data["current_price"] > 0:
                    print(f"  üí± –¶–µ–Ω–∞ DOGE: {market_data['current_price']} EUR")
                    print(f"  üí∞ –ë–∞–ª–∞–Ω—Å: {market_data['balance']} EUR")
                    print(f"  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    print("  ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(10 if args.test_mode else 30)
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
        
        print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        traceback.print_exc()
        return False


async def run_enhanced_mode(args):
    """üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    try:
        from enhanced_bot import EnhancedBot
        
        bot = EnhancedBot()
        await bot.initialize()
        await bot.run()
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Enhanced –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
        return await run_safe_mode(args)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ enhanced —Ä–µ–∂–∏–º–∞: {e}")
        return await run_safe_mode(args)


async def run_legacy_mode(args):
    """üìú Legacy —Ä–µ–∂–∏–º"""
    print("üìú –ó–∞–ø—É—Å–∫ legacy —Ä–µ–∂–∏–º–∞...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
        if Path("hybrid_bot.py").exists():
            from hybrid_bot import HybridTradingBot
            bot = HybridTradingBot()
            bot.run()
        elif Path("bot.py").exists():
            from bot import TradingBot
            bot = TradingBot()
            bot.run()
        else:
            print("‚ö†Ô∏è Legacy –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
            return await run_safe_mode(args)
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ legacy —Ä–µ–∂–∏–º–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º...")
        return await run_safe_mode(args)


async def validate_configuration(args):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.settings import get_settings
        settings = get_settings()
        settings.validate_all()
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìä API –∫–ª—é—á: {settings.api.exmo_api_key[:8]}..." if settings.api.exmo_api_key else "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {settings.trading.pair}")
        print(f"üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {settings.trading.position_size_percent}%")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if Path("config.py").exists():
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            return True
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()
    
    print("ü§ñ DOGE Trading Bot v4.1-refactored (Auto-Fixed)")
    print("=" * 50)
    
    try:
        if args.validate:
            success = await validate_configuration(args)
            return 0 if success else 1
        
        if args.mode == 'safe':
            success = await run_safe_mode(args)
        elif args.mode == 'enhanced':
            success = await run_enhanced_mode(args)
        elif args.mode == 'legacy':
            success = await run_legacy_mode(args)
        elif args.mode == 'hybrid':
            success = await run_enhanced_mode(args)  # Fallback to enhanced
        else:
            success = await run_safe_mode(args)  # Default fallback
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\\n‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        return 0
    except Exception as e:
        print(f"\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\\n‚å®Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(0)
    except Exception as e:
        print(f"\\nüí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
'''

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py
        with open("main.py", "w", encoding="utf-8") as f:
            f.write(main_py_content)

        self.fixes_applied.append("main.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å fallback –ª–æ–≥–∏–∫–æ–π")
        print(f"{self.GREEN}‚úÖ main.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω{self.END}")

    def _create_fallback_adapters(self):
        """üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        print(f"\n{self.YELLOW}üîÑ –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–¥–∞–ø—Ç–µ—Ä
        adapters_content = '''#!/usr/bin/env python3
"""üîÑ Fallback –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""

import sys
import os
import asyncio
from typing import Dict, Any, Optional
from pathlib import Path


class SafeAdapter:
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è fallback —Ä–µ–∂–∏–º–∞"""
    
    def __init__(self):
        self.initialized = False
        self.cycle_count = 0
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SafeAdapter...")
            self.initialized = True
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
            return False
    
    async def execute_cycle(self) -> Dict[str, Any]:
        """üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        if not self.initialized:
            return {"success": False, "reason": "–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        self.cycle_count += 1
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
            market_data = {
                "pair": "DOGE_EUR",
                "current_price": 0.18,
                "balance": 1000.0
            }
            
            return {
                "success": True,
                "action": "monitor",
                "reason": f"–¶–∏–∫–ª {self.cycle_count}: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω—ã {market_data['current_price']}",
                "data": market_data
            }
            
        except Exception as e:
            return {
                "success": False,
                "reason": f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}"
            }


class LegacyBotAdapter:
    """üìú –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self, use_hybrid: bool = True):
        self.use_hybrid = use_hybrid
        self._old_bot = None
    
    def get_old_bot(self):
        """üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        if self._old_bot is None:
            try:
                if self.use_hybrid and Path("hybrid_bot.py").exists():
                    import hybrid_bot
                    self._old_bot = hybrid_bot.HybridTradingBot()
                elif Path("bot.py").exists():
                    import bot
                    self._old_bot = bot.TradingBot()
                else:
                    raise ImportError("–°—Ç–∞—Ä—ã–µ –±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç: {e}")
                self._old_bot = SafeAdapter()
        
        return self._old_bot
    
    async def run_trading_cycle(self) -> Dict[str, Any]:
        """üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            old_bot = self.get_old_bot()
            
            if hasattr(old_bot, 'execute_cycle'):
                return await old_bot.execute_cycle()
            elif hasattr(old_bot, 'run_cycle'):
                return old_bot.run_cycle()
            else:
                # Fallback –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
                safe_adapter = SafeAdapter()
                await safe_adapter.initialize()
                return await safe_adapter.execute_cycle()
                
        except Exception as e:
            return {"success": False, "reason": f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def get_safe_adapter() -> SafeAdapter:
    """üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    adapter = SafeAdapter()
    await adapter.initialize()
    return adapter


def get_legacy_adapter(use_hybrid: bool = True) -> LegacyBotAdapter:
    """üìú –ü–æ–ª—É—á–µ–Ω–∏–µ legacy –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    return LegacyBotAdapter(use_hybrid)
'''

        (Path("src") / "adapters.py").write_text(adapters_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω—ã fallback –∞–¥–∞–ø—Ç–µ—Ä—ã")
        print(f"{self.GREEN}‚úÖ Fallback –∞–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã{self.END}")

    def _fix_broken_imports(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ broken imports"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ broken imports...{self.END}")

        # –°–æ–∑–¥–∞–µ–º enhanced_bot.py –∫–∞–∫ fallback
        enhanced_bot_content = '''#!/usr/bin/env python3
"""ü§ñ Enhanced –±–æ—Ç (Auto-Generated Fallback)"""

import asyncio
import logging
from pathlib import Path


class EnhancedBot:
    """ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç (fallback –≤–µ—Ä—Å–∏—è)"""
    
    def __init__(self):
        self.setup_logging()
        self.running = False
        self.cycle_count = 0
    
    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        Path("logs").mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/enhanced_bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    async def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced –±–æ—Ç–∞ (fallback)...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components_available = 0
            
            try:
                from src.config.settings import get_settings
                settings = get_settings()
                components_available += 1
                self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            try:
                from src.adapters import SafeAdapter
                components_available += 1
                self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            self.logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {components_available}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def run(self):
        """üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        self.running = True
        
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            while self.running and self.cycle_count < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                self.cycle_count += 1
                
                self.logger.info(f"üìä –¶–∏–∫–ª {self.cycle_count}")
                
                # –ü—Ä–æ—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                try:
                    result = await self._execute_cycle()
                    self.logger.info(f"‚úÖ {result.get('reason', '–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω')}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                
                await asyncio.sleep(15)  # 15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        finally:
            await self.shutdown()
    
    async def _execute_cycle(self):
        """üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        market_data = {
            "pair": "DOGE_EUR",
            "current_price": 0.18,
            "balance": 1000.0
        }
        
        return {
            "success": True,
            "action": "monitor",
            "reason": f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: —Ü–µ–Ω–∞ {market_data['current_price']} EUR"
        }
    
    async def shutdown(self):
        """üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self.running = False
        self.logger.info("‚úÖ Enhanced –±–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
'''

        with open("enhanced_bot.py", "w", encoding="utf-8") as f:
            f.write(enhanced_bot_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω fallback enhanced_bot.py")
        print(f"{self.GREEN}‚úÖ Enhanced bot fallback —Å–æ–∑–¥–∞–Ω{self.END}")

    def _create_basic_infrastructure(self):
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print(f"\n{self.YELLOW}üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫—ç—à
        cache_content = '''#!/usr/bin/env python3
"""üíæ –ë–∞–∑–æ–≤—ã–π –∫—ç—à (Fallback)"""

import asyncio
from typing import Any, Optional


class SimpleCache:
    """üíæ –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à"""
    
    def __init__(self):
        self._storage = {}
        self._running = False
    
    async def start(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –∫—ç—à–∞"""
        self._running = True
    
    async def stop(self):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—ç—à–∞"""
        self._running = False
        self._storage.clear()
    
    async def get(self, key: str, default: Any = None) -> Any:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        return self._storage.get(key, default)
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        self._storage[key] = value
        
        # –ü—Ä–æ—Å—Ç–æ–π TTL (–±–µ–∑ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏)
        if ttl:
            asyncio.create_task(self._expire_key(key, ttl))
    
    async def _expire_key(self, key: str, ttl: int):
        """‚è∞ –ò—Å—Ç–µ—á–µ–Ω–∏–µ –∫–ª—é—á–∞"""
        await asyncio.sleep(ttl)
        self._storage.pop(key, None)
'''

        (Path("src/infrastructure/cache") / "simple_cache.py").write_text(cache_content)

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_content = '''#!/usr/bin/env python3
"""üìä –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Fallback)"""

import asyncio
import logging
from typing import Dict, Any, Optional


class SimpleMonitoring:
    """üìä –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self._stats = {
            "trades_count": 0,
            "successful_trades": 0,
            "api_calls": 0
        }
        self._running = False
    
    async def start(self):
        """üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = True
        self.logger.info("üìä –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self._running = False
        self.logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def record_trade(self, pair: str, action: str, quantity: float, price: float, success: bool, profit: Optional[float] = None):
        """üìà –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏"""
        self._stats["trades_count"] += 1
        if success:
            self._stats["successful_trades"] += 1
        
        self.logger.info(f"üìà –°–¥–µ–ª–∫–∞: {action} {quantity} {pair} –ø–æ {price}, —É—Å–ø–µ—Ö: {success}")
    
    async def record_balance(self, currency: str, balance: float):
        """üí∞ –ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞"""
        self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å {currency}: {balance}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "monitoring_type": "SimpleMonitoring",
            "running": self._running,
            "stats": self._stats.copy()
        }
'''

        (Path("src/infrastructure/monitoring") / "simple_monitoring.py").write_text(monitoring_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        print(f"{self.GREEN}‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞{self.END}")

    def _update_dependencies(self):
        """üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print(f"\n{self.YELLOW}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π requirements.txt
        requirements_content = '''# üêç –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (Auto-Fixed)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
requests>=2.28.0
pandas>=1.5.0
numpy>=1.21.0

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
python-dotenv>=0.19.0

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
matplotlib>=3.5.0
seaborn>=0.11.0

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
psutil>=5.9.0

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
pytest>=7.0.0
pytest-asyncio>=0.21.0

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
aiosqlite>=0.17.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
python-dateutil>=2.8.0
'''

        with open("requirements.txt", "w") as f:
            f.write(requirements_content)

        # –û–±–Ω–æ–≤–ª—è–µ–º .env.example
        env_example_content = '''# üîß –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (Auto-Fixed)

# API –∫–ª—é—á–∏ EXMO
EXMO_API_KEY=your_api_key_here
EXMO_API_SECRET=your_api_secret_here

# –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_PAIR=DOGE_EUR
POSITION_SIZE_PERCENT=6.0

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=INFO
MONITORING_ENABLED=true
MONITORING_PORT=8080

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CACHE_ENABLED=true
CACHE_TTL=300

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
STORAGE_TYPE=json
STORAGE_PATH=data
BACKUP_ENABLED=true

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
NOTIFICATION_TYPE=console
'''

        with open(".env.example", "w") as f:
            f.write(env_example_content)

        self.fixes_applied.append("–æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print(f"{self.GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã{self.END}")

    def _create_working_test(self):
        """üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"\n{self.YELLOW}üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tests
        Path("tests").mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_content = '''#!/usr/bin/env python3
"""üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã (Auto-Generated)"""

import pytest
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))


class TestBasicSystem:
    """üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    def test_python_version(self):
        """üêç –¢–µ—Å—Ç –≤–µ—Ä—Å–∏–∏ Python"""
        assert sys.version_info >= (3, 8), "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+"
    
    def test_imports(self):
        """üì¶ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
        import json
        import asyncio
        import logging
        assert True
    
    def test_config_import(self):
        """‚öôÔ∏è –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            from config.settings import get_settings
            settings = get_settings()
            assert settings is not None
        except ImportError:
            pytest.skip("–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def test_adapters_import(self):
        """üîÑ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        try:
            from adapters import SafeAdapter
            adapter = SafeAdapter()
            assert adapter is not None
        except ImportError:
            pytest.skip("–ê–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    @pytest.mark.asyncio
    async def test_safe_adapter(self):
        """üõ°Ô∏è –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
        try:
            from adapters import SafeAdapter
            
            adapter = SafeAdapter()
            result = await adapter.initialize()
            assert result is True
            
            cycle_result = await adapter.execute_cycle()
            assert cycle_result["success"] is True
            
        except ImportError:
            pytest.skip("SafeAdapter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    @pytest.mark.asyncio
    async def test_enhanced_bot(self):
        """ü§ñ –¢–µ—Å—Ç enhanced –±–æ—Ç–∞"""
        try:
            from enhanced_bot import EnhancedBot
            
            bot = EnhancedBot()
            result = await bot.initialize()
            assert result is True
            
        except ImportError:
            pytest.skip("EnhancedBot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ pytest
    print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    test_instance = TestBasicSystem()
    
    try:
        test_instance.test_python_version()
        print("‚úÖ Python –≤–µ—Ä—Å–∏—è")
    except Exception as e:
        print(f"‚ùå Python –≤–µ—Ä—Å–∏—è: {e}")
    
    try:
        test_instance.test_imports()
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {e}")
    
    try:
        test_instance.test_config_import()
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    print("üéâ –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
'''

        with open("tests/test_basic_fixed.py", "w") as f:
            f.write(test_content)

        # –°–æ–∑–¥–∞–µ–º conftest.py
        conftest_content = '''#!/usr/bin/env python3
"""üß™ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest (Auto-Fixed)"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))

@pytest.fixture
def sample_config():
    """‚öôÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    return {
        "api_key": "test_key",
        "api_secret": "test_secret",
        "pair": "DOGE_EUR",
        "test_mode": True
    }
'''

        with open("tests/conftest.py", "w") as f:
            f.write(conftest_content)

        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç")
        print(f"{self.GREEN}‚úÖ –†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω{self.END}")

    def _final_verification(self):
        """‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
        print(f"\n{self.YELLOW}‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...{self.END}")

        checks = [
            ("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ src/", self._verify_src_structure),
            ("üìÑ Core —Ñ–∞–π–ª—ã", self._verify_core_files),
            ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self._verify_configuration),
            ("üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã", self._verify_adapters),
            ("üß™ –¢–µ—Å—Ç—ã", self._verify_tests),
            ("üöÄ Main.py", self._verify_main_py)
        ]

        verification_results = []

        for check_name, check_func in checks:
            try:
                result = check_func()
                status = "‚úÖ" if result else "‚ùå"
                verification_results.append((check_name, result))
                print(f"  {status} {check_name}")
            except Exception as e:
                verification_results.append((check_name, False))
                print(f"  ‚ùå {check_name}: {e}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        passed = sum(1 for _, result in verification_results if result)
        total = len(verification_results)

        if passed >= total * 0.8:  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            print(f"\n{self.GREEN}üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ({passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏){self.END}")
            return True
        else:
            print(f"\n{self.YELLOW}‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞ ({passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏){self.END}")
            return False

    def _verify_src_structure(self) -> bool:
        """üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã src/"""
        required_dirs = [
            "src/core", "src/config", "src/infrastructure"
        ]
        return all(Path(d).exists() for d in required_dirs)

    def _verify_core_files(self) -> bool:
        """üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ core —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            "src/core/interfaces.py",
            "src/core/models.py",
            "src/core/exceptions.py",
            "src/core/constants.py"
        ]
        return all(Path(f).exists() for f in required_files)

    def _verify_configuration(self) -> bool:
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return Path("src/config/settings.py").exists()

    def _verify_adapters(self) -> bool:
        """üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        return Path("src/adapters.py").exists()

    def _verify_tests(self) -> bool:
        """üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        return Path("tests/test_basic_fixed.py").exists()

    #!/usr/bin/env python3
"""üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""

import os
import sys
import shutil
import subprocess
import importlib.util
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
import json


class AutoFixPatch:
    """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""

    def __init__(self):
        self.root_dir = Path(".")
        self.backup_dir = Path("backup_before_autofix")
        self.errors_found = []
        self.fixes_applied = []
        self.warnings = []

        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.GREEN = "\033[92m"
        self.RED = "\033[91m"
        self.YELLOW = "\033[93m"
        self.BLUE = "\033[94m"
        self.END = "\033[0m"

    def apply_auto_fix(self):
        """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print(f"{self.BLUE}üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö{self.END}")
        print("=" * 60)

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self._create_safety_backup()

            # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            self._diagnose_issues()

            # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            self._fix_pytest_conflicts()

            # 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ core —Ñ–∞–π–ª—ã
            self._create_missing_core_files()

            # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º main.py
            self._fix_main_py()

            # 6. –°–æ–∑–¥–∞–µ–º fallback –∞–¥–∞–ø—Ç–µ—Ä—ã
            self._create_fallback_adapters()

            # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º imports
            self._fix_broken_imports()

            # 8. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self._create_basic_infrastructure()

            # 9. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            self._update_dependencies()

            # 10. –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç
            self._create_working_test()

            # 11. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self._final_verification()

            print(f"\n{self.GREEN}‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!{self.END}")
            self._print_summary()

        except Exception as e:
            print(f"\n{self.RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}{self.END}")
            self._restore_from_backup()
            raise

    def _create_safety_backup(self):
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞"""
        print(f"{self.YELLOW}üíæ –°–æ–∑–¥–∞–Ω–∏–µ safety –±—ç–∫–∞–ø–∞...{self.END}")

        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)

        self.backup_dir.mkdir()

        # –ë—ç–∫–∞–ø–∏–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        important_files = [
            "main.py", "config.py", "requirements.txt", ".env",
            "bot.py", "hybrid_bot.py", "api_client.py"
        ]

        for file_name in important_files:
            file_path = self.root_dir / file_name
            if file_path.exists():
                shutil.copy2(file_path, self.backup_dir / file_name)
                print(f"  üìÑ {file_name}")

        # –ë—ç–∫–∞–ø–∏–º src/ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        src_dir = self.root_dir / "src"
        if src_dir.exists():
            shutil.copytree(src_dir, self.backup_dir / "src")
            print(f"  üìÅ src/")

        print(f"{self.GREEN}‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ {self.backup_dir}{self.END}")

    def _diagnose_issues(self):
        """üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º"""
        print(f"\n{self.YELLOW}üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º...{self.END}")

        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if self._check_pytest_conflicts():
            issues.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        missing_files = self._check_missing_files()
        if missing_files:
            issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {len(missing_files)} —Ñ–∞–π–ª–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º broken imports
        broken_imports = self._check_broken_imports()
        if broken_imports:
            issues.append(f"{len(broken_imports)} broken imports")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        if not self._check_directory_structure():
            issues.append("–Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

        self.errors_found = issues

        if issues:
            print(f"{self.RED}‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}{self.END}")
            for issue in issues:
                print(f"  ‚Ä¢ {issue}")
        else:
            print(f"{self.GREEN}‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ{self.END}")

    def _fix_pytest_conflicts(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...{self.END}")

        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã
            conflicting_packages = [
                "pytest-twisted", "pytest-qt", "pytest-xdist"
            ]

            for package in conflicting_packages:
                try:
                    subprocess.run([sys.executable, "-m", "pip", "uninstall", package, "-y"],
                                 capture_output=True, check=False)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω {package}")
                except:
                    pass

            # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pytest
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade",
                          "pytest", "pytest-asyncio"],
                         capture_output=True, check=True)

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π pytest.ini
            pytest_ini_content = """[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    -p no:twisted
    -p no:qt
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
"""

            with open("pytest.ini", "w") as f:
                f.write(pytest_ini_content)

            self.fixes_applied.append("pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print(f"{self.GREEN}‚úÖ pytest –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã{self.END}")

        except Exception as e:
            self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å pytest: {e}")
            print(f"{self.YELLOW}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å pytest: {e}{self.END}")

    def _create_missing_core_files(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤"""
        print(f"\n{self.YELLOW}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö core —Ñ–∞–π–ª–æ–≤...{self.END}")

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring",
            "tests", "logs", "data"
        ]

        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
        init_dirs = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/cache",
            "src/infrastructure/persistence", "src/infrastructure/monitoring"
        ]

        for directory in init_dirs:
            init_file = Path(directory) / "__init__.py"
            init_file.write_text('"""üì¶ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""\n')

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ core —Ñ–∞–π–ª—ã
        self._create_core_interfaces()
        self._create_core_models()
        self._create_core_exceptions()
        self._create_core_constants()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._create_config_settings()

        print(f"{self.GREEN}‚úÖ Core —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã{self.END}")
        self.fixes_applied.append("—Å–æ–∑–¥–∞–Ω—ã core —Ñ–∞–π–ª—ã")

    def _create_core_interfaces(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ core –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        interfaces_content = '''#!/usr/bin/env python3
"""üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from abc import ABC, abstractmethod
from typing import Protocol, Dict, Any, Optional, List
from decimal import Decimal


class IExchangeAPI(Protocol):
    """üåê –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å API –±–∏—Ä–∂–∏"""
    
    async def get_balance(self, currency: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã"""
        ...
    
    async def get_current_price(self, pair: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –ø–∞—Ä—ã"""
        ...
    
    async def create_order(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        ...


class ICacheService(Protocol):
    """üíæ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def get(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        ...
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        ...
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        ...
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        ...


class IMonitoringService(Protocol):
    """üìä –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    async def record_trade(self, pair: str, action: str, quantity: float, price: float, success: bool, profit: Optional[float] = None) -> None:
        """–ó–∞–ø–∏—Å—å —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        ...
    
    async def record_balance(self, currency: str, balance: float) -> None:
        """–ó–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞"""
        ...
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        ...


class INotificationService(Protocol):
    """üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    async def send_alert(self, alert: Any) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        ...


class IRepository(Protocol):
    """üóÑÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    
    async def save(self, entity: Any) -> Any:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        ...
    
    async def find_by_id(self, entity_id: str) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ –ø–æ ID"""
        ...
    
    async def find_all(self) -> List[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        ...


class IUnitOfWork(Protocol):
    """üîÑ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Unit of Work"""
    
    async def commit(self) -> None:
        """–§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...
    
    async def rollback(self) -> None:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        ...
'''

        (Path("src/core") / "interfaces.py").write_text(interfaces_content)

    def _create_core_models(self):
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ core –º–æ–¥–µ–ª–µ–π"""
        models_content = '''#!/usr/bin/env python3
"""üèóÔ∏è –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any
from enum import Enum


class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    BUY = "buy"
    SELL = "sell"


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    FILLED = "filled"
    CANCELLED = "cancelled"
    FAILED = "failed"


@dataclass
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""
    base: str
    quote: str
    
    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"
    
    @classmethod
    def from_string(cls, pair_str: str) -> 'TradingPair':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        base, quote = pair_str.split('_')
        return cls(base, quote)


@dataclass
class TradeSignal:
    """üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    action: str
    quantity: Decimal
    price: Decimal
    confidence: float
    reason: str
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    
    @property
    def current_value(self) -> Decimal:
        """–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏"""
        return self.quantity * self.avg_price
    
    def update_position(self, new_quantity: Decimal, new_price: Decimal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if new_quantity > 0:
            total_quantity = self.quantity + new_quantity
            total_cost = self.total_cost + (new_quantity * new_price)
            self.avg_price = total_cost / total_quantity
            self.quantity = total_quantity
            self.total_cost = total_cost
            self.updated_at = datetime.now()


@dataclass
class TradeResult:
    """üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    trade_id: Optional[str] = None
    pair: str = ""
    action: str = ""
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    success: bool = False
    profit: Decimal = Decimal("0")
    timestamp: datetime = field(default_factory=datetime.now)
    error_message: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class TradeOrder:
    """üìù –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–¥–µ—Ä"""
    order_id: Optional[str] = None
    pair: str = ""
    order_type: OrderType = OrderType.BUY
    quantity: Decimal = Decimal("0")
    price: Decimal = Decimal("0")
    status: OrderStatus = OrderStatus.PENDING
    created_at: datetime = field(default_factory=datetime.now)
    filled_at: Optional[datetime] = None
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ConfigProfile:
    """‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name: str
    position_size_percent: float
    max_positions: int
    risk_level: str
    settings: Dict[str, Any] = field(default_factory=dict)


@dataclass
class APIResponse:
    """üåê –û—Ç–≤–µ—Ç API"""
    success: bool
    data: Any = None
    error: Optional[str] = None
    status_code: Optional[int] = None
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class ErrorInfo:
    """‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    error_type: str
    message: str
    details: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
'''

        (Path("src/core") / "models.py").write_text(models_content)

    def _create_core_exceptions(self):
        """üö® –°–æ–∑–¥–∞–Ω–∏–µ core –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        exceptions_content = '''#!/usr/bin/env python3
"""üö® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""


class TradingSystemError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, message: str, details: dict = None):
        super().__init__(message)
        self.message = message
        self.details = details or {}


class ConfigurationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class APIError(TradingSystemError):
    """–û—à–∏–±–∫–∞ API"""
    
    def __init__(self, message: str, status_code: int = None, details: dict = None):
        super().__init__(message, details)
        self.status_code = status_code


class RateLimitError(APIError):
    """–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    pass


class ConnectionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    pass


class PositionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    pass


class StrategyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass


class MonitoringError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    pass


class CacheError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pass


class PersistenceError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    pass


class ValidationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    pass


class DependencyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ dependency injection"""
    
    def __init__(self, service_name: str, message: str):
        super().__init__(f"Dependency error for {service_name}: {message}")
        self.service_name = service_name
'''

        (Path("src/core") / "exceptions.py").write_text(exceptions_content)

    def _create_core_constants(self):
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ core –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        constants_content = '''#!/usr/bin/env python3
"""üìä –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from decimal import Decimal


# üåê API –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class API:
    EXMO_BASE_URL = "https://api.exmo.com/v1.1/"
    EXMO_TIMEOUT = 10
    EXMO_MAX_RETRIES = 3
    
    DEFAULT_CALLS_PER_MINUTE = 30
    DEFAULT_CALLS_PER_HOUR = 300
    
    HTTP_OK = 200
    HTTP_TOO_MANY_REQUESTS = 429
    HTTP_UNAUTHORIZED = 401


# üí± –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Trading:
    DEFAULT_PAIR = "DOGE_EUR"
    SUPPORTED_PAIRS = ["DOGE_EUR", "DOGE_USD", "DOGE_BTC", "ETH_EUR", "BTC_EUR"]
    
    MIN_ORDER_SIZE = Decimal("5.0")
    MIN_QUANTITY = Decimal("0.000001")
    MIN_PRICE = Decimal("0.00000001")
    
    TAKER_FEE = Decimal("0.003")
    MAKER_FEE = Decimal("0.002")


# üõ°Ô∏è –†–∏—Å–∫-–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Risk:
    DEFAULT_POSITION_SIZE = 6.0  # %
    DEFAULT_STOP_LOSS = 8.0      # %
    DEFAULT_TAKE_PROFIT = 2.0    # %
    
    MAX_POSITION_SIZE = 15.0     # %
    MAX_DAILY_LOSS = 5.0         # %


# ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
class Timing:
    DEFAULT_UPDATE_INTERVAL = 30    # —Å–µ–∫—É–Ω–¥
    API_TIMEOUT = 10                # —Å–µ–∫—É–Ω–¥
    CACHE_DEFAULT_TTL = 300         # —Å–µ–∫—É–Ω–¥
    CACHE_PRICE_TTL = 30            # —Å–µ–∫—É–Ω–¥
    CACHE_BALANCE_TTL = 60          # —Å–µ–∫—É–Ω–¥


# üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
class Profiles:
    CONSERVATIVE = {
        "name": "conservative",
        "position_size": 4.0,
        "max_positions": 2,
        "risk_level": "low"
    }
    
    BALANCED = {
        "name": "balanced", 
        "position_size": 6.0,
        "max_positions": 3,
        "risk_level": "medium"
    }
    
    AGGRESSIVE = {
        "name": "aggressive",
        "position_size": 10.0,
        "max_positions": 5,
        "risk_level": "high"
    }
'''

        (Path("src/core") / "constants.py").write_text(constants_content)

    def _create_config_settings(self):
        """‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        settings_content = '''#!/usr/bin/env python3
"""‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

import os
from dataclasses import dataclass, field
from typing import Dict, Optional
from decimal import Decimal

try:
    from dotenv import load_dotenv
    load_dotenv()
    DOTENV_AVAILABLE = True
except ImportError:
    DOTENV_AVAILABLE = False

from ..core.exceptions import ConfigurationError


@dataclass
class APISettings:
    """üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
    exmo_api_key: str = ""
    exmo_api_secret: str = ""
    exmo_base_url: str = "https://api.exmo.com/v1.1/"
    exmo_timeout: int = 10
    exmo_max_retries: int = 3
    
    calls_per_minute: int = 30
    calls_per_hour: int = 300
    adaptive_rate_limiting: bool = True
    
    cache_enabled: bool = True
    cache_default_ttl: int = 300
    
    def __post_init__(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.exmo_api_key:
            self.exmo_api_key = os.getenv('EXMO_API_KEY', '')
        
        if not self.exmo_api_secret:
            self.exmo_api_secret = os.getenv('EXMO_API_SECRET', '')
    
    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        if not self.exmo_api_key:
            raise ConfigurationError("EXMO API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.exmo_api_secret:
            raise ConfigurationError("EXMO API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if len(self.exmo_api_key) < 16:
            raise ConfigurationError("EXMO API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")


@dataclass
class TradingSettings:
    """üí± –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    pair: str = "DOGE_EUR"
    position_size_percent: float = 6.0
    max_positions: int = 3
    
    min_profit_percent: float = 0.8
    stop_loss_percent: float = 8.0
    
    dca_enabled: bool = True
    dca_drop_threshold: float = 1.5
    dca_purchase_size: float = 3.0
    dca_max_purchases: int = 5
    
    monitoring_enabled: bool = True
    monitoring_port: int = 8080
    
    def validate(self) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.position_size_percent <= 0 or self.position_size_percent > 15:
            raise ConfigurationError("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 15%")
        
        if self.stop_loss_percent <= 0:
            raise ConfigurationError("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")


@dataclass
class SystemSettings:
    """üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    log_level: str = "INFO"
    log_file: str = "logs/trading_bot.log"
    
    data_dir: str = "data"
    backup_enabled: bool = True
    
    storage_type: str = "json"  # json, sqlite
    export_enabled: bool = True
    export_interval: int = 3600  # —Å–µ–∫—É–Ω–¥


class Settings:
    """‚öôÔ∏è –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self):
        self.api = APISettings()
        self.trading = TradingSettings() 
        self.system = SystemSettings()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if DOTENV_AVAILABLE:
            self._load_from_env()
    
    def _load_from_env(self):
        """üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ APISettings.__post_init__
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('TRADING_PAIR'):
            self.trading.pair = os.getenv('TRADING_PAIR')
        
        if os.getenv('POSITION_SIZE_PERCENT'):
            try:
                self.trading.position_size_percent = float(os.getenv('POSITION_SIZE_PERCENT'))
            except ValueError:
                pass
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if os.getenv('LOG_LEVEL'):
            self.system.log_level = os.getenv('LOG_LEVEL')
    
    def validate_all(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.api.validate()
            self.trading.validate()
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get_profile(self, profile_name: str) -> Dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        profiles = {
            "conservative": {
                "position_size_percent": 4.0,
                "max_positions": 2,
                "min_profit_percent": 1.2,
                "stop_loss_percent": 6.0
            },
            "balanced": {
                "position_size_percent": 6.0,
                "max_positions": 3,
                "min_profit_percent": 0.8,
                "stop_loss_percent": 8.0
            },
            "aggressive": {
                "position_size_percent": 10.0,
                "max_positions": 5,
                "min_profit_percent": 0.5,
                "stop_loss_percent": 12.0
            }
        }
        
        return profiles.get(profile_name, profiles["balanced"])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
_settings_instance: Optional[Settings] = None


def get_settings() -> Settings:
    """üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance
    
    if _settings_instance is None:
        _settings_instance = Settings()
    
    return _settings_instance


def reset_settings() -> None:
    """üîÑ –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _settings_instance
    _settings_instance = None
'''

        (Path("src/config") / "settings.py").write_text(settings_content)

    def _fix_main_py(self):
        """üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py"""
        print(f"\n{self.YELLOW}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py...{self.END}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py —Å fallback –ª–æ–≥–∏–∫–æ–π
        main_py_content = '''#!/usr/bin/env python3
"""üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (Auto-Fixed)"""

import sys
import os
import argparse
import asyncio
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))


def parse_arguments():
    """üìã –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="ü§ñ DOGE Trading Bot v4.1-refactored (Auto-Fixed)")

    parser.add_argument(
        '--mode', '-m',
        choices=['new', 'legacy', 'hybrid', 'enhanced', 'safe'],
        default='safe',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
    )

    parser.add_argument(
        '--profile', '-p',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
    )

    parser.add_argument(
        '--validate', '-v',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--test-mode', '-t',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
    )

    return parser.parse_args()


async def run_safe_mode(args):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
    print("üõ°Ô∏è