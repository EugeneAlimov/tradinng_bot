# dca_limiter.py
"""üõ°Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å DCA –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è"""

import time
import logging
from datetime import datetime
from typing import Dict, Any, Tuple


class DCALimiter:
    """üõ°Ô∏è –£–º–Ω—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å DCA –ø–æ–∫—É–ø–æ–∫"""
    
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # üõ°Ô∏è –õ–∏–º–∏—Ç—ã DCA
        self.MAX_DCA_PER_DAY = getattr(config, 'DCA_MAX_PER_DAY', 5)
        self.MAX_CONSECUTIVE_DCA = getattr(config, 'DCA_MAX_CONSECUTIVE', 3)
        self.MIN_DCA_INTERVAL_MINUTES = getattr(config, 'DCA_MIN_INTERVAL_MINUTES', 30)
        self.LOSS_BLOCK_THRESHOLD = getattr(config, 'DCA_LOSS_BLOCK_THRESHOLD', 0.08)
        
        # üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ DCA
        self.daily_dca_count = 0
        self.consecutive_dca_count = 0
        self.last_dca_date = None
        self.last_dca_time = 0
        self.last_successful_sell_time = 0
        
        # üö´ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.is_blocked = False
        self.block_reason = ""
        self.block_until = 0
        
        self.logger.info("üõ°Ô∏è DCALimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üìä –ú–∞–∫—Å DCA –≤ –¥–µ–Ω—å: {self.MAX_DCA_PER_DAY}")
        self.logger.info(f"   üîó –ú–∞–∫—Å –ø–æ–¥—Ä—è–¥: {self.MAX_CONSECUTIVE_DCA}")
    
    def can_execute_dca(self, current_price: float, position_data: Dict[str, Any], 
                       balance: float) -> Tuple[bool, str]:
        """üõ°Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DCA"""
        
        try:
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            self._reset_daily_counters_if_needed()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self._is_temporarily_blocked():
                return False, f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.block_reason}"
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            if self.daily_dca_count >= self.MAX_DCA_PER_DAY:
                self._set_block("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç DCA", 24*3600)
                return False, f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {self.daily_dca_count}/{self.MAX_DCA_PER_DAY}"
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö DCA
            if self.consecutive_dca_count >= self.MAX_CONSECUTIVE_DCA:
                self._set_block("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ DCA –ø–æ–¥—Ä—è–¥", 4*3600)
                return False, f"–õ–∏–º–∏—Ç –ø–æ–¥—Ä—è–¥: {self.consecutive_dca_count}/{self.MAX_CONSECUTIVE_DCA}"
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É DCA
            if self._get_minutes_since_last_dca() < self.MIN_DCA_INTERVAL_MINUTES:
                remaining_minutes = self.MIN_DCA_INTERVAL_MINUTES - self._get_minutes_since_last_dca()
                return False, f"–ö—É–ª–¥–∞—É–Ω: {remaining_minutes:.0f} –º–∏–Ω"
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–±—ã—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            if position_data and position_data.get('quantity', 0) > 0:
                avg_price = position_data.get('avg_price', 0)
                if avg_price > 0:
                    loss_percentage = (avg_price - current_price) / avg_price
                    if loss_percentage > self.LOSS_BLOCK_THRESHOLD:
                        self._set_block(f"–£–±—ã—Ç–æ–∫ {loss_percentage*100:.1f}% –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥", 2*3600)
                        return False, f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã—Ç–∫—É: {loss_percentage*100:.1f}%"
            
            return True, "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DCA –ª–∏–º–∏—Ç–æ–≤: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
    
    def register_dca_success(self, price: float, quantity: float) -> None:
        """üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π DCA"""
        
        self.daily_dca_count += 1
        self.consecutive_dca_count += 1
        self.last_dca_time = time.time()
        
        self.logger.info(f"üìä DCA –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞:")
        self.logger.info(f"   üìä –î–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫: {self.daily_dca_count}")
        self.logger.info(f"   üîó –ü–æ–¥—Ä—è–¥: {self.consecutive_dca_count}")
    
    def register_successful_sell(self) -> None:
        """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏"""
        
        self.consecutive_dca_count = 0
        self.last_successful_sell_time = time.time()
        
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø–æ —É–±—ã—Ç–∫—É
        if self.is_blocked and "—É–±—ã—Ç–æ–∫" in self.block_reason.lower():
            self._clear_block()
        
        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: DCA —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ —Å–±—Ä–æ—à–µ–Ω")
    
    def _reset_daily_counters_if_needed(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
        
        today = datetime.now().date()
        if self.last_dca_date != today:
            old_count = self.daily_dca_count
            self.daily_dca_count = 0
            self.last_dca_date = today
            
            if old_count > 0:
                self.logger.info(f"üîÑ –î–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ DCA —Å–±—Ä–æ—à–µ–Ω: {old_count} -> 0")
    
    def _get_minutes_since_last_dca(self) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π DCA"""
        if self.last_dca_time == 0:
            return float('inf')
        return (time.time() - self.last_dca_time) / 60
    
    def _set_block(self, reason: str, duration_seconds: int) -> None:
        """üö´ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        
        self.is_blocked = True
        self.block_reason = reason
        self.block_until = time.time() + duration_seconds
        
        self.logger.warning(f"üö´ DCA –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê: {reason}")
    
    def _clear_block(self) -> None:
        """‚úÖ –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        
        if self.is_blocked:
            self.is_blocked = False
            self.block_reason = ""
            self.block_until = 0
            self.logger.info(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ DCA —Å–Ω—è—Ç–∞")
    
    def _is_temporarily_blocked(self) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        
        if not self.is_blocked:
            return False
        
        if time.time() >= self.block_until:
            self._clear_block()
            return False
        
        return True
    
    def get_dca_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ DCA –ª–∏–º–∏—Ç–µ—Ä–∞"""
        
        self._reset_daily_counters_if_needed()
        
        return {
            'system_active': True,
            'is_blocked': self.is_blocked,
            'block_reason': self.block_reason,
            'daily_dca_count': self.daily_dca_count,
            'consecutive_dca_count': self.consecutive_dca_count,
            'max_daily_dca': self.MAX_DCA_PER_DAY,
            'max_consecutive_dca': self.MAX_CONSECUTIVE_DCA,
            'minutes_since_last_dca': round(self._get_minutes_since_last_dca(), 1)
        }
