#!/usr/bin/env python3
"""üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è Part 8 - –ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""

import logging
from pathlib import Path


class Migration:
    """üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dir = project_root / "src"
        self.adapters_dir = self.src_dir / "adapters"
        self.logger = logging.getLogger(__name__)

    def execute(self) -> bool:
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self._create_directory_structure()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
            self._create_legacy_bot_adapter()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            self._create_strategy_adapter()
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä
            self._create_main_adapter()
            
            self.logger.info("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: {e}")
            return False

    def _create_directory_structure(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        dirs_to_create = [
            self.adapters_dir,
        ]
        
        for dir_path in dirs_to_create:
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º __init__.py
            init_file = dir_path / "__init__.py"
            if not init_file.exists():
                init_file.write_text('"""üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""\n')

    def _create_legacy_bot_adapter(self):
        """ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        legacy_adapter_content = '''#!/usr/bin/env python3
"""ü§ñ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

import sys
import logging
from pathlib import Path
from typing import Any, Dict, Optional, List

from ..core.interfaces import ILegacyBotAdapter
from ..infrastructure.di_container import injectable


@injectable
class LegacyBotAdapter(ILegacyBotAdapter):
    """ü§ñ –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º"""
    
    def __init__(self, use_hybrid: bool = True):
        self.use_hybrid = use_hybrid
        self.logger = logging.getLogger(f"{__name__}.LegacyBotAdapter")
        self.legacy_bot: Optional[Any] = None
        self.legacy_modules: Dict[str, Any] = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥—É–ª–µ–π
        self.project_root = Path(__file__).parent.parent.parent
        if str(self.project_root) not in sys.path:
            sys.path.insert(0, str(self.project_root))
        
        self.logger.info(f"ü§ñ Legacy –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (hybrid={use_hybrid})")
    
    def get_legacy_bot(self) -> Any:
        """ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        if self.legacy_bot is None:
            self.legacy_bot = self._load_legacy_bot()
        
        return self.legacy_bot
    
    def _load_legacy_bot(self) -> Optional[Any]:
        """üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç
            try:
                from bot import ImprovedTradingBot as TradingBot
                self.logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç (ImprovedTradingBot)")
            except ImportError:
                # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π –±–æ—Ç
                try:
                    from bot import TradingBot
                    self.logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∞–∑–æ–≤—ã–π –±–æ—Ç (TradingBot)")
                except ImportError:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –≤ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–∞—Ö
                    try:
                        from improved_bot import ImprovedTradingBot as TradingBot
                        self.logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–æ—Ç –∏–∑ improved_bot.py")
                    except ImportError:
                        self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ä—ã–π –±–æ—Ç")
                        return None
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
            bot = TradingBot()
            self.logger.info("ü§ñ –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω")
            return bot
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
            return None
    
    def adapt_strategy_call(self, method_name: str, *args, **kwargs) -> Any:
        """üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            bot = self.get_legacy_bot()
            if not bot:
                raise RuntimeError("Legacy –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            if hasattr(bot, method_name):
                method = getattr(bot, method_name)
                result = method(*args, **kwargs)
                
                self.logger.debug(f"üîÑ –í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ {method_name} —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞")
                return result
            else:
                self.logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä–æ–º –±–æ—Ç–µ")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ {method_name}: {e}")
            raise
    
    def get_legacy_config(self) -> Dict[str, Any]:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                import config
                legacy_config = {}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for attr_name in dir(config):
                    if not attr_name.startswith('_'):
                        legacy_config[attr_name] = getattr(config, attr_name)
                
                self.logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return legacy_config
                
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {}
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def get_legacy_strategies(self) -> List[Any]:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            strategies = []
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_modules = [
                'adaptive_dca_strategy',
                'pyramid_strategy', 
                'trailing_stop',
                'strategies'
            ]
            
            for module_name in strategy_modules:
                try:
                    module = __import__(module_name)
                    self.legacy_modules[module_name] = module
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ –º–æ–¥—É–ª–µ
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if (isinstance(attr, type) and 
                            'strategy' in attr_name.lower() and
                            not attr_name.startswith('_')):
                            strategies.append(attr)
                            
                except ImportError:
                    self.logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
            
            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(strategies)} —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
            return strategies
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
            return []
    
    def adapt_position_data(self, legacy_position: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ–≤—ã–π
            adapted_position = {
                'currency': legacy_position.get('currency', 'UNKNOWN'),
                'quantity': float(legacy_position.get('quantity', 0)),
                'avg_price': float(legacy_position.get('avg_price', 0)),
                'total_cost': float(legacy_position.get('total_cost', 0)),
                'timestamp': legacy_position.get('timestamp', None),
                'trades': legacy_position.get('trades', [])
            }
            
            return adapted_position
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {}
    
    def adapt_market_data(self, legacy_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            adapted_data = {
                'current_price': float(legacy_data.get('current_price', 0)),
                'balance': float(legacy_data.get('balance', 0)),
                'timestamp': legacy_data.get('timestamp', None)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            for key in ['volume_24h', 'high_24h', 'low_24h', 'change_24h']:
                if key in legacy_data:
                    adapted_data[key] = float(legacy_data[key])
            
            return adapted_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def run_legacy_bot(self) -> None:
        """üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            bot = self.get_legacy_bot()
            if not bot:
                raise RuntimeError("Legacy –±–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
            if hasattr(bot, 'run'):
                bot.run()
            elif hasattr(bot, 'start'):
                bot.start()
            elif hasattr(bot, 'main_loop'):
                bot.main_loop()
            else:
                self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤ —Å—Ç–∞—Ä–æ–º –±–æ—Ç–µ")
                
        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
            raise
    
    def get_legacy_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            bot = self.get_legacy_bot()
            if not bot:
                return {'status': 'unavailable', 'reason': 'Legacy –±–æ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}
            
            # –ü—ã—Ç