#!/usr/bin/env python3
"""üéØ –ú–∏–≥—Ä–∞—Ü–∏—è Part 6 - –î–æ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""

import logging
from pathlib import Path


class Migration:
    """üéØ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dir = project_root / "src"
        self.domain_dir = self.src_dir / "domain"
        self.logger = logging.getLogger(__name__)

    def execute(self) -> bool:
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self._create_directory_structure()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self._create_trading_strategies()
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
            self._create_risk_management()
            
            self.logger.info("‚úÖ –î–æ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏: {e}")
            return False

    def _create_directory_structure(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        dirs_to_create = [
            self.domain_dir,
            self.domain_dir / "trading",
            self.domain_dir / "trading" / "strategies",
            self.domain_dir / "risk",
        ]
        
        for dir_path in dirs_to_create:
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º __init__.py
            init_file = dir_path / "__init__.py"
            if not init_file.exists():
                init_file.write_text('"""üéØ –î–æ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""\n')

    def _create_trading_strategies(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        dca_strategy_content = '''#!/usr/bin/env python3
"""üõí DCA (Dollar Cost Averaging) —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""

import time
import logging
from typing import Dict, Any, Optional
from decimal import Decimal
from datetime import datetime, timedelta

from ....core.base import BaseStrategy
from ....core.models import TradeSignal, MarketData, Position, TradingPair, SignalAction
from ....core.exceptions import StrategyError
from ....infrastructure.di_container import injectable


@injectable
class DCAStrategy(BaseStrategy):
    """üõí –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("dca_strategy", config)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DCA
        self.drop_threshold_percent = Decimal(str(config.get('drop_threshold_percent', '1.5')))
        self.purchase_size_percent = Decimal(str(config.get('purchase_size_percent', '3.0')))
        self.max_purchases = config.get('max_purchases', 5)
        self.cooldown_minutes = config.get('cooldown_minutes', 20)
        self.max_position_percent = Decimal(str(config.get('max_position_percent', '45.0')))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.last_purchase_time = 0
        self.purchase_count = 0
        self.last_purchase_date = None
        
        self.logger.info(f"üõí DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: "
                        f"–ø–æ—Ä–æ–≥ {self.drop_threshold_percent}%, "
                        f"—Ä–∞–∑–º–µ—Ä {self.purchase_size_percent}%, "
                        f"–º–∞–∫—Å –ø–æ–∫—É–ø–æ–∫ {self.max_purchases}")
    
    async def analyze(self, market_data: MarketData, 
                     position: Optional[Position] = None) -> TradeSignal:
        """üõí –ê–Ω–∞–ª–∏–∑ DCA –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            current_price = market_data.current_price
            trading_pair = market_data.trading_pair
            
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            self._reset_daily_counters_if_needed()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            if not self._is_cooldown_passed():
                remaining_minutes = self._get_remaining_cooldown_minutes()
                return self._create_signal(
                    SignalAction.HOLD.value, trading_pair, Decimal('0'), 
                    confidence=0.1, 
                    reason=f"DCA –∫—É–ª–¥–∞—É–Ω: {remaining_minutes:.0f} –º–∏–Ω"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∫—É–ø–æ–∫
            if self.purchase_count >= self.max_purchases:
                return self._create_signal(
                    SignalAction.HOLD.value, trading_pair, Decimal('0'),
                    confidence=0.1,
                    reason=f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç DCA: {self.purchase_count}/{self.max_purchases}"
                )
            
            # –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_drop = self._analyze_price_drop(market_data)
            if price_drop < self.drop_threshold_percent:
                return self._create_signal(
                    SignalAction.HOLD.value, trading_pair, Decimal('0'),
                    confidence=0.3,
                    reason=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {price_drop:.2f}% < {self.drop_threshold_percent}%"
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            if position and self._would_exceed_max_position(position, market_data):
                return self._create_signal(
                    SignalAction.HOLD.value, trading_pair, Decimal('0'),
                    confidence=0.2,
                    reason=f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å –ø–æ–∑–∏—Ü–∏–∏: {self.max_position_percent}%"
                )
            
            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∫—É–ø–∫–∏
            purchase_amount = self._calculate_purchase_amount(market_data)
            
            if purchase_amount <= 0:
                return self._create_signal(
                    SignalAction.HOLD.value, trading_pair, Decimal('0'),
                    confidence=0.1,
                    reason="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è DCA"
                )
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
            confidence = min(0.8, float(price_drop) / 5.0)  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–¥–µ–Ω–∏—è
            
            self._register_purchase()
            
            return self._create_signal(
                SignalAction.BUY.value, trading_pair, purchase_amount,
                price=current_price,
                confidence=confidence,
                reason=f"DCA –ø–æ–∫—É–ø–∫–∞: –ø–∞–¥–µ–Ω–∏–µ {price_drop:.2f}%, —Ä–∞–∑–º–µ—Ä {purchase_amount}"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DCA: {e}")
            raise StrategyError(self.strategy_name, str(e))
    
    def _analyze_price_drop(self, market_data: MarketData) -> Decimal:
        """üìâ –ê–Ω–∞–ª–∏–∑ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if 'price_change_15m' in market_data.additional_data:
            change_15m = Decimal(str(market_data.additional_data['price_change_15m']))
            return abs(min(Decimal('0'), change_15m))
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return self.drop_threshold_percent + Decimal('0.5')
    
    def _calculate_purchase_amount(self, market_data: MarketData) -> Decimal:
        """üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∫—É–ø–∫–∏"""
        balance = market_data.additional_data.get('balance', 0)
        balance_decimal = Decimal(str(balance))
        
        purchase_amount = balance_decimal * (self.purchase_size_percent / Decimal('100'))
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
        min_order_size = Decimal('5.0')  # EUR
        if purchase_amount < min_order_size:
            return Decimal('0')
        
        return purchase_amount
    
    def _would_exceed_max_position(self, position: Position, market_data: MarketData) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        balance = Decimal(str(market_data.additional_data.get('balance', 0)))
        current_position_value = position.calculate_current_value(market_data.current_price)
        
        purchase_amount = self._calculate_purchase_amount(market_data)
        total_position_value = current_position_value + purchase_amount
        
        max_allowed = balance * (self.max_position_percent / Decimal('100'))
        
        return total_position_value > max_allowed
    
    def _is_cooldown_passed(self) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞"""
        if self.last_purchase_time == 0:
            return True
        
        cooldown_seconds = self.cooldown_minutes * 60
        return time.time() - self.last_purchase_time >= cooldown_seconds
    
    def _get_remaining_cooldown_minutes(self) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∫—É–ª–¥–∞—É–Ω–∞"""
        if self.last_purchase_time == 0:
            return 0
        
        elapsed = time.time() - self.last_purchase_time
        cooldown_seconds = self.cooldown_minutes * 60
        remaining_seconds = max(0, cooldown_seconds - elapsed)
        
        return remaining_seconds / 60
    
    def _reset_daily_counters_if_needed(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        today = datetime.now().date()
        if self.last_purchase_date != today:
            old_count = self.purchase_count
            self.purchase_count = 0
            self.last_purchase_date = today
            
            if old_count > 0:
                self.logger.info(f"üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ DCA: {old_count} -> 0")
    
    def _register_purchase(self) -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏"""
        self.purchase_count += 1
        self.last_purchase_time = time.time()
        self.logger.info(f"üìù DCA –ø–æ–∫—É–ø–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {self.purchase_count}")
    
    def reset_counters(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ (–ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ)"""
        self.purchase_count = 0
        self.last_purchase_time = 0
        self.logger.info("üîÑ –°—á–µ—Ç—á–∏–∫–∏ DCA —Å–±—Ä–æ—à–µ–Ω—ã")
'''

        # –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        pyramid_strategy_content = '''#!/usr/bin/env python3
"""üèóÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂–∏"""

import time
import logging
from typing import Dict, Any, Optional, List
from decimal import Decimal
from datetime import datetime

from ....core.base import BaseStrategy
from ....core.models import TradeSignal, MarketData, Position, TradingPair, SignalAction
from ....core.exceptions import StrategyError
from ....infrastructure.di_container import injectable


@injectable
class PyramidStrategy(BaseStrategy):
    """üèóÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("pyramid_strategy", config)
        
        # –£—Ä–æ–≤–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã
        self.levels = config.get('levels', [
            {"profit_pct": 0.8, "sell_pct": 25.0, "min_eur": 0.08},
            {"profit_pct": 2.0, "sell_pct": 35.0, "min_eur": 0.15},
            {"profit_pct": 4.0, "sell_pct": 25.0, "min_eur": 0.25},
            {"profit_pct": 7.0, "sell_pct": 15.0, "min_eur": 0.40},
        ])
        
        # –ê–≤–∞—Ä–∏–π–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (–ø—Ä–æ–¥–∞–∂–∞ –≤ —É–±—ã—Ç–∫–µ)
        self.emergency_levels = config.get('emergency_levels', [
            {"loss_pct": 8.0, "sell_pct": 30.0, "hold_hours": 4},
            {"loss_pct": 12.0, "sell_pct": 50.0, "hold_hours": 0},
            {"loss_pct": 15.0, "sell_pct": 100.0, "hold_hours": 0},
        ])
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_sell_time = 0
        self.cooldown_minutes = config.get('cooldown_minutes', 10)
        
        self.logger.info(f"üèóÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: "
                        f"{len(self.levels)} —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏, "
                        f"{len(self.emergency_levels)} –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
    
    async def analyze(self, market_data: MarketData, 
                     position: Optional[Position] = None) -> TradeSignal:
        """üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            if not position or position.quantity <= 0:
                return self._create_signal(
                    SignalAction.HOLD.value, market_data.trading_pair, Decimal('0'),
                    confidence=0.1,
                    reason="–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
                )
            
            current_price = market_data.current_price
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            if not self._is_cooldown_passed():
                remaining = self._get_remaining_cooldown_minutes()
                return self._create_signal(
                    SignalAction.HOLD.value, market_data.trading_pair, Decimal('0'),
                    confidence=0.2,
                    reason=f"–ö—É–ª–¥–∞—É–Ω –ø—Ä–æ–¥–∞–∂–∏: {remaining:.0f} –º–∏–Ω"
                )
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
            profit_loss_pct = position.calculate_profit_loss_percentage(current_price)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (—É–±—ã—Ç–æ–∫)
            if profit_loss_pct < 0:
                emergency_signal = self._check_emergency_levels(position, current_price, abs(profit_loss_pct))
                if emergency_signal:
                    return emergency_signal
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–ø—Ä–∏–±—ã–ª—å)
            if profit_loss_pct > 0:
                profit_signal = self._check_profit_levels(position, current_price, profit_loss_pct)
                if profit_signal:
                    return profit_signal
            
            # –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            return self._create_signal(
                SignalAction.HOLD.value, market_data.trading_pair, Decimal('0'),
                confidence=0.4,
                reason=f"–£–¥–µ—Ä–∂–∞–Ω–∏–µ: P&L {profit_loss_pct:.2f}%"
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã: {e}")
            raise StrategyError(self.strategy_name, str(e))
    
    def _check_profit_levels(self, position: Position, current_price: Decimal, 
                           profit_pct: Decimal) -> Optional[TradeSignal]:
        """üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏"""
        
        for level in reversed(self.levels):  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            level_profit = Decimal(str(level['profit_pct']))
            
            if profit_pct >= level_profit:
                sell_percent = Decimal(str(level['sell_pct']))
                min_eur = Decimal(str(level['min_eur']))
                
                sell_quantity = position.quantity * (sell_percent / Decimal('100'))
                sell_value = sell_quantity * current_price
                
                if sell_value >= min_eur:
                    self._register_sell()
                    
                    confidence = min(0.9, float(profit_pct) / 10.0)
                    
                    return self._create_signal(
                        SignalAction.SELL.value, 
                        TradingPair(position.currency, "EUR"),  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º EUR
                        sell_quantity,
                        price=current_price * Decimal('1.002'),  # –ù–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
                        confidence=confidence,
                        reason=f"–ü–∏—Ä–∞–º–∏–¥–∞ {level_profit}%: –ø—Ä–æ–¥–∞–∂–∞ {sell_percent}% = {sell_value:.2f} EUR"
                    )
        
        return None
    
    def _check_emergency_levels(self, position: Position, current_price: Decimal, 
                               loss_pct: Decimal) -> Optional[TradeSignal]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        
        position_age_hours = self._get_position_age_hours(position)
        
        for level in self.emergency_levels:
            level_loss = Decimal(str(level['loss_pct']))
            required_hours = level['hold_hours']
            
            if loss_pct >= level_loss and position_age_hours >= required_hours:
                sell_percent = Decimal(str(level['sell_pct']))
                sell_quantity = position.quantity * (sell_percent / Decimal('100'))
                
                self._register_sell()
                
                return self._create_signal(
                    SignalAction.EMERGENCY_EXIT.value,
                    TradingPair(position.currency, "EUR"),
                    sell_quantity,
                    price=current_price * Decimal('0.998'),  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞
                    confidence=0.95,
                    reason=f"–ê–≤–∞—Ä–∏–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å {level_loss}%: –ø—Ä–æ–¥–∞–∂–∞ {sell_percent}% –ø–æ—Å–ª–µ {position_age_hours:.1f}—á"
                )
        
        return None
    
    def _get_position_age_hours(self, position: Position) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        if isinstance(position.timestamp, str):
            position_time = datetime.fromisoformat(position.timestamp)
        else:
            position_time = position.timestamp
        
        age = datetime.now() - position_time
        return age.total_seconds() / 3600
    
    def _is_cooldown_passed(self) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        if self.last_sell_time == 0:
            return True
        
        cooldown_seconds = self.cooldown_minutes * 60
        return time.time() - self.last_sell_time >= cooldown_seconds
    
    def _get_remaining_cooldown_minutes(self) -> float:
        """‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞"""
        if self.last_sell_time == 0:
            return 0
        
        elapsed = time.time() - self.last_sell_time
        cooldown_seconds = self.cooldown_minutes * 60
        remaining = max(0, cooldown_seconds - elapsed)
        
        return remaining / 60
    
    def _register_sell(self) -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
        self.last_sell_time = time.time()
        self.logger.info("üìù –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
'''

        dca_file = self.domain_dir / "trading" / "strategies" / "dca_strategy.py"
        dca_file.write_text(dca_strategy_content)
        
        pyramid_file = self.domain_dir / "trading" / "strategies" / "pyramid_strategy.py"
        pyramid_file.write_text(pyramid_strategy_content)
        
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

    def _create_risk_management(self):
        """üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        risk_manager_content = '''#!/usr/bin/env python3
"""üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""

import logging
from typing import Dict, Any, Optional, List, Tuple
from decimal import Decimal
from datetime import datetime, timedelta

from ...core.interfaces import IRiskManager
from ...core.models import TradeSignal, Position, RiskMetrics
from ...core.exceptions import RiskManagementError
from ...infrastructure.di_container import injectable


@injectable
class RiskManager(IRiskManager):
    """üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.RiskManager")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
        self.max_position_size_percent = Decimal(str(config.get('max_position_size_percent', '50.0')))
        self.max_daily_loss_percent = Decimal(str(config.get('max_daily_loss_percent', '5.0')))
        self.emergency_exit_threshold = Decimal(str(config.get('emergency_exit_threshold', '15.0')))
        self.max_trades_per_hour = config.get('max_trades_per_hour', 10)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.daily_loss = Decimal('0')
        self.daily_trades = 0
        self.last_reset_date = datetime.now().date()
        self.recent_trades: List[datetime] = []
        self.blocked_until: Optional[datetime] = None
        self.block_reason = ""
        
        self.logger.info(f"üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: "
                        f"–º–∞–∫—Å –ø–æ–∑–∏—Ü–∏—è {self.max_position_size_percent}%, "
                        f"–º–∞–∫—Å —É–±—ã—Ç–æ–∫ {self.max_daily_loss_percent}%")
    
    async def assess_risk(self, signal: TradeSignal, 
                         position: Optional[Position]) -> Dict[str, Any]:
        """üîç –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            self._reset_daily_counters_if_needed()
            
            risk_factors = []
            risk_score = 0.0
            can_execute = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self._is_blocked():
                return {
                    'can_execute': False,
                    'risk_score': 1.0,
                    'risk_factors': [f"–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {self.block_reason}"],
                    'recommendations': ["–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"]
                }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_risk = self._assess_position_size_risk(signal, position)
            risk_factors.extend(position_risk['factors'])
            risk_score += position_risk['score']
            
            if not position_risk['can_execute']:
                can_execute = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            daily_risk = self._assess_daily_limits_risk()
            risk_factors.extend(daily_risk['factors'])
            risk_score += daily_risk['score']
            
            if not daily_risk['can_execute']:
                can_execute = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
            frequency_risk = self._assess_trading_frequency_risk()
            risk_factors.extend(frequency_risk['factors'])
            risk_score += frequency_risk['score']
            
            if not frequency_risk['can_execute']:
                can_execute = False
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–∞
            risk_score = min(1.0, risk_score)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(risk_score, risk_factors)
            
            return {
                'can_execute': can_execute,
                'risk_score': risk_score,
                'risk_factors': risk_factors,
                'recommendations': recommendations,
                'daily_loss_percent': float(self.daily_loss),
                'daily_trades_count': self.daily_trades,
                'trades_per_hour': len(self.recent_trades)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            raise RiskManagementError(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
    
    async def should_block_trading(self, reason: str = None) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self._reset_daily_counters_if_needed()
        
        # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤
        if self.daily_loss >= self.max_daily_loss_percent:
            if not self._is_blocked():
                self._block_trading(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤: {self.daily_loss}%")
            return True
        
        # –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
        if len(self.recent_trades) >= self.max_trades_per_hour:
            if not self._is_blocked():
                self._block_trading(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {len(self.recent_trades)}")
            return True
        
        # –í–Ω–µ—à–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞
        if reason:
            self._block_trading(reason)
            return True
        
        return self._is_blocked()
    
    def _assess_position_size_risk(self, signal: TradeSignal, 
                                  position: Optional[Position]) -> Dict[str, Any]:
        """üìä –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        factors = []
        score = 0.0
        can_execute = True
        
        if signal.action.value in ["buy"]:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            current_position_value = Decimal('0')
            if position:
                current_position_value = position.calculate_current_value(signal.price or Decimal('0'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            signal_value = signal.quantity * (signal.price or Decimal('0'))
            total_position_value = current_position_value + signal_value
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ market_data)
            estimated_balance = Decimal('1000')  # –ó–∞–≥–ª—É—à–∫–∞
            position_percent = (total_position_value / estimated_balance) * Decimal('100')
            
            if position_percent > self.max_position_size_percent:
                factors.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {position_percent:.1f}%")
                score += 0.8
                can_execute = False
            elif position_percent > self.max_position_size_percent * Decimal('0.8'):
                factors.append(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –º–∞–∫—Å —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏: {position_percent:.1f}%")
                score += 0.4
        
        return {
            'factors': factors,
            'score': score,
            'can_execute': can_execute
        }
    
    def _assess_daily_limits_risk(self) -> Dict[str, Any]:
        """üìÖ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        factors = []
        score = 0.0
        can_execute = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤
        if self.daily_loss >= self.max_daily_loss_percent:
            factors.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤: {self.daily_loss}%")
            score += 1.0
            can_execute = False
        elif self.daily_loss >= self.max_daily_loss_percent * Decimal('0.7'):
            factors.append(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É —É–±—ã—Ç–∫–æ–≤: {self.daily_loss}%")
            score += 0.5
        
        return {
            'factors': factors,
            'score': score,
            'can_execute': can_execute
        }
    
    def _assess_trading_frequency_risk(self) -> Dict[str, Any]:
        """‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        factors = []
        score = 0.0
        can_execute = True
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–¥–µ–ª–∫–∏
        hour_ago = datetime.now() - timedelta(hours=1)
        self.recent_trades = [trade_time for trade_time in self.recent_trades if trade_time > hour_ago]
        
        trades_count = len(self.recent_trades)
        
        if trades_count >= self.max_trades_per_hour:
            factors.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {trades_count}")
            score += 1.0
            can_execute = False
        elif trades_count >= self.max_trades_per_hour * 0.8:
            factors.append(f"–í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {trades_count}/{self.max_trades_per_hour}")
            score += 0.3
        
        return {
            'factors': factors,
            'score': score,
            'can_execute': can_execute
        }
    
    def _generate_recommendations(self, risk_score: float, factors: List[str]) -> List[str]:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        if risk_score > 0.7:
            recommendations.append("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏")
        elif risk_score > 0.4:
            recommendations.append("–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã")
        
        if "—É–±—ã—Ç–æ–∫" in " ".join(factors).lower():
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        
        if "—á–∞—Å—Ç–æ—Ç–∞" in " ".join(factors).lower():
            recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏")
        
        if not recommendations:
            recommendations.append("–†–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
        
        return recommendations
    
    def _reset_daily_counters_if_needed(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        today = datetime.now().date()
        if self.last_reset_date != today:
            self.daily_loss = Decimal('0')
            self.daily_trades = 0
            self.last_reset_date = today
            self.logger.info("üîÑ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Ä–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _is_blocked(self) -> bool:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.blocked_until is None:
            return False
        
        if datetime.now() >= self.blocked_until:
            self._unblock_trading()
            return False
        
        return True
    
    def _block_trading(self, reason: str, duration_minutes: int = 60) -> None:
        """üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.blocked_until = datetime.now() + timedelta(minutes=duration_minutes)
        self.block_reason = reason
        self.logger.warning(f"üö´ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {duration_minutes} –º–∏–Ω: {reason}")
    
    def _unblock_trading(self) -> None:
        """‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.blocked_until = None
        self.block_reason = ""
        self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
    
    def register_trade_result(self, profit_loss: Decimal) -> None:
        """üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        self._reset_daily_counters_if_needed()
        
        self.daily_trades += 1
        self.recent_trades.append(datetime.now())
        
        if profit_loss < 0:
            self.daily_loss += abs(profit_loss)
        
        self.logger.debug(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏: P&L {profit_loss}, –¥–Ω–µ–≤–Ω—ã–π —É–±—ã—Ç–æ–∫ {self.daily_loss}%")
    
    def get_risk_metrics(self) -> RiskMetrics:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        return RiskMetrics(
            current_drawdown=self.daily_loss,
            total_trades=self.daily_trades,
            timestamp=datetime.now()
        )


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    config = {
        'max_position_size_percent': 50.0,
        'max_daily_loss_percent': 5.0,
        'emergency_exit_threshold': 15.0,
        'max_trades_per_hour': 10
    }
    
    risk_manager = RiskManager(config)
    print("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –≥–æ—Ç–æ–≤–∞")
'''

        risk_file = self.domain_dir / "risk" / "risk_manager.py"
        risk_file.write_text(risk_manager_content)
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω risk/risk_manager.py")