#!/usr/bin/env python3
"""üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ v4.1-refactored"""

import sys
import os
import logging
import shutil
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any


class MigrationExecutor:
    """üöÄ –ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path.cwd()
        self.backup_dir = self.project_root / "backup_before_migration"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()
        
        # –ß–∞—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.migration_parts = [
            "migration_part1_core_interfaces",
            "migration_part2_core_models", 
            "migration_part3_config",
            "migration_part4_di_container",
            "migration_part5_infrastructure",
            "migration_part6_domain",
            "migration_part7_application",
            "migration_part8_adapters",
            "migration_part9_tests",
            "migration_part10_finalization"
        ]
        
        self.logger.info("üöÄ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤")

    def _setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = self.project_root / "logs"
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "migration.log"),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)

    def run_migration(self) -> bool:
        """üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ú–ò–ì–†–ê–¶–ò–ò v4.1-refactored")
        print("=" * 60)
        
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not self._pre_migration_checks():
                return False
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            if not self._create_backup():
                return False
            
            # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            for part_name in self.migration_parts:
                print(f"\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {part_name}")
                
                if not self._execute_migration_part(part_name):
                    self.logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {part_name}")
                    return False
                
                print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {part_name}")
            
            # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if not self._post_migration_validation():
                return False
            
            # 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self._create_helper_files()
            
            print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode hybrid")
            print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_NEW.md")
            
            return True
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self._rollback_migration()
            return False

    def _pre_migration_checks(self) -> bool:
        """üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        if sys.version_info < (3, 8):
            self.logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = ["config.py", "api_client.py"]
        for file_name in required_files:
            if not (self.project_root / file_name).exists():
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
        try:
            test_file = self.project_root / ".migration_test"
            test_file.write_text("test")
            test_file.unlink()
        except Exception:
            self.logger.error("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
            return False
        
        print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True

    def _create_backup(self) -> bool:
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"""
        print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
        
        try:
            if self.backup_dir.exists():
                shutil.rmtree(self.backup_dir)
            
            self.backup_dir.mkdir(exist_ok=True)
            
            # –§–∞–π–ª—ã –¥–ª—è –±—ç–∫–∞–ø–∞
            files_to_backup = [
                "*.py", "*.json", "*.txt", "*.md", "*.env*"
            ]
            
            backup_count = 0
            for pattern in files_to_backup:
                for file_path in self.project_root.glob(pattern):
                    if file_path.is_file() and not file_path.name.startswith('.'):
                        shutil.copy2(file_path, self.backup_dir / file_path.name)
                        backup_count += 1
            
            # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
            dirs_to_backup = ["data", "logs"]
            for dir_name in dirs_to_backup:
                source_dir = self.project_root / dir_name
                if source_dir.exists():
                    shutil.copytree(source_dir, self.backup_dir / dir_name)
                    backup_count += 1
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_count} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return False

    def _execute_migration_part(self, part_name: str) -> bool:
        """üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            migration_class = self._get_migration_class(part_name)
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
            migration = migration_class(self.project_root)
            success = migration.execute()
            
            if success:
                self.logger.info(f"‚úÖ –ß–∞—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {part_name}")
                return True
            else:
                self.logger.error(f"‚ùå –ß–∞—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {part_name}")
                return False
                
        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {part_name}: {e}")
            return False

    def _get_migration_class(self, part_name: str):
        """üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        class MockMigration:
            def __init__(self, project_root):
                self.project_root = project_root
                self.logger = logging.getLogger(part_name)
                
            def execute(self) -> bool:
                """–ó–∞–≥–ª—É—à–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
                self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {part_name}...")
                
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                if part_name == "migration_part1_core_interfaces":
                    return self._create_core_interfaces()
                elif part_name == "migration_part2_core_models":
                    return self._create_core_models()
                elif part_name == "migration_part3_config":
                    return self._create_config()
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                    return True
                    
            def _create_core_interfaces(self) -> bool:
                """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
                src_dir = self.project_root / "src" / "core"
                src_dir.mkdir(parents=True, exist_ok=True)
                
                # –°–æ–∑–¥–∞–µ–º __init__.py
                (src_dir / "__init__.py").write_text('"""üì¶ Core –º–æ–¥—É–ª—å"""\n')
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                (src_dir / "interfaces.py").write_text('# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã\n')
                
                return True
                
            def _create_core_models(self) -> bool:
                """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
                core_dir = self.project_root / "src" / "core"
                (core_dir / "models.py").write_text('# –ú–æ–¥–µ–ª–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã\n')
                (core_dir / "exceptions.py").write_text('# –ò—Å–∫–ª—é—á–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã\n')
                return True
                
            def _create_config(self) -> bool:
                """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
                config_dir = self.project_root / "src" / "config"
                config_dir.mkdir(parents=True, exist_ok=True)
                
                (config_dir / "__init__.py").write_text('"""‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""\n')
                (config_dir / "settings.py").write_text('# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã\n')
                (config_dir / "constants.py").write_text('# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã\n')
                return True
        
        return MockMigration

    def _post_migration_validation(self) -> bool:
        """‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        required_dirs = [
            "src/core",
            "src/config", 
            "src/infrastructure",
            "src/domain",
            "src/application"
        ]
        
        for dir_path in required_dirs:
            if not (self.project_root / dir_path).exists():
                self.logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {dir_path}")
                return False
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True

    def _create_helper_files(self):
        """üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –ù–æ–≤—ã–π main.py
        main_content = '''#!/usr/bin/env python3
"""üöÄ –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v4.1-refactored"""

import sys
import os
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

def main():
    parser = argparse.ArgumentParser(description="–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç DOGE v4.1-refactored")
    parser.add_argument("--mode", choices=["hybrid", "legacy", "new"], 
                       default="hybrid", help="–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    parser.add_argument("--validate", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    print("üöÄ –¢–û–†–ì–û–í–´–ô –ë–û–¢ DOGE v4.1-refactored")
    print("=" * 40)
    
    if args.validate:
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            from config.settings import get_settings
            settings = get_settings()
            settings.validate()
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    if args.mode == "legacy":
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ legacy —Ä–µ–∂–∏–º–µ...")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
            if os.path.exists("main_old.py"):
                exec(open("main_old.py").read())
            else:
                print("‚ùå Legacy —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ legacy —Ä–µ–∂–∏–º–∞: {e}")
    
    elif args.mode == "hybrid":
        print("üîß –ó–∞–ø—É—Å–∫ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –±–æ—Ç–∞
            print("‚ö†Ô∏è –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --mode legacy –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
    
    elif args.mode == "new":
        print("üÜï –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
            print("‚ö†Ô∏è –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --mode legacy –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")

if __name__ == "__main__":
    main()
'''

        (self.project_root / "main.py").write_text(main_content)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π main.py
        old_main = self.project_root / "main.py"
        if old_main.exists():
            shutil.copy2(old_main, self.project_root / "main_old.py")
        
        # .env.example
        env_example = '''# üîë API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ EXMO
EXMO_API_KEY=your_api_key_here
EXMO_API_SECRET=your_api_secret_here

# üí± –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_PAIR_1=DOGE
TRADING_PAIR_2=EUR
TRADING_PROFILE=balanced
TRADING_MODE=live

# üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
'''
        
        (self.project_root / ".env.example").write_text(env_example)
        
        # requirements.txt
        requirements = '''# üêç –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v4.1-refactored
requests>=2.28.0
python-dotenv>=0.19.0
pandas>=1.5.0
numpy>=1.21.0
matplotlib>=3.5.0
aiohttp>=3.8.0

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
pytest>=7.0.0
pytest-asyncio>=0.21.0
black>=22.0.0
isort>=5.10.0
'''
        
        (self.project_root / "requirements.txt").write_text(requirements)
        
        # README_NEW.md
        readme = '''# ü§ñ DOGE Trading Bot v4.1-refactored

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
pip install -r requirements.txt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
cp .env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª

# –ó–∞–ø—É—Å–∫
python main.py --mode hybrid
```

## ‚öôÔ∏è –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã

- `--mode legacy` - –°—Ç–∞—Ä—ã–π –±–æ—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç)
- `--mode hybrid` - –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
- `--mode new` - –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞

```
‚îú‚îÄ‚îÄ src/                # –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚îú‚îÄ‚îÄ backup_before_migration/  # –ë—ç–∫–∞–ø —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
‚îú‚îÄ‚îÄ main.py            # –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
‚îî‚îÄ‚îÄ main_old.py        # –°—Ç–∞—Ä—ã–π main.py
```

## üîÑ –û—Ç–∫–∞—Ç

```bash
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
cp main_old.py main.py
python main.py
```
'''
        
        (self.project_root / "README_NEW.md").write_text(readme)
        
        print("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")

    def _rollback_migration(self):
        """üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            src_dir = self.project_root / "src"
            if src_dir.exists():
                shutil.rmtree(src_dir)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            if self.backup_dir.exists():
                for item in self.backup_dir.iterdir():
                    if item.is_file():
                        shutil.copy2(item, self.project_root / item.name)
            
            print("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")

    def get_migration_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        return {
            'project_root': str(self.project_root),
            'backup_exists': self.backup_dir.exists(),
            'migration_parts': len(self.migration_parts),
            'src_dir_exists': (self.project_root / "src").exists(),
            'new_main_exists': (self.project_root / "main.py").exists(),
            'old_main_backup': (self.project_root / "main_old.py").exists()
        }


def print_usage():
    """üìñ –ü–µ—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("""
üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê v4.1-refactored

üìã –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—è:
  ‚úÖ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤ –ø–∞–ø–∫–µ src/
  ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≤ backup_before_migration/
  ‚úÖ –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π main.py —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤
  ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Clean Architecture + DI
  ‚úÖ –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python migration_executor.py              # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
  python migration_executor.py --status     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  python migration_executor.py --rollback   # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

‚ö†Ô∏è –í–ê–ñ–ù–û:
  ‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –±—ç–∫–∞–ø –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –±–æ—Ç
  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã

üìö –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
  python main.py --mode legacy     # –°—Ç–∞—Ä—ã–π –±–æ—Ç (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  python main.py --mode hybrid     # –ù–æ–≤—ã–π –±–æ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
  python main.py --validate        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

üÜò –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏:
  cp main_old.py main.py           # –ò–ª–∏ --rollback
""")


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ v4.1-refactored")
    parser.add_argument("--status", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    parser.add_argument("--rollback", action="store_true", help="–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏")
    parser.add_argument("--help-detailed", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞")
    
    args = parser.parse_args()
    
    if args.help_detailed:
        print_usage()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    executor = MigrationExecutor()
    
    if args.status:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        print("üìä –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 30)
        
        status = executor.get_migration_status()
        for key, value in status.items():
            status_emoji = "‚úÖ" if value else "‚ùå"
            print(f"{status_emoji} {key}: {value}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (executor.project_root / "src").exists():
            print("\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ src/:")
            for item in (executor.project_root / "src").rglob("*"):
                if item.is_dir():
                    print(f"  üìÅ {item.relative_to(executor.project_root)}/")
                elif item.suffix == ".py":
                    print(f"  üìÑ {item.relative_to(executor.project_root)}")
        
        return
    
    if args.rollback:
        # –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üîÑ –û–¢–ö–ê–¢ –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 30)
        
        if not executor.backup_dir.exists():
            print("‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω! –û—Ç–∫–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return
        
        print("‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å—é –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower()
        
        if confirm in ["yes", "y", "–¥–∞"]:
            executor._rollback_migration()
            print("‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚ùå –û—Ç–∫–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        
        return
    
    # –û–±—ã—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è
    print("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò")
    print("‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ
    if (executor.project_root / "src").exists():
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ src/")
        print("–í–æ–∑–º–æ–∂–Ω–æ –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞")
        
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower()
        if choice not in ["yes", "y", "–¥–∞"]:
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = executor.run_migration()
    
    if success:
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: python main.py --validate")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π –±–æ—Ç: python main.py --mode legacy")
        print("3. –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–∞–ø–∫–µ src/")
        print("4. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ README_NEW.md")
        
        print("\nüìä –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        for item in sorted((executor.project_root / "src").rglob("*.py")):
            print(f"  üìÑ {item.relative_to(executor.project_root)}")
    else:
        print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ logs/migration.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")


if __name__ == "__main__":
    main()
