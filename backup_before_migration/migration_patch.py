#!/usr/bin/env python3
"""üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""

import os
import shutil
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any


class MigrationPatch:
    """üîÑ –ü–∞—Ç—á –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"""

    def __init__(self):
        self.root_dir = Path(".")
        self.backup_dir = Path("backup_before_migration")
        self.new_structure = [
            "src",
            "src/core",
            "src/config",
            "src/infrastructure",
            "src/infrastructure/api",
            "src/infrastructure/persistence",
            "src/infrastructure/monitoring",
            "src/domain",
            "src/domain/trading",
            "src/domain/trading/strategies",
            "src/domain/risk",
            "src/domain/analytics",
            "src/application",
            "src/application/services",
            "src/application/orchestrators",
            "src/presentation",
            "src/presentation/cli",
            "tests",
            "tests/unit",
            "tests/integration"
        ]

        self.files_to_backup = [
            "bot.py", "main.py", "config.py", "api_client.py",
            "hybrid_bot.py", "hybrid_main.py", "hybrid_config.py",
            "strategies.py", "position_manager.py", "risk_management.py",
            "emergency_exit_manager.py", "dca_limiter.py", "rate_limiter.py",
            "simple_analytics.py", "trades_analyzer.py", "api_service.py"
        ]

    def apply_patch(self):
        """üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ò–ì–†–ê–¶–ò–Æ –ù–ê –ù–û–í–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£")
        print("=" * 60)

        try:
            # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
            self._create_backup()

            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self._create_new_structure()

            # 3. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            self._copy_new_architecture_files()

            # 4. –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã
            self._create_adapters()

            # 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π main.py
            self._create_new_main()

            # 6. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self._migrate_configuration()

            # 7. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
            self._create_tests()

            # 8. –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
            self._update_documentation()

            print("\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞...")
            self._restore_backup()

    def _create_backup(self):
        """üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"""
        print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...")

        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)

        self.backup_dir.mkdir(exist_ok=True)

        for file_name in self.files_to_backup:
            file_path = self.root_dir / file_name
            if file_path.exists():
                shutil.copy2(file_path, self.backup_dir / file_name)
                print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file_name}")

        # –ë—ç–∫–∞–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
        for dir_name in ["data", "logs"]:
            dir_path = self.root_dir / dir_name
            if dir_path.exists():
                shutil.copytree(dir_path, self.backup_dir / dir_name)
                print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")

    def _create_new_structure(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

        for dir_path in self.new_structure:
            full_path = self.root_dir / dir_path
            full_path.mkdir(parents=True, exist_ok=True)
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {dir_path}/")

        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
        init_dirs = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/infrastructure/api", "src/infrastructure/persistence",
            "src/infrastructure/monitoring", "src/domain", "src/domain/trading",
            "src/domain/trading/strategies", "src/domain/risk", "src/domain/analytics",
            "src/application", "src/application/services", "src/application/orchestrators",
            "src/presentation", "src/presentation/cli"
        ]

        for dir_path in init_dirs:
            init_file = self.root_dir / dir_path / "__init__.py"
            init_file.write_text('"""üì¶ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""\n')

    def _copy_new_architecture_files(self):
        """üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")

        # –ó–¥–µ—Å—å –º—ã —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞—Ö
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞—Ç—á–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å –±—ã –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

        self._create_core_files()
        self._create_config_files()
        self._create_infrastructure_files()

    def _create_core_files(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ core —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤

        # interfaces.py - –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        interfaces_content = '''#!/usr/bin/env python3
"""üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from abc import ABC, abstractmethod
from typing import Protocol, Dict, Any, Optional
from decimal import Decimal

# –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
class IExchangeAPI(Protocol):
    async def get_balance(self, currency: str) -> Decimal: ...
    async def get_current_price(self, pair: str) -> Decimal: ...
    async def create_order(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> Dict[str, Any]: ...

class ITradingStrategy(ABC):
    @abstractmethod
    async def analyze(self, market_data: Dict[str, Any], position: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...

class IRiskManager(Protocol):
    async def assess_risk(self, signal: Dict[str, Any], position: Optional[Dict[str, Any]]) -> Dict[str, Any]: ...

class IPositionManager(Protocol):
    async def get_position(self, currency: str) -> Optional[Dict[str, Any]]: ...
    async def update_position(self, trade: Dict[str, Any]) -> None: ...
'''

        (self.root_dir / "src/core/interfaces.py").write_text(interfaces_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/core/interfaces.py")

        # models.py - –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        models_content = '''#!/usr/bin/env python3
"""üéØ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any

@dataclass
class TradingPair:
    base: str
    quote: str

    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"

@dataclass
class TradeSignal:
    action: str
    quantity: Decimal
    price: Decimal
    confidence: float
    reason: str
    timestamp: datetime = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class Position:
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
'''

        (self.root_dir / "src/core/models.py").write_text(models_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/core/models.py")

        # exceptions.py
        exceptions_content = '''#!/usr/bin/env python3
"""üö® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

class TradingSystemError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    pass

class ConfigurationError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass

class APIError(TradingSystemError):
    """–û—à–∏–±–∫–∞ API"""
    pass

class PositionError(TradingSystemError):
    """–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    pass

class StrategyError(TradingSystemError):
    """–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass
'''

        (self.root_dir / "src/core/exceptions.py").write_text(exceptions_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/core/exceptions.py")

    def _create_config_files(self):
        """‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_content = '''#!/usr/bin/env python3
"""‚öôÔ∏è –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

import os
from dataclasses import dataclass
from typing import Optional

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

@dataclass
class TradingSettings:
    # API
    exmo_api_key: str = ""
    exmo_api_secret: str = ""

    # –¢–æ—Ä–≥–æ–≤–ª—è
    position_size_percent: float = 6.0
    min_profit_percent: float = 0.8
    stop_loss_percent: float = 8.0

    # DCA
    dca_enabled: bool = True
    dca_drop_threshold: float = 1.5
    dca_purchase_size: float = 3.0

    def __post_init__(self):
        if not self.exmo_api_key:
            self.exmo_api_key = os.getenv('EXMO_API_KEY', '')
        if not self.exmo_api_secret:
            self.exmo_api_secret = os.getenv('EXMO_API_SECRET', '')

    def validate(self):
        if not self.exmo_api_key or not self.exmo_api_secret:
            raise ValueError("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

def get_settings() -> TradingSettings:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return TradingSettings()
'''

        (self.root_dir / "src/config/settings.py").write_text(config_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/config/settings.py")

    def _create_infrastructure_files(self):
        """üåê –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

        # API –∞–¥–∞–ø—Ç–µ—Ä
        api_adapter_content = '''#!/usr/bin/env python3
"""üåê –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from decimal import Decimal
from typing import Dict, Any

class APIAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞"""

    def __init__(self, api_key: str, api_secret: str):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API –∫–ª–∏–µ–Ω—Ç
        try:
            from api_client import ExmoAPIClient
            self.old_client = ExmoAPIClient(api_key, api_secret)
        except ImportError:
            raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π API –∫–ª–∏–µ–Ω—Ç")

    async def get_balance(self, currency: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç"""
        try:
            user_info = self.old_client.get_user_info()
            if user_info and 'balances' in user_info:
                balance = user_info['balances'].get(currency, '0')
                return Decimal(str(balance))
            return Decimal('0')
        except Exception:
            return Decimal('0')

    async def get_current_price(self, pair: str) -> Decimal:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç"""
        try:
            ticker = self.old_client.get_ticker()
            if ticker and pair in ticker:
                price = ticker[pair]['last_trade']
                return Decimal(str(price))
            return Decimal('0')
        except Exception:
            return Decimal('0')

    async def create_order(self, pair: str, quantity: Decimal, price: Decimal, order_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç"""
        try:
            result = self.old_client.create_order(pair, float(quantity), float(price), order_type)
            return result or {'result': False}
        except Exception as e:
            return {'result': False, 'error': str(e)}
'''

        (self.root_dir / "src/infrastructure/api/adapter.py").write_text(api_adapter_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/infrastructure/api/adapter.py")

    def _create_adapters(self):
        """üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        adapter_content = '''#!/usr/bin/env python3
"""üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from typing import Dict, Any, Optional
from decimal import Decimal

class LegacyBotAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""

    def __init__(self, use_hybrid: bool = True):
        self.use_hybrid = use_hybrid
        self._old_bot = None

    def get_old_bot(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        if self._old_bot is None:
            try:
                if self.use_hybrid:
                    from hybrid_bot import HybridTradingBot
                    self._old_bot = HybridTradingBot()
                else:
                    from bot import TradingBot
                    self._old_bot = TradingBot()
            except ImportError as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç: {e}")
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –±–æ—Ç
                try:
                    from bot import TradingBot
                    self._old_bot = TradingBot()
                except ImportError:
                    raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤")

        return self._old_bot

    async def run_trading_cycle(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            old_bot = self.get_old_bot()

            # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ execute_cycle
            if hasattr(old_bot, 'execute_cycle'):
                return await old_bot.execute_cycle()

            # –ï—Å–ª–∏ –µ—Å—Ç—å strategy_manager
            elif hasattr(old_bot, 'strategy_manager'):
                market_data = self._collect_market_data(old_bot)
                return old_bot.strategy_manager.execute_cycle(market_data)

            else:
                return {'success': False, 'reason': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞'}

        except Exception as e:
            return {'success': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}'}

    def _collect_market_data(self, bot) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            if hasattr(bot, '_collect_market_data'):
                return bot._collect_market_data()
            else:
                # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                return {
                    'current_price': 0.18,  # –ó–∞–≥–ª—É—à–∫–∞
                    'balance': 1000.0,
                    'timestamp': time.time()
                }
        except Exception:
            return {}

class StrategyAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self):
        self._strategies = {}

    def load_old_strategies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from strategies import StrategyManager
            from config import TradingConfig

            config = TradingConfig()
            self._strategies['legacy'] = StrategyManager(config, None, None)

        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def execute_strategy(self, strategy_name: str, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if strategy_name in self._strategies:
            try:
                return self._strategies[strategy_name].execute_cycle(market_data)
            except Exception as e:
                return {'success': False, 'reason': f'–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}'}

        return {'success': False, 'reason': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
'''

        (self.root_dir / "src/adapters.py").write_text(adapter_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: src/adapters.py")

    def _create_new_main(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ main.py"""
        print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ main.py...")

        main_content = '''#!/usr/bin/env python3
"""üöÄ –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

import sys
import os
import argparse
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def parse_arguments():
    """üìã –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="ü§ñ DOGE Trading Bot v4.1-refactored")

    parser.add_argument(
        '--mode', '-m',
        choices=['new', 'legacy', 'hybrid'],
        default='hybrid',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: new (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞), legacy (—Å—Ç–∞—Ä—ã–π –±–æ—Ç), hybrid (–∞–¥–∞–ø—Ç–µ—Ä)'
    )

    parser.add_argument(
        '--profile', '-p',
        choices=['conservative', 'balanced', 'aggressive'],
        default='balanced',
        help='–ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏'
    )

    parser.add_argument(
        '--config', '-c',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--validate', '-v',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )

    parser.add_argument(
        '--test-mode', '-t',
        action='store_true',
        help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫'
    )

    return parser.parse_args()

async def run_new_architecture(args):
    """üÜï –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("üÜï –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
    print("‚ö†Ô∏è –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º")
    return await run_hybrid_mode(args)

async def run_legacy_mode(args):
    """üìú –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
    print("üìú –ó–∞–ø—É—Å–∫ –≤ legacy —Ä–µ–∂–∏–º–µ...")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
        if Path("hybrid_bot.py").exists():
            from hybrid_bot import HybridTradingBot
            bot = HybridTradingBot()
        elif Path("bot.py").exists():
            from bot import TradingBot
            bot = TradingBot()
        else:
            raise ImportError("–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        print("‚úÖ –°—Ç–∞—Ä—ã–π –±–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
        bot.run()

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∂–∏–º --mode hybrid")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

    return True

async def run_hybrid_mode(args):
    """üé≠ –ó–∞–ø—É—Å–∫ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üé≠ –ó–∞–ø—É—Å–∫ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from config.settings import get_settings
        settings = get_settings()
        settings.validate()

        print("‚úÖ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        from adapters import LegacyBotAdapter
        adapter = LegacyBotAdapter(use_hybrid=True)

        print("üîÑ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä...")

        # –ü—Ä–æ—Å—Ç–æ–π —Ü–∏–∫–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        cycles = 0
        while cycles < 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                result = await adapter.run_trading_cycle()
                print(f"üìä –¶–∏–∫–ª {cycles + 1}: {result.get('reason', 'OK')}")

                cycles += 1
                await asyncio.sleep(10)  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

            except KeyboardInterrupt:
                print("\\n‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
                break

        print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å legacy —Ä–µ–∂–∏–º...")
        return await run_legacy_mode(args)

async def validate_configuration(args):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        from config.settings import get_settings
        settings = get_settings()
        settings.validate()

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {getattr(settings, 'profile_name', 'unknown')}")
        print(f"üí± API –∫–ª—é—á: {settings.exmo_api_key[:8]}..." if settings.exmo_api_key else "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ DOGE TRADING BOT v4.1-refactored")
    print("=" * 50)

    args = parse_arguments()

    print(f"üéØ –†–µ–∂–∏–º: {args.mode}")
    print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {args.profile}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.validate:
        success = await validate_configuration(args)
        return 0 if success else 1

    # –ó–∞–ø—É—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    try:
        if args.mode == 'new':
            success = await run_new_architecture(args)
        elif args.mode == 'legacy':
            success = await run_legacy_mode(args)
        else:  # hybrid
            success = await run_hybrid_mode(args)

        return 0 if success else 1

    except KeyboardInterrupt:
        print("\\n‚å®Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return 0
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
'''

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π main.py
        if (self.root_dir / "main.py").exists():
            shutil.copy2(self.root_dir / "main.py", self.root_dir / "main_old.py")

        (self.root_dir / "main.py").write_text(main_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: main.py (–Ω–æ–≤—ã–π)")
        print("  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: main_old.py (–±—ç–∫–∞–ø)")

    def _migrate_configuration(self):
        """‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("‚öôÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self._create_env_example()
        self._create_requirements_txt()

    def _create_env_example(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ .env.example"""
        env_example_content = '''# üîë API –∫–ª—é—á–∏ EXMO
EXMO_API_KEY=your_api_key_here
EXMO_API_SECRET=your_api_secret_here

# üéØ –ü—Ä–æ—Ñ–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏ (conservative, balanced, aggressive)
TRADING_PROFILE=balanced

# ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
POSITION_SIZE_PERCENT=6.0
MIN_PROFIT_PERCENT=0.8
UPDATE_INTERVAL=6
LOG_LEVEL=INFO

# üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHAT_ID=your_chat_id
'''

        (self.root_dir / ".env.example").write_text(env_example_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: .env.example")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
        if not (self.root_dir / ".env").exists():
            print("  ‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ")

    def _create_requirements_txt(self):
        """üì¶ –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt"""
        requirements_content = '''# üêç –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ DOGE v4.1-refactored

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
requests>=2.28.0
pandas>=1.5.0
numpy>=1.21.0

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
python-dotenv>=0.19.0

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
matplotlib>=3.5.0
seaborn>=0.11.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
python-dateutil>=2.8.0

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
pytest>=7.0.0
pytest-asyncio>=0.21.0
mypy>=1.0.0
black>=22.0.0
isort>=5.10.0

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
pyTelegramBotAPI>=4.0.0

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±—É–¥—É—â–µ–µ)
fastapi>=0.95.0
uvicorn>=0.20.0
'''

        (self.root_dir / "requirements.txt").write_text(requirements_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: requirements.txt")

    def _create_tests(self):
        """üß™ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest
        pytest_ini_content = '''[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow tests
'''

        (self.root_dir / "pytest.ini").write_text(pytest_ini_content)

        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_test_content = '''#!/usr/bin/env python3
"""üß™ –¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

@pytest.mark.unit
def test_settings_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from config.settings import get_settings
        settings = get_settings()
        assert settings is not None
    except ImportError as e:
        pytest.skip(f"–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

@pytest.mark.unit
def test_settings_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from config.settings import get_settings
        settings = get_settings()

        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ API –∫–ª—é—á–∞–º–∏ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å
        settings.exmo_api_key = ""
        settings.exmo_api_secret = ""

        with pytest.raises(ValueError):
            settings.validate()

    except ImportError:
        pytest.skip("–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@pytest.mark.unit
def test_core_models():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    try:
        from core.models import TradingPair, TradeSignal
        from decimal import Decimal

        # –¢–µ—Å—Ç TradingPair
        pair = TradingPair("DOGE", "EUR")
        assert str(pair) == "DOGE_EUR"

        # –¢–µ—Å—Ç TradeSignal
        signal = TradeSignal(
            action="buy",
            quantity=Decimal("100"),
            price=Decimal("0.18"),
            confidence=0.8,
            reason="Test signal"
        )

        assert signal.action == "buy"
        assert signal.quantity == Decimal("100")
        assert signal.timestamp is not None

    except ImportError:
        pytest.skip("Core –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
'''

        (self.root_dir / "tests/test_config.py").write_text(config_test_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: tests/test_config.py")

        # –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
        adapter_test_content = '''#!/usr/bin/env python3
"""üß™ –¢–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""

import pytest
import sys
from pathlib import Path

src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

@pytest.mark.integration
def test_legacy_bot_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞"""
    try:
        from adapters import LegacyBotAdapter

        adapter = LegacyBotAdapter(use_hybrid=False)
        assert adapter is not None

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±–æ—Ç
        old_bot = adapter.get_old_bot()

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if old_bot:
            assert hasattr(old_bot, '__class__')

    except ImportError as e:
        pytest.skip(f"–ê–¥–∞–ø—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

@pytest.mark.integration  
def test_strategy_adapter():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        from adapters import StrategyAdapter

        adapter = StrategyAdapter()
        assert adapter is not None

        adapter.load_old_strategies()

    except ImportError:
        pytest.skip("–ê–¥–∞–ø—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
'''

        (self.root_dir / "tests/test_adapters.py").write_text(adapter_test_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: tests/test_adapters.py")

        # conftest.py –¥–ª—è pytest
        conftest_content = '''#!/usr/bin/env python3
"""üß™ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

@pytest.fixture
def mock_config():
    """–ú–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    from decimal import Decimal

    class MockConfig:
        exmo_api_key = "test_key"
        exmo_api_secret = "test_secret"
        position_size_percent = 6.0
        min_profit_percent = 0.8

        def validate(self):
            pass

    return MockConfig()

@pytest.fixture
def sample_market_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    return {
        'current_price': 0.18,
        'balance': 1000.0,
        'timestamp': 1234567890
    }
'''

        (self.root_dir / "tests/conftest.py").write_text(conftest_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: tests/conftest.py")

    def _update_documentation(self):
        """üìö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("üìö –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")

        # README –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        readme_content = '''# ü§ñ DOGE Trading Bot v4.1-refactored

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã DOGE —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.

## üÜï –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ v4.1-refactored

- ‚úÖ **Clean Architecture** - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–µ–≤
- ‚úÖ **Dependency Injection** - —Å–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤  
- ‚úÖ **–ü–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è** - type hints –≤–µ–∑–¥–µ
- ‚úÖ **–ï–¥–∏–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è** - –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
- ‚úÖ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** - –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
pip install -r requirements.txt
```

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞
```bash
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cp .env.example .env

# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
nano .env
```

### 3. –ó–∞–ø—É—Å–∫

```bash
# –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
python main.py --mode hybrid

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
python main.py --validate

# –°—Ç–∞—Ä—ã–π –±–æ—Ç (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
python main.py --mode legacy

# –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
python main.py --mode new
```

## ‚öôÔ∏è –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã

| –†–µ–∂–∏–º | –û–ø–∏—Å–∞–Ω–∏–µ | –°—Ç–∞—Ç—É—Å |
|-------|----------|--------|
| `hybrid` | –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ + –∞–¥–∞–ø—Ç–µ—Ä—ã | ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç |
| `legacy` | –°—Ç–∞—Ä—ã–π –±–æ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π | ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç |
| `new` | –ü–æ–ª–Ω–∞—è –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ | üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ |

## üìä –ü—Ä–æ—Ñ–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏

- **conservative** - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 4%
- **balanced** - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 6%
- **aggressive** - –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 10%

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
pytest

# –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
pytest -m unit

# –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
pytest -m integration
```

## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
‚îú‚îÄ‚îÄ src/                    # –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚îÇ   ‚îú‚îÄ‚îÄ core/              # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ config/            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ infrastructure/    # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
‚îÇ   ‚îú‚îÄ‚îÄ domain/            # –î–æ–º–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
‚îÇ   ‚îú‚îÄ‚îÄ application/       # –°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ presentation/      # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
‚îú‚îÄ‚îÄ tests/                 # –¢–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ backup_before_migration/ # –ë—ç–∫–∞–ø —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
‚îú‚îÄ‚îÄ main.py               # –ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
‚îú‚îÄ‚îÄ *_old.py              # –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (–±—ç–∫–∞–ø)
‚îî‚îÄ‚îÄ requirements.txt      # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
```

## üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è

–î–ª—è –æ—Ç–∫–∞—Ç–∞ –∫ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏:
```bash
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
cp main_old.py main.py
# –ò–ª–∏ –∑–∞–ø—É—Å–∫ –≤ legacy —Ä–µ–∂–∏–º–µ
python main.py --mode legacy
```

## üìã TODO

- [ ] –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
- [ ] –î–æ–±–∞–≤–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- [ ] –ú—É–ª—å—Ç–∏-–±–∏—Ä–∂–µ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- [ ] Machine Learning —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- [ ] Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

1. **–ë—ç–∫–∞–ø—ã** - –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ `backup_before_migration/`
2. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ** - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –º–∞–ª—ã—Ö —Å—É–º–º–∞—Ö
3. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã

## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: `python main.py --validate`
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ legacy —Ä–µ–∂–∏–º–µ: `python main.py --mode legacy`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ `logs/trading_bot.log`
'''

        (self.root_dir / "README_NEW.md").write_text(readme_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: README_NEW.md")

        # –°–æ–∑–¥–∞–µ–º CHANGELOG
        changelog_content = '''# üìã CHANGELOG

## v4.1-refactored (–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è)

### üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ù–æ–≤–∞—è Clean Architecture —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–ª–æ–µ–≤
- Dependency Injection –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
- –ü–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
- –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—á –º–∏–≥—Ä–∞—Ü–∏–∏

### üîÑ –£–ª—É—á—à–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- –ù–æ–≤—ã–π main.py —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–æ–≤
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

### üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ
- –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ SOLID –ø—Ä–∏–Ω—Ü–∏–ø–∞–º
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ unit —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
- –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º—É–ª—å—Ç–∏-–±–∏—Ä–∂–µ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ

### üìÅ –§–∞–π–ª—ã
- –î–æ–±–∞–≤–ª–µ–Ω–æ: src/ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, tests/, –Ω–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ò–∑–º–µ–Ω–µ–Ω–æ: main.py (—Å –±—ç–∫–∞–ø–æ–º –≤ main_old.py)
- –ë—ç–∫–∞–ø: backup_before_migration/ —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞—Ä—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

## v4.1 (–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è)
- –°–∏—Å—Ç–µ–º—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
- DCA –ª–∏–º–∏—Ç–µ—Ä
- BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –ì–∏–±–∫–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
'''

        (self.root_dir / "CHANGELOG.md").write_text(changelog_content)
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω: CHANGELOG.md")

    def _restore_backup(self):
        """üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"""
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞...")

        if not self.backup_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file_name in self.files_to_backup:
            backup_file = self.backup_dir / file_name
            if backup_file.exists():
                shutil.copy2(backup_file, self.root_dir / file_name)
                print(f"  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {file_name}")

        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def run_tests(self):
        """üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")

        try:
            import subprocess
            result = subprocess.run(["python", "-m", "pytest", "tests/", "-v"],
                                    capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                print(result.stdout)
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏:")
                print(result.stderr)

        except FileNotFoundError:
            print("‚ö†Ô∏è pytest –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")

    def print_migration_summary(self):
        """üìã –°–≤–æ–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("\nüìã –°–í–û–î–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 50)

        print("‚úÖ –°–û–ó–î–ê–ù–û:")
        created_items = [
            "üìÅ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ src/",
            "‚öôÔ∏è –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            "üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
            "üß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã",
            "üìö –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "üöÄ –ù–æ–≤—ã–π main.py —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"
        ]

        for item in created_items:
            print(f"  {item}")

        print("\nüíæ –°–û–•–†–ê–ù–ï–ù–û:")
        backup_items = [
            "üìÑ –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≤ backup_before_migration/",
            "üìÑ main_old.py (–∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ main.py)",
            "üìÅ data/ –∏ logs/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
            "‚öôÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        ]

        for item in backup_items:
            print(f"  {item}")

        print("\nüéØ –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê:")
        modes = [
            "üé≠ python main.py --mode hybrid    (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            "üìú python main.py --mode legacy    (—Å—Ç–∞—Ä—ã–π –±–æ—Ç)",
            "üÜï python main.py --mode new       (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)",
            "‚úÖ python main.py --validate       (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫)"
        ]

        for mode in modes:
            print(f"  {mode}")

        print("\n‚ö†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        next_steps = [
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: python main.py --validate",
            "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: pytest tests/",
            "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ –º–∞–ª—ã—Ö —Å—É–º–º–∞—Ö",
            "4. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ legacy —Ä–µ–∂–∏–º",
            "5. –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ README_NEW.md"
        ]

        for step in next_steps:
            print(f"  {step}")


def main():
    """üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ç—á–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–¢–ß –ú–ò–ì–†–ê–¶–ò–ò")
    print("ü§ñ DOGE Trading Bot v4.1 ‚Üí v4.1-refactored")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not any([
        Path("bot.py").exists(),
        Path("hybrid_bot.py").exists(),
        Path("config.py").exists()
    ]):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ø–∞—Ç—á –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–æ—Ç–æ–º")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á –º–∏–≥—Ä–∞—Ü–∏–∏? (y/N): ").lower().strip()

    if response != 'y':
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
    patch = MigrationPatch()

    try:
        patch.apply_patch()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        patch.print_migration_summary()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
        test_response = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏? (y/N): ").lower().strip()
        if test_response == 'y':
            patch.run_tests()

        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python main.py --mode hybrid")

    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞...")
        patch._restore_backup()


if __name__ == "__main__":
    main()