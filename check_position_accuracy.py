# check_position_accuracy.py - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

from config import TradingConfig
from api_client import ExmoAPIClient
from position_manager import PositionManager
import json

def diagnose_position_issues():
    """üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ó–ò–¶–ò–ô")
    print("=" * 50)

    config = TradingConfig()
    api = ExmoAPIClient(config)
    position_manager = PositionManager(config, api)

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–∞–Ω–Ω—ã–µ
        print("üìä 1. –î–ê–ù–ù–´–ï –ò–ó API:")
        user_info = api.get_user_info()
        api_balance = float(user_info['balances'].get(config.CURRENCY_1, 0))
        print(f"   API –±–∞–ª–∞–Ω—Å DOGE: {api_balance:.6f}")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        print("\nüßÆ 2. –†–ê–°–ß–ï–¢–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø:")
        position = position_manager.get_position(config.CURRENCY_1)
        if position:
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position.quantity:.6f}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {position.avg_price:.8f}")
            print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {position.total_cost:.4f} EUR")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {position.last_updated}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(position.trades)}")
        else:
            print("   –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        print("\n‚öñÔ∏è  3. –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:")
        if position:
            discrepancy = abs(api_balance - position.quantity)
            discrepancy_percent = (discrepancy / api_balance * 100) if api_balance > 0 else 0

            print(f"   –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {discrepancy:.6f} DOGE")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {discrepancy_percent:.2f}%")

            if discrepancy_percent < 1:
                print("   ‚úÖ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ")
            elif discrepancy_percent < 5:
                print("   ‚ö†Ô∏è  –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")
            else:
                print("   üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        print("\nüìã 4. –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
        try:
            pair = f"{config.CURRENCY_1}_{config.CURRENCY_2}"
            trades = api.get_user_trades(pair=pair, limit=10)

            if trades and pair in trades:
                trade_list = trades[pair]
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(trade_list)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫:")

                for i, trade in enumerate(trade_list[:5], 1):
                    trade_time = trade.get('date', 'N/A')
                    trade_type = trade.get('type', 'N/A')
                    trade_qty = trade.get('quantity', 'N/A')
                    trade_price = trade.get('price', 'N/A')
                    commission = trade.get('commission_amount', 'N/A')

                    print(f"   {i}. {trade_time}: {trade_type} {trade_qty} –ø–æ {trade_price} (–∫–æ–º–∏—Å—Å–∏—è: {commission})")
            else:
                print("   –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

        # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if position and api_balance > 0:
            discrepancy_percent = abs(api_balance - position.quantity) / api_balance * 100

            if discrepancy_percent > 5:
                print("   üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
                print("   üìù –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–¥: position_manager.force_sync_with_real_balance()")

            if discrepancy_percent > 1:
                print("   üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±–∫–∏–π –ø–æ—Ä–æ–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                print("   ‚öôÔ∏è  –£–≤–µ–ª–∏—á—å—Ç–µ MAX_POSITION_DISCREPANCY –≤ config.py")

            if position.avg_price == 0:
                print("   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ FIFO")
                print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç–æ–¥ _calculate_position_fifo()")

        print("\n" + "=" * 50)
        print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

def fix_position_data():
    """üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏"""
    print("\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("=" * 50)

    config = TradingConfig()
    api = ExmoAPIClient(config)
    position_manager = PositionManager(config, api)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        user_info = api.get_user_info()
        real_balance = float(user_info['balances'].get(config.CURRENCY_1, 0))

        if real_balance > 0:
            print(f"üìä –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {real_balance:.6f} DOGE")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            position_manager.force_sync_with_real_balance(real_balance)
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            updated_position = position_manager.get_position(config.CURRENCY_1)
            if updated_position:
                print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {updated_position.quantity:.6f}")
                print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {updated_position.avg_price:.8f}")

                new_discrepancy = abs(real_balance - updated_position.quantity)
                print(f"   –ù–æ–≤–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {new_discrepancy:.6f} DOGE")

                if new_discrepancy < 0.001:
                    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                else:
                    print("   ‚ö†Ô∏è –û—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")
        else:
            print("üìù –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º
    diagnose_position_issues()

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
    response = input("\nü§î –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ")
    if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
        fix_position_data()
    else:
        print("üí≠ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
