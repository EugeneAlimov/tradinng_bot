#!/usr/bin/env python3
"""üìã –ú–∏–≥—Ä–∞—Ü–∏—è Part 2 - Core –º–æ–¥–µ–ª–∏"""

import logging
from pathlib import Path


class Migration:
    """üìã –ú–∏–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dir = project_root / "src"
        self.core_dir = self.src_dir / "core"
        self.logger = logging.getLogger(__name__)

    def execute(self) -> bool:
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ Core –º–æ–¥–µ–ª–µ–π...")
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
            self._create_models()
            
            # –°–æ–∑–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            self._create_exceptions()
            
            self.logger.info("‚úÖ Core –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return False

    def _create_models(self):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        models_content = '''#!/usr/bin/env python3
"""üìã –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any, List
from enum import Enum


class OrderType(Enum):
    """üìã –¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    BUY = "buy"
    SELL = "sell"
    LIMIT_BUY = "limit_buy"
    LIMIT_SELL = "limit_sell"


class OrderStatus(Enum):
    """üìä –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    EXECUTED = "executed"
    CANCELLED = "cancelled"
    PARTIALLY_FILLED = "partially_filled"


class SignalAction(Enum):
    """üéØ –î–µ–π—Å—Ç–≤–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"
    EMERGENCY_EXIT = "emergency_exit"


class TradingMode(Enum):
    """üéÆ –†–µ–∂–∏–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    LIVE = "live"
    PAPER = "paper"
    BACKTEST = "backtest"


class LogLevel(Enum):
    """üìù –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


@dataclass
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""
    base: str
    quote: str

    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"

    def __post_init__(self):
        self.base = self.base.upper()
        self.quote = self.quote.upper()


@dataclass
class MarketData:
    """üìä –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    trading_pair: TradingPair
    current_price: Decimal
    volume_24h: Optional[Decimal] = None
    high_24h: Optional[Decimal] = None
    low_24h: Optional[Decimal] = None
    change_24h: Optional[Decimal] = None
    timestamp: datetime = field(default_factory=datetime.now)
    additional_data: Dict[str, Any] = field(default_factory=dict)


@dataclass
class TradeSignal:
    """üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    action: SignalAction
    trading_pair: TradingPair
    quantity: Decimal
    price: Optional[Decimal] = None
    confidence: float = 0.0
    reason: str = ""
    strategy_name: str = ""
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)

    def __post_init__(self):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è confidence
        if not 0.0 <= self.confidence <= 1.0:
            raise ValueError("Confidence –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.0 –∏ 1.0")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è quantity
        if self.quantity <= 0:
            raise ValueError("Quantity –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")


@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
    timestamp: datetime = field(default_factory=datetime.now)
    trades: List[Dict[str, Any]] = field(default_factory=list)
    
    def calculate_current_value(self, current_price: Decimal) -> Decimal:
        """üí∞ –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.quantity * current_price
    
    def calculate_profit_loss(self, current_price: Decimal) -> Decimal:
        """üìà –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞"""
        current_value = self.calculate_current_value(current_price)
        return current_value - self.total_cost
    
    def calculate_profit_loss_percentage(self, current_price: Decimal) -> Decimal:
        """üìä –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.total_cost == 0:
            return Decimal('0')
        profit_loss = self.calculate_profit_loss(current_price)
        return (profit_loss / self.total_cost) * Decimal('100')


@dataclass
class Order:
    """üìã –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–¥–µ—Ä"""
    order_id: str
    trading_pair: TradingPair
    order_type: OrderType
    quantity: Decimal
    price: Optional[Decimal] = None
    status: OrderStatus = OrderStatus.PENDING
    filled_quantity: Decimal = Decimal('0')
    avg_fill_price: Optional[Decimal] = None
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def is_fully_filled(self) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return self.filled_quantity >= self.quantity
    
    def get_remaining_quantity(self) -> Decimal:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        return self.quantity - self.filled_quantity


@dataclass
class Trade:
    """üí± –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞"""
    trade_id: str
    trading_pair: TradingPair
    side: str  # buy/sell
    quantity: Decimal
    price: Decimal
    commission: Decimal = Decimal('0')
    timestamp: datetime = field(default_factory=datetime.now)
    order_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def get_total_cost(self) -> Decimal:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
        return self.quantity * self.price + self.commission


@dataclass
class RiskMetrics:
    """üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞"""
    max_drawdown: Decimal = Decimal('0')
    current_drawdown: Decimal = Decimal('0')
    sharpe_ratio: Optional[Decimal] = None
    profit_factor: Optional[Decimal] = None
    win_rate: Decimal = Decimal('0')
    avg_win: Decimal = Decimal('0')
    avg_loss: Decimal = Decimal('0')
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class SystemStatus:
    """üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    is_healthy: bool = True
    api_connectivity: bool = True
    last_update: datetime = field(default_factory=datetime.now)
    active_strategies: List[str] = field(default_factory=list)
    errors: List[str] = field(default_factory=list)
    warnings: List[str] = field(default_factory=list)
    uptime_seconds: int = 0
    
    def add_error(self, error: str) -> None:
        """‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.errors.append(f"{datetime.now().isoformat()}: {error}")
        self.is_healthy = False
    
    def add_warning(self, warning: str) -> None:
        """‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.warnings.append(f"{datetime.now().isoformat()}: {warning}")


@dataclass
class StrategyPerformance:
    """üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    strategy_name: str
    total_trades: int = 0
    winning_trades: int = 0
    losing_trades: int = 0
    total_profit_loss: Decimal = Decimal('0')
    max_drawdown: Decimal = Decimal('0')
    last_trade_time: Optional[datetime] = None
    avg_trade_duration_minutes: Optional[int] = None
    
    def get_win_rate(self) -> float:
        """üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if self.total_trades == 0:
            return 0.0
        return (self.winning_trades / self.total_trades) * 100
    
    def get_profit_factor(self) -> Optional[Decimal]:
        """üíπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏"""
        if self.losing_trades == 0 or self.total_profit_loss <= 0:
            return None
        
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        avg_win = self.total_profit_loss / max(self.winning_trades, 1)
        avg_loss = abs(self.total_profit_loss) / max(self.losing_trades, 1)
        
        if avg_loss == 0:
            return None
        
        return avg_win / avg_loss


@dataclass
class ConfigProfile:
    """‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name: str
    description: str
    risk_level: str  # conservative, balanced, aggressive
    max_position_size_percent: Decimal
    stop_loss_percent: Decimal
    take_profit_percent: Decimal
    max_daily_trades: int
    cooldown_minutes: int
    
    def validate(self) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        return (
            0 < self.max_position_size_percent <= 100 and
            0 < self.stop_loss_percent <= 50 and
            0 < self.take_profit_percent <= 100 and
            self.max_daily_trades > 0 and
            self.cooldown_minutes >= 0
        )


@dataclass
class NotificationEvent:
    """üì¢ –°–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    event_type: str
    level: str  # info, warning, error, emergency
    message: str
    context: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
    
    def to_dict(self) -> Dict[str, Any]:
        """üìã –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'event_type': self.event_type,
            'level': self.level,
            'message': self.message,
            'context': self.context,
            'timestamp': self.timestamp.isoformat()
        }


@dataclass
class HealthCheck:
    """üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    name: str
    status: str  # healthy, warning, critical, unknown
    message: str
    details: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
    duration_ms: float = 0.0
    
    def is_healthy(self) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return self.status == "healthy"


@dataclass
class TradingSession:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è"""
    session_id: str
    start_time: datetime
    end_time: Optional[datetime] = None
    trades_count: int = 0
    total_profit_loss: Decimal = Decimal('0')
    max_drawdown: Decimal = Decimal('0')
    peak_profit: Decimal = Decimal('0')
    active_strategies: List[str] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def add_trade_result(self, profit_loss: Decimal) -> None:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        self.trades_count += 1
        self.total_profit_loss += profit_loss
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫ –ø—Ä–∏–±—ã–ª–∏
        if self.total_profit_loss > self.peak_profit:
            self.peak_profit = self.total_profit_loss
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        current_drawdown = self.peak_profit - self.total_profit_loss
        if current_drawdown > self.max_drawdown:
            self.max_drawdown = current_drawdown
    
    def get_duration_hours(self) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        end_time = self.end_time or datetime.now()
        duration = end_time - self.start_time
        return duration.total_seconds() / 3600
    
    def get_win_rate(self) -> float:
        """üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"""
        if self.trades_count == 0:
            return 0.0
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if self.total_profit_loss > 0:
            return min(100.0, 50.0 + float(self.total_profit_loss) * 10)
        else:
            return max(0.0, 50.0 + float(self.total_profit_loss) * 10)
'''

        models_file = self.core_dir / "models.py"
        models_file.write_text(models_content)
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω models.py")

    def _create_exceptions(self):
        """üö® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        exceptions_content = '''#!/usr/bin/env python3
"""üö® –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from typing import Optional, Dict, Any


class TradingSystemError(Exception):
    """üö® –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, message: str, error_code: Optional[str] = None, 
                 context: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.message = message
        self.error_code = error_code
        self.context = context or {}
    
    def __str__(self) -> str:
        if self.error_code:
            return f"[{self.error_code}] {self.message}"
        return self.message


class ConfigurationError(TradingSystemError):
    """‚öôÔ∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    pass


class APIError(TradingSystemError):
    """üåê –û—à–∏–±–∫–∞ API"""
    
    def __init__(self, message: str, status_code: Optional[int] = None, 
                 response_data: Optional[Dict[str, Any]] = None):
        super().__init__(message, f"API_{status_code}" if status_code else "API_ERROR")
        self.status_code = status_code
        self.response_data = response_data or {}


class DependencyError(TradingSystemError):
    """üèóÔ∏è –û—à–∏–±–∫–∞ Dependency Injection"""
    
    def __init__(self, service_name: str, message: str):
        super().__init__(f"Dependency error for {service_name}: {message}")
        self.service_name = service_name


class StrategyError(TradingSystemError):
    """üéØ –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    
    def __init__(self, strategy_name: str, message: str, signal_data: Optional[Dict[str, Any]] = None):
        super().__init__(f"Strategy '{strategy_name}': {message}")
        self.strategy_name = strategy_name
        self.signal_data = signal_data or {}


class RiskManagementError(TradingSystemError):
    """üõ°Ô∏è –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self, message: str, risk_data: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.risk_data = risk_data or {}


class PositionError(TradingSystemError):
    """üìä –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    
    def __init__(self, message: str, position_data: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.position_data = position_data or {}


class OrderError(TradingSystemError):
    """üìã –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞"""
    
    def __init__(self, message: str, order_id: Optional[str] = None, 
                 order_data: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.order_id = order_id
        self.order_data = order_data or {}


class ValidationError(TradingSystemError):
    """‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self, field_name: str, message: str, value: Any = None):
        super().__init__(f"Validation error for '{field_name}': {message}")
        self.field_name = field_name
        self.value = value


class InsufficientFundsError(TradingSystemError):
    """üí∞ –û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    
    def __init__(self, required_amount: float, available_amount: float, currency: str):
        message = f"Insufficient {currency}: required {required_amount}, available {available_amount}"
        super().__init__(message)
        self.required_amount = required_amount
        self.available_amount = available_amount
        self.currency = currency


class RateLimitError(APIError):
    """‚è±Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, retry_after: Optional[int] = None):
        message = "API rate limit exceeded"
        if retry_after:
            message += f", retry after {retry_after} seconds"
        super().__init__(message, 429)
        self.retry_after = retry_after


class EmergencyExitError(TradingSystemError):
    """üö® –û—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
    
    def __init__(self, message: str, exit_data: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.exit_data = exit_data or {}


class AdapterError(TradingSystemError):
    """üîÑ –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞"""
    
    def __init__(self, adapter_name: str, message: str):
        super().__init__(f"Adapter '{adapter_name}': {message}")
        self.adapter_name = adapter_name


class PersistenceError(TradingSystemError):
    """üíæ –û—à–∏–±–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, operation: str, message: str, file_path: Optional[str] = None):
        super().__init__(f"Persistence error during {operation}: {message}")
        self.operation = operation
        self.file_path = file_path


class MonitoringError(TradingSystemError):
    """üè• –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, check_name: str, message: str):
        super().__init__(f"Monitoring error in {check_name}: {message}")
        self.check_name = check_name


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

def handle_api_error(func):
    """üåê –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –æ—à–∏–±–æ–∫"""
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            if "rate limit" in str(e).lower():
                raise RateLimitError()
            elif "insufficient" in str(e).lower():
                raise InsufficientFundsError(0, 0, "unknown")
            else:
                raise APIError(str(e))
    return wrapper


def validate_decimal_positive(value: Any, field_name: str):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ Decimal"""
    from decimal import Decimal, InvalidOperation
    
    try:
        decimal_value = Decimal(str(value))
        if decimal_value <= 0:
            raise ValidationError(field_name, "Must be positive", value)
        return decimal_value
    except (InvalidOperation, TypeError):
        raise ValidationError(field_name, "Must be a valid decimal number", value)


def validate_percentage(value: Any, field_name: str, min_val: float = 0, max_val: float = 100):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        float_value = float(value)
        if not min_val <= float_value <= max_val:
            raise ValidationError(field_name, f"Must be between {min_val} and {max_val}", value)
        return float_value
    except (ValueError, TypeError):
        raise ValidationError(field_name, "Must be a valid number", value)


def validate_required_field(value: Any, field_name: str):
    """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è"""
    if value is None or (isinstance(value, str) and not value.strip()):
        raise ValidationError(field_name, "Field is required", value)
    return value


def safe_execute(func, error_class=TradingSystemError, default_value=None, log_errors=True):
    """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    import logging
    logger = logging.getLogger(__name__)
    
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except error_class as e:
            if log_errors:
                logger.error(f"‚ùå Expected error in {func.__name__}: {e}")
            raise
        except Exception as e:
            if log_errors:
                logger.error(f"‚ùå Unexpected error in {func.__name__}: {e}")
            if default_value is not None:
                return default_value
            raise error_class(f"Unexpected error in {func.__name__}: {e}")
    
    return wrapper


class ErrorContext:
    """üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.errors: List[str] = []
        self.warnings: List[str] = []
        self.has_critical_errors = False
    
    def add_error(self, message: str, is_critical: bool = False) -> None:
        """‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.errors.append(message)
        if is_critical:
            self.has_critical_errors = True
    
    def add_warning(self, message: str) -> None:
        """‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.warnings.append(message)
    
    def has_errors(self) -> bool:
        """‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫"""
        return len(self.errors) > 0
    
    def get_summary(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫"""
        return {
            'has_errors': self.has_errors(),
            'has_critical_errors': self.has_critical_errors,
            'errors_count': len(self.errors),
            'warnings_count': len(self.warnings),
            'errors': self.errors,
            'warnings': self.warnings
        }
    
    def raise_if_errors(self, error_class=TradingSystemError):
        """üö® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ—à–∏–±–æ–∫"""
        if self.has_errors():
            error_summary = "; ".join(self.errors)
            raise error_class(f"Multiple errors occurred: {error_summary}")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    try:
        raise ValidationError("test_field", "Test validation message", "test_value")
    except ValidationError as e:
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞: {e}")
        print(f"   –ü–æ–ª–µ: {e.field_name}")
        print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {e.value}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–æ–∫
    context = ErrorContext()
    context.add_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    context.add_warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    
    summary = context.get_summary()
    print(f"üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫: {summary['errors_count']} –æ—à–∏–±–æ–∫, {summary['warnings_count']} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    print("üö® –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞")
'''

        exceptions_file = self.core_dir / "exceptions.py"
        exceptions_file.write_text(exceptions_content)
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω exceptions.py")