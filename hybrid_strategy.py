# hybrid_strategy.py - –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ü–∏—Ä–∞–º–∏–¥–∞ + –£–º–Ω–∞—è DCA
import logging
import time
from typing import Dict, Any, Tuple, Optional, List
from datetime import datetime
from dataclasses import dataclass


@dataclass
class PositionMetrics:
    """üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    quantity: float
    avg_price: float
    current_price: float
    total_cost: float
    current_value: float
    pnl_percent: float
    pnl_amount: float

    @property
    def is_profitable(self) -> bool:
        return self.pnl_percent > 0

    @property
    def drop_from_avg(self) -> float:
        return (self.avg_price - self.current_price) / self.avg_price


class HybridStrategy:
    """üîÑ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–æ—á–µ—Ç–∞–µ—Ç –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ —É–º–Ω—É—é DCA"""

    def __init__(self, config, api_client, position_manager, pyramid_strategy):
        self.config = config
        self.api = api_client
        self.position_manager = position_manager
        self.pyramid_strategy = pyramid_strategy
        self.logger = logging.getLogger(__name__)

        # üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.enable_smart_dca = True
        self.dca_drop_threshold = 0.03        # DCA –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ >3%
        self.dca_max_position_percent = 0.65  # –ú–∞–∫—Å–∏–º—É–º 65% –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
        self.dca_purchase_size = 0.06         # 6% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ DCA –¥–æ–∫—É–ø–∫—É
        self.adaptive_stop_loss = True
        self.base_stop_loss = 0.18            # –ë–∞–∑–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å 18%

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        self.min_time_between_dca = 600       # 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É DCA
        self.min_time_between_pyramid = 300   # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–∏—Ä–∞–º–∏–¥–æ–π

        # –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        self.last_dca_time = 0
        self.last_pyramid_time = 0
        self.dca_purchases_count = 0

        self.logger.info("üîÑ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"   üõí DCA –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏: >{self.dca_drop_threshold*100:.0f}%")
        self.logger.info(f"   üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–∏: {self.dca_max_position_percent*100:.0f}%")
        self.logger.info(f"   üö® –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: {self.base_stop_loss*100:.0f}%")

    def analyze_and_execute(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üéØ –ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π"""

        current_price = market_data['current_price']
        balance = market_data['balance']
        position_data = market_data['accurate_position']

        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
        metrics = self._calculate_position_metrics(current_price, position_data, balance)

        if not metrics:
            return {'action': 'no_position', 'reason': '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}

        self.logger.info(f"üîÑ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏:")
        self.logger.info(f"   üìä {metrics.quantity:.4f} DOGE –ø–æ {metrics.avg_price:.6f}")
        self.logger.info(f"   üí∞ P&L: {metrics.pnl_percent:+.2f}% ({metrics.pnl_amount:+.4f} EUR)")
        self.logger.info(f"   üìâ –ü–∞–¥–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π: {metrics.drop_from_avg*100:.2f}%")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1)
        stop_loss_result = self._check_adaptive_stop_loss(metrics)
        if stop_loss_result['should_execute']:
            return stop_loss_result

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #2)
        pyramid_result = self._analyze_pyramid_opportunity(current_price, position_data)
        if pyramid_result['should_execute']:
            return pyramid_result

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–º–Ω–æ–π DCA (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #3)
        dca_result = self._analyze_smart_dca_opportunity(metrics, balance)
        if dca_result['should_execute']:
            return dca_result

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å
        return {
            'action': 'hold',
            'reason': f'–î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é: P&L {metrics.pnl_percent:+.2f}%',
            'should_execute': False
        }

    def _calculate_position_metrics(self, current_price: float, position_data: Dict, balance: float) -> Optional[PositionMetrics]:
        """üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ–∑–∏—Ü–∏–∏"""

        quantity = position_data.get('quantity', 0)
        avg_price = position_data.get('avg_price', 0)

        if quantity <= 0 or avg_price <= 0:
            return None

        total_cost = quantity * avg_price
        current_value = quantity * current_price
        pnl_amount = current_value - total_cost
        pnl_percent = (current_price - avg_price) / avg_price

        return PositionMetrics(
            quantity=quantity,
            avg_price=avg_price,
            current_price=current_price,
            total_cost=total_cost,
            current_value=current_value,
            pnl_percent=pnl_percent,
            pnl_amount=pnl_amount
        )

    def _check_adaptive_stop_loss(self, metrics: PositionMetrics) -> Dict[str, Any]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        stop_loss_threshold = self.base_stop_loss

        if self.adaptive_stop_loss:
            # –ï—Å–ª–∏ –¥–µ–ª–∞–ª–∏ DCA –¥–æ–∫—É–ø–∫–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å
            if self.dca_purchases_count > 0:
                stop_loss_threshold = self.base_stop_loss + (self.dca_purchases_count * 0.03)
                stop_loss_threshold = min(stop_loss_threshold, 0.25)  # –ú–∞–∫—Å–∏–º—É–º 25%

        loss_percent = -metrics.pnl_percent  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É–±—ã—Ç–∫–∞

        if loss_percent >= stop_loss_threshold:
            self.logger.error(f"üö® –ê–î–ê–ü–¢–ò–í–ù–´–ô –°–¢–û–ü-–õ–û–°–°!")
            self.logger.error(f"   –£–±—ã—Ç–æ–∫: {loss_percent*100:.2f}%")
            self.logger.error(f"   –ü–æ—Ä–æ–≥: {stop_loss_threshold*100:.2f}%")
            self.logger.error(f"   DCA –¥–æ–∫—É–ø–æ–∫: {self.dca_purchases_count}")

            return {
                'action': 'adaptive_stop_loss',
                'should_execute': True,
                'quantity': metrics.quantity,
                'reason': f'–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: —É–±—ã—Ç–æ–∫ {loss_percent*100:.1f}% >= {stop_loss_threshold*100:.1f}%',
                'urgency': 'critical',
                'sell_price': metrics.current_price * 0.995  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            }

        return {'should_execute': False}

    def _analyze_pyramid_opportunity(self, current_price: float, position_data: Dict) -> Dict[str, Any]:
        """üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        current_time = time.time()
        if current_time - self.last_pyramid_time < self.min_time_between_pyramid:
            remaining = (self.min_time_between_pyramid - (current_time - self.last_pyramid_time)) / 60
            return {
                'should_execute': False,
                'reason': f'–ü–∏—Ä–∞–º–∏–¥–∞ –∫—É–ª–¥–∞—É–Ω: {remaining:.0f} –º–∏–Ω'
            }

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            position_for_pyramid = {
                'quantity': position_data['quantity'],
                'avg_price': position_data['avg_price']
            }

            pyramid_result = self.pyramid_strategy.analyze_sell_opportunity(current_price, position_for_pyramid)

            if pyramid_result.get('should_sell'):
                self.last_pyramid_time = current_time

                return {
                    'action': 'pyramid_sell',
                    'should_execute': True,
                    'pyramid_data': pyramid_result,
                    'reason': f"–ü–∏—Ä–∞–º–∏–¥–∞: {pyramid_result.get('reason', '–ø—Ä–æ–¥–∞–∂–∞')}"
                }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã: {e}")

        return {'should_execute': False}

    def _analyze_smart_dca_opportunity(self, metrics: PositionMetrics, balance: float) -> Dict[str, Any]:
        """üõí –ê–Ω–∞–ª–∏–∑ —É–º–Ω–æ–π DCA –¥–æ–∫—É–ø–∫–∏"""

        if not self.enable_smart_dca:
            return {'should_execute': False, 'reason': 'Smart DCA –æ—Ç–∫–ª—é—á–µ–Ω–∞'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è DCA
        drop_from_avg = metrics.drop_from_avg
        current_position_percent = metrics.current_value / (balance + metrics.current_value)

        # –£—Å–ª–æ–≤–∏–µ 1: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        if drop_from_avg < self.dca_drop_threshold:
            return {
                'should_execute': False,
                'reason': f'–ü–∞–¥–µ–Ω–∏–µ {drop_from_avg*100:.1f}% < –ø–æ—Ä–æ–≥–∞ {self.dca_drop_threshold*100:.0f}%'
            }

        # –£—Å–ª–æ–≤–∏–µ 2: –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        dca_amount = balance * self.dca_purchase_size
        new_position_value = metrics.current_value + dca_amount
        new_position_percent = new_position_value / (balance + new_position_value)

        if new_position_percent > self.dca_max_position_percent:
            return {
                'should_execute': False,
                'reason': f'–ü–æ–∑–∏—Ü–∏—è {new_position_percent*100:.0f}% > –ª–∏–º–∏—Ç–∞ {self.dca_max_position_percent*100:.0f}%'
            }

        # –£—Å–ª–æ–≤–∏–µ 3: –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É DCA
        current_time = time.time()
        if current_time - self.last_dca_time < self.min_time_between_dca:
            remaining = (self.min_time_between_dca - (current_time - self.last_dca_time)) / 60
            return {
                'should_execute': False,
                'reason': f'DCA –∫—É–ª–¥–∞—É–Ω: {remaining:.0f} –º–∏–Ω'
            }

        # –£—Å–ª–æ–≤–∏–µ 4: –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if balance < dca_amount:
            return {
                'should_execute': False,
                'reason': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: {balance:.2f} < {dca_amount:.2f}'
            }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ DCA
        dca_quantity = dca_amount / metrics.current_price
        new_total_quantity = metrics.quantity + dca_quantity
        new_total_cost = metrics.total_cost + dca_amount
        new_avg_price = new_total_cost / new_total_quantity

        price_improvement = (metrics.avg_price - new_avg_price) / metrics.avg_price * 100

        self.logger.info(f"üõí –£–ú–ù–ê–Ø DCA –í–û–ó–ú–û–ñ–ù–ê!")
        self.logger.info(f"   –ü–∞–¥–µ–Ω–∏–µ: {drop_from_avg*100:.1f}%")
        self.logger.info(f"   –î–æ–∫—É–ø–∫–∞: {dca_quantity:.4f} DOGE –∑–∞ {dca_amount:.2f} EUR")
        self.logger.info(f"   –ù–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è: {metrics.avg_price:.6f} ‚Üí {new_avg_price:.6f}")
        self.logger.info(f"   –£–ª—É—á—à–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_improvement:.2f}%")
        self.logger.info(f"   –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {new_position_percent*100:.0f}% –¥–µ–ø–æ–∑–∏—Ç–∞")

        return {
            'action': 'smart_dca_buy',
            'should_execute': True,
            'quantity': dca_quantity,
            'price': metrics.current_price * 0.9995,  # –ù–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
            'amount': dca_amount,
            'new_avg_price': new_avg_price,
            'price_improvement': price_improvement,
            'reason': f'Smart DCA: –ø–∞–¥–µ–Ω–∏–µ {drop_from_avg*100:.1f}%, —É–ª—É—á—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ {price_improvement:.2f}%'
        }

    def execute_action(self, action_data: Dict[str, Any]) -> bool:
        """üöÄ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""

        action = action_data['action']

        try:
            if action == 'pyramid_sell':
                return self._execute_pyramid_sell(action_data)

            elif action == 'smart_dca_buy':
                return self._execute_smart_dca_buy(action_data)

            elif action == 'adaptive_stop_loss':
                return self._execute_adaptive_stop_loss(action_data)

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è {action}: {e}")
            return False

    def _execute_pyramid_sell(self, action_data: Dict[str, Any]) -> bool:
        """üèóÔ∏è –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""
        pyramid_data = action_data['pyramid_data']

        success = self.pyramid_strategy.execute_pyramid_sell(pyramid_data, self.api)

        if success:
            self.logger.info(f"‚úÖ –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞")
            return True

        return False

    def _execute_smart_dca_buy(self, action_data: Dict[str, Any]) -> bool:
        """üõí –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —É–º–Ω–æ–π DCA –ø–æ–∫—É–ø–∫–∏"""

        quantity = action_data['quantity']
        price = action_data['price']

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã
            pair_settings = self.api.get_pair_settings()
            precision = int(pair_settings.get(pair, {}).get('price_precision', 8))
            price_rounded = round(price, precision)

            result = self.api.create_order(pair, quantity, price_rounded, 'buy')

            if result.get('result'):
                self.logger.info(f"‚úÖ –£–ú–ù–ê–Ø DCA –ü–û–ö–£–ü–ö–ê –ò–°–ü–û–õ–ù–ï–ù–ê!")
                self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} DOGE")
                self.logger.info(f"   –¶–µ–Ω–∞: {price_rounded:.8f} EUR")
                self.logger.info(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                self.last_dca_time = time.time()
                self.dca_purchases_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                trade_info = {
                    'type': 'buy',
                    'quantity': quantity,
                    'price': price_rounded,
                    'amount': quantity * price_rounded,
                    'commission': quantity * price_rounded * self.config.AUTO_COMMISSION_RATE,
                    'timestamp': int(time.time())
                }

                self.position_manager.update_position(self.config.CURRENCY_1, trade_info)

                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DCA –æ—Ä–¥–µ—Ä–∞: {result}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è DCA: {e}")

        return False

    def _execute_adaptive_stop_loss(self, action_data: Dict[str, Any]) -> bool:
        """üö® –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""

        quantity = action_data['quantity']
        price = action_data['sell_price']

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã
            pair_settings = self.api.get_pair_settings()
            precision = int(pair_settings.get(pair, {}).get('price_precision', 8))
            price_rounded = round(price, precision)

            result = self.api.create_order(pair, quantity, price_rounded, 'sell')

            if result.get('result'):
                self.logger.error(f"üö® –ê–î–ê–ü–¢–ò–í–ù–´–ô –°–¢–û–ü-–õ–û–°–° –ò–°–ü–û–õ–ù–ï–ù!")
                self.logger.error(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} DOGE")
                self.logger.error(f"   –¶–µ–Ω–∞: {price_rounded:.8f} EUR")
                self.logger.error(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                self.dca_purchases_count = 0
                self.last_dca_time = 0

                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞: {result}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")

        return False

    def get_strategy_status(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        current_time = time.time()

        return {
            'strategy_name': 'hybrid',
            'smart_dca_enabled': self.enable_smart_dca,
            'dca_purchases_count': self.dca_purchases_count,
            'last_dca_minutes_ago': (current_time - self.last_dca_time) / 60 if self.last_dca_time > 0 else None,
            'last_pyramid_minutes_ago': (current_time - self.last_pyramid_time) / 60 if self.last_pyramid_time > 0 else None,
            'settings': {
                'dca_drop_threshold': f"{self.dca_drop_threshold*100:.0f}%",
                'max_position': f"{self.dca_max_position_percent*100:.0f}%",
                'dca_size': f"{self.dca_purchase_size*100:.0f}%",
                'base_stop_loss': f"{self.base_stop_loss*100:.0f}%",
                'adaptive_stop_loss': self.adaptive_stop_loss
            }
        }


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
class HybridTradeOrchestrator:
    """üéº –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""

    def __init__(self, config, api_client, risk_manager, position_manager,
                 pyramid_strategy, trailing_stop):
        self.config = config
        self.api = api_client
        self.risk_manager = risk_manager
        self.position_manager = position_manager
        self.trailing_stop = trailing_stop

        # üîÑ –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        self.hybrid_strategy = HybridStrategy(
            config, api_client, position_manager, pyramid_strategy
        )

        self.logger = logging.getLogger(__name__)
        self.pair = f"{config.CURRENCY_1}_{config.CURRENCY_2}"

    def execute_trade_cycle(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîÑ –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_market_data(market_data):
                return {'success': False, 'reason': '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            if self._has_pending_orders():
                return {'success': True, 'reason': '–ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞', 'action': 'wait'}

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            position_state = self._analyze_position_state(market_data)

            if position_state['has_position']:
                # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                action_result = self.hybrid_strategy.analyze_and_execute(market_data)

                if action_result.get('should_execute'):
                    success = self.hybrid_strategy.execute_action(action_result)

                    return {
                        'success': True,
                        'action': action_result['action'],
                        'reason': action_result['reason'],
                        'trade_executed': success
                    }
                else:
                    return {
                        'success': True,
                        'action': action_result['action'],
                        'reason': action_result['reason'],
                        'trade_executed': False
                    }
            else:
                # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –∏—â–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                return self._handle_no_position(market_data)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            return {'success': False, 'reason': f'–û—à–∏–±–∫–∞: {str(e)}'}

    def _validate_market_data(self, market_data: Dict[str, Any]) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        required_fields = ['current_price', 'balance', 'accurate_position']
        return all(field in market_data for field in required_fields)

    def _has_pending_orders(self) -> bool:
        """üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            open_orders = self.api.get_open_orders()
            pair_orders = open_orders.get(self.pair, [])
            return len(pair_orders) > 0
        except:
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞

    def _analyze_position_state(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        accurate_data = market_data['accurate_position']

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        min_quantity = self._get_min_quantity()

        return {
            'has_position': accurate_data['quantity'] >= min_quantity,
            'quantity': accurate_data['quantity'],
            'avg_price': accurate_data['avg_price']
        }

    def _handle_no_position(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        return {
            'success': True,
            'action': 'wait_entry',
            'reason': '–ñ–¥–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞',
            'trade_executed': False
        }

    def _get_min_quantity(self) -> float:
        """üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            pair_settings = self.api.get_pair_settings()
            return float(pair_settings.get(self.pair, {}).get('min_quantity', 0.01))
        except:
            return 0.01

    def get_orchestrator_status(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return {
            'type': 'hybrid_orchestrator',
            'pair': self.pair,
            'hybrid_strategy_status': self.hybrid_strategy.get_strategy_status(),
            'last_update': datetime.now().isoformat()
        }
