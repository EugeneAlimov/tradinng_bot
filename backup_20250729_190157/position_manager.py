from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
import logging
import time
import json
import os
import shutil
from config import TradingConfig


@dataclass
class Position:
    quantity: float
    avg_price: float
    total_cost: float
    last_updated: datetime
    trades: List[Dict[str, Any]]

    def to_dict(self) -> dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'quantity': self.quantity,
            'avg_price': self.avg_price,
            'total_cost': self.total_cost,
            'last_updated': self.last_updated.isoformat(),
            'trades': [
                {
                    'date': trade.get('date').isoformat() if isinstance(trade.get('date'), datetime) else str(
                        trade.get('date', '')),
                    'timestamp': trade.get('timestamp', 0),
                    'type': trade.get('type', ''),
                    'quantity': trade.get('quantity', 0),
                    'price': trade.get('price', 0),
                    'amount': trade.get('amount', 0),
                    'commission': trade.get('commission', 0)
                } for trade in self.trades
            ]
        }

    @classmethod
    def from_dict(cls, data: dict) -> 'Position':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON"""
        trades = []
        for trade_data in data.get('trades', []):
            trade = trade_data.copy()
            if 'date' in trade and trade['date']:
                try:
                    trade['date'] = datetime.fromisoformat(trade['date'])
                except:
                    trade['date'] = datetime.now()
            trades.append(trade)

        return cls(
            quantity=float(data['quantity']),
            avg_price=float(data['avg_price']),
            total_cost=float(data['total_cost']),
            last_updated=datetime.fromisoformat(data['last_updated']),
            trades=trades
        )


class PositionManager:
    def __init__(self, config: TradingConfig, api_client):
        self.config = config
        self.api = api_client
        self.logger = logging.getLogger(__name__)
        self.positions = {}  # {currency: Position}

        # üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
        self.positions_file = 'data/positions.json'
        self.backup_file = 'data/positions_backup.json'
        self.trades_file = 'data/trades_history.json'

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        os.makedirs('data', exist_ok=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_positions_from_file()

        self.logger.info("üíæ PositionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª—ã")

    def save_positions_to_file(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –±—ç–∫–∞–ø–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(self.positions_file):
                shutil.copy2(self.positions_file, self.backup_file)
                self.logger.debug(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–∑–∏—Ü–∏–π")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            data = {
                'version': '1.0',
                'timestamp': datetime.now().isoformat(),
                'config': {
                    'currency_1': self.config.CURRENCY_1,
                    'currency_2': self.config.CURRENCY_2
                },
                'positions': {}
            }

            for currency, position in self.positions.items():
                data['positions'][currency] = position.to_dict()

            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.positions_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
            shutil.move(temp_file, self.positions_file)

            self.logger.debug(f"üíæ –ü–æ–∑–∏—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.positions_file}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
            temp_file = self.positions_file + '.tmp'
            if os.path.exists(temp_file):
                os.remove(temp_file)

    def load_positions_from_file(self) -> Dict[str, Position]:
        """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –±—ç–∫–∞–ø–∞"""

        def try_load_file(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}: {e}")
                return None

        try:
            data = None

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(self.positions_file):
                data = try_load_file(self.positions_file)

            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—ç–∫–∞–ø
            if data is None and os.path.exists(self.backup_file):
                self.logger.warning(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞")
                data = try_load_file(self.backup_file)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–∑ –±—ç–∫–∞–ø–∞
                if data:
                    shutil.copy2(self.backup_file, self.positions_file)
                    self.logger.info(f"üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞")

            if data is None:
                self.logger.info(f"üìÇ –§–∞–π–ª—ã –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
            if 'positions' not in data:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π")
                return {}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
            version = data.get('version', '0.0')
            if version != '1.0':
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞: {version}")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            loaded_positions = {}
            for currency, position_data in data['positions'].items():
                try:
                    position = Position.from_dict(position_data)
                    loaded_positions[currency] = position

                    self.logger.info(
                        f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {currency}: {position.quantity:.6f} –ø–æ {position.avg_price:.8f}")

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {currency}: {e}")

            self.positions = loaded_positions

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            file_timestamp = datetime.fromisoformat(data.get('timestamp', '2020-01-01'))
            age_hours = (datetime.now() - file_timestamp).total_seconds() / 3600

            if age_hours > 24:
                self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç–∞—Ä–µ–ª ({age_hours:.1f} —á–∞—Å–æ–≤), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(loaded_positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞")
            return loaded_positions

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {}

    def save_trade_to_history(self, trade_info: Dict[str, Any]):
        """üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            history = []
            if os.path.exists(self.trades_file):
                with open(self.trades_file, 'r', encoding='utf-8') as f:
                    history = json.load(f)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
            trade_record = {
                'timestamp': datetime.now().isoformat(),
                'pair': f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}",
                **trade_info
            }
            history.append(trade_record)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–¥–µ–ª–æ–∫)
            if len(history) > 1000:
                history = history[-1000:]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.trades_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, indent=2, ensure_ascii=False)

            self.logger.debug(f"üìù –°–¥–µ–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

    def validate_position_vs_balance(self) -> tuple[float, float, float]:
        """üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            user_info = self.api.get_user_info()
            real_balance = float(user_info['balances'].get(self.config.CURRENCY_1, 0))

            position_obj = self.positions.get(self.config.CURRENCY_1)
            calculated_position = position_obj.quantity if position_obj else 0.0

            discrepancy = abs(real_balance - calculated_position)

            self.logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π:")
            self.logger.info(f"   üìä –†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {real_balance:.6f} {self.config.CURRENCY_1}")
            self.logger.info(f"   üßÆ –†–∞—Å—á–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {calculated_position:.6f} {self.config.CURRENCY_1}")
            self.logger.info(f"   ‚öñÔ∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {discrepancy:.6f} {self.config.CURRENCY_1}")

            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è DOGE
            # –î–ª—è DOGE —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ 0.06 –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–π
            flexible_threshold = max(
                self.config.MAX_POSITION_DISCREPANCY,  # 0.01 –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                real_balance * 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –Ω–æ –º–∏–Ω–∏–º—É–º 0.01
            )

            if self.config.POSITION_VALIDATION_ENABLED and discrepancy > flexible_threshold:
                self.logger.warning(f"‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –í–´–®–ï –ì–ò–ë–ö–û–ì–û –ü–û–†–û–ì–ê!")
                self.logger.warning(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {discrepancy:.6f} > –ø–æ—Ä–æ–≥–∞ {flexible_threshold:.6f}")

                # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ (>10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞) - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if discrepancy > real_balance * 0.1 and real_balance > 0:
                    self.logger.error(f"üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: {discrepancy / real_balance * 100:.1f}%")
                    raise Exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö: {discrepancy:.6f}")

                # –ò–Ω–∞—á–µ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
                self.logger.warning(f"üîß –ú–Ø–ì–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º")
                self.force_sync_with_real_balance(real_balance)

            return real_balance, calculated_position, discrepancy

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return 0, 0, 0

    def force_sync_with_real_balance(self, real_balance: float):
        """üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º"""
        if real_balance > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
            estimated_avg_price = 0.19  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

            old_position = self.positions.get(self.config.CURRENCY_1)
            if old_position and old_position.avg_price > 0:
                estimated_avg_price = old_position.avg_price

            self.positions[self.config.CURRENCY_1] = Position(
                quantity=real_balance,
                avg_price=estimated_avg_price,
                total_cost=real_balance * estimated_avg_price,
                last_updated=datetime.now(),
                trades=[]
            )

            self.logger.warning(f"üîß –ü–æ–∑–∏—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:")
            self.logger.warning(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {real_balance:.6f}")
            self.logger.warning(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {estimated_avg_price:.6f}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.save_positions_to_file()

        else:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π
            if self.config.CURRENCY_1 in self.positions:
                del self.positions[self.config.CURRENCY_1]
                self.logger.info("üóëÔ∏è  –ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ (–Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å)")
                self.save_positions_to_file()

    def load_positions_from_history(self, days_back: int = 365) -> Dict[str, Position]:
        """üìö –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤ API"""
        try:
            self.logger.info(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π...")

            target_pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
            user_trades = self.api.get_user_trades(pair=target_pair, limit=1000)

            if not user_trades or target_pair not in user_trades:
                self.logger.info("üìù –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
                return {}

            trades = user_trades[target_pair]
            if not trades:
                self.logger.info(f"üìù –°–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–µ {target_pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return {}

            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω –∫–ª—é—á {target_pair} —Å {len(trades)} —Å–¥–µ–ª–∫–∞–º–∏")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏
            processed_trades = self._process_raw_trades(trades, days_back)

            if not processed_trades:
                return {}

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            currency = self.config.CURRENCY_1
            position = self._calculate_position_fifo(processed_trades)

            positions = {}
            if position and position.quantity > 0:
                positions[currency] = position
                self.logger.info(
                    f"üìä –†–∞—Å—á–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {currency}: {position.quantity:.6f} –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ {position.avg_price:.8f}")
            else:
                self.logger.info("üí≠ –†–∞—Å—á–µ—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ä–∞–≤–Ω–∞ –Ω—É–ª—é")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.positions.update(positions)
            if positions:
                self.save_positions_to_file()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if self.config.POSITION_VALIDATION_ENABLED:
                try:
                    self.validate_position_vs_balance()
                except Exception as validation_error:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {validation_error}")

            return positions

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "no trades" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if "Error 50304" in str(e) or "no trades" in str(e).lower():
                self.logger.info("üí° –ü–æ —ç—Ç–æ–π –ø–∞—Ä–µ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

            return {}

    def _process_raw_trades(self, trades: List[Dict], days_back: int) -> List[Dict]:
        """üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        processed_trades = []
        cutoff_date = datetime.now() - timedelta(days=days_back)

        for i, trade in enumerate(trades):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['date', 'type', 'quantity', 'price', 'amount']
                if not all(field in trade for field in required_fields):
                    self.logger.error(f"‚ùå –í —Å–¥–µ–ª–∫–µ {i} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è")
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                timestamp = int(trade['date'])
                if timestamp > 2000000000:  # –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                    timestamp = timestamp // 1000

                trade_date = datetime.fromtimestamp(timestamp)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–¥–µ–ª–∫–∏
                if trade_date < cutoff_date:
                    continue

                trade_info = {
                    'date': trade_date,
                    'timestamp': timestamp,
                    'type': trade['type'],
                    'quantity': float(trade['quantity']),
                    'price': float(trade['price']),
                    'amount': float(trade['amount']),
                    'commission': float(trade.get('commission_amount', 0))
                }

                self.logger.info(
                    f"üìä –°–¥–µ–ª–∫–∞ {trade_date.strftime('%Y-%m-%d %H:%M')}: {trade['type']} {trade['quantity']} –ø–æ {trade['price']}")
                processed_trades.append(trade_info)

            except Exception as trade_error:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ {i}: {trade_error}")
                continue

        return processed_trades

    def _calculate_position_fifo(self, trades: List[Dict]) -> Optional[Position]:
        """üßÆ –£–õ–£–ß–®–ï–ù–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ FIFO –º–µ—Ç–æ–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π"""
        if not trades:
            return None

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_trades = sorted(trades, key=lambda x: x['timestamp'])

        position_quantity = 0.0
        weighted_cost = 0.0
        all_trades_for_position = []

        self.logger.info("üßÆ –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ FIFO:")

        for trade in sorted_trades:
            trade_quantity = float(trade['quantity'])
            trade_price = float(trade['price'])
            trade_cost = float(trade['amount'])
            commission = float(trade.get('commission', 0))

            if trade['type'] == 'buy':
                # –ü–æ–∫—É–ø–∫–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–∑–∏—Ü–∏–∏
                position_quantity += trade_quantity

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                actual_cost = trade_cost + commission
                weighted_cost += actual_cost

                avg_price = weighted_cost / position_quantity if position_quantity > 0 else 0

                self.logger.info(
                    f"  ‚úÖ {trade['date'].strftime('%m-%d %H:%M')} –ü–æ–∫—É–ø–∫–∞: +{trade_quantity:.4f} –ø–æ {trade_price:.6f}")
                self.logger.info(f"     –°—Ç–æ–∏–º–æ—Å—Ç—å: {trade_cost:.4f} + –∫–æ–º–∏—Å—Å–∏—è {commission:.4f} = {actual_cost:.4f}")
                self.logger.info(f"     –ü–æ–∑–∏—Ü–∏—è: {position_quantity:.4f}, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.6f}")

            else:
                # –ü—Ä–æ–¥–∞–∂–∞ - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                old_quantity = position_quantity
                position_quantity -= trade_quantity

                if position_quantity > 0:
                    # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    cost_ratio = position_quantity / old_quantity
                    weighted_cost *= cost_ratio
                    avg_price = weighted_cost / position_quantity
                else:
                    # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    position_quantity = 0
                    weighted_cost = 0
                    avg_price = 0

                self.logger.info(
                    f"  ‚ùå {trade['date'].strftime('%m-%d %H:%M')} –ü—Ä–æ–¥–∞–∂–∞: -{trade_quantity:.4f} –ø–æ {trade_price:.6f}")
                self.logger.info(f"     –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ–¥–∞–∂–∏: {commission:.4f}")
                self.logger.info(f"     –ü–æ–∑–∏—Ü–∏—è: {position_quantity:.4f}, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.6f}")

            all_trades_for_position.append(trade)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if position_quantity <= 0:
            self.logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: 0 (–≤—Å–µ –ø—Ä–æ–¥–∞–Ω–æ)")
            return None

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–∫—Ä—É–≥–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        position_quantity = round(position_quantity, 6)
        avg_price = round(weighted_cost / position_quantity, 8) if position_quantity > 0 else 0
        weighted_cost = round(weighted_cost, 4)

        self.logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º):")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position_quantity:.6f}")
        self.logger.info(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.8f}")
        self.logger.info(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {weighted_cost:.4f}")

        return Position(
            quantity=position_quantity,
            avg_price=avg_price,
            total_cost=weighted_cost,
            last_updated=datetime.now(),
            trades=all_trades_for_position
        )

    def get_accurate_position_data(self, currency: str) -> Dict[str, Any]:
        """üìä –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –ø–æ—Å–ª–µ DCA"""
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
            current_time = time.time()
            if hasattr(self, '_last_trade_time') and (current_time - self._last_trade_time) < 30:
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ–¥–∞–≤–Ω—è—è —Å–¥–µ–ª–∫–∞)")
                position_obj = self.positions.get(currency)
                if position_obj:
                    return {
                        'quantity': position_obj.quantity,
                        'avg_price': position_obj.avg_price,
                        'data_source': 'calculated_recent_trade',
                        'real_balance': 0,  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å –±–∏—Ä–∂–∏
                        'calculated_balance': position_obj.quantity,
                        'discrepancy_percent': 0,  # –°—á–∏—Ç–∞–µ–º —Ç–æ—á–Ω—ã–º–∏
                        'is_accurate': True
                    }

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            user_info = self.api.get_user_info()
            real_balance = float(user_info['balances'].get(currency, 0))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            position_obj = self.positions.get(currency)
            calculated_balance = position_obj.quantity if position_obj else 0.0
            calculated_avg_price = position_obj.avg_price if position_obj else 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            discrepancy = abs(real_balance - calculated_balance)
            discrepancy_percent = (discrepancy / max(real_balance, calculated_balance) * 100) if max(real_balance,
                                                                                                     calculated_balance) > 0 else 0

            # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –î–ê–ù–ù–´–•:
            if discrepancy_percent < 5.0:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–æ 5%
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ–Ω–∏ —Ç–æ—á–Ω–µ–µ
                use_calculated = True
                final_quantity = calculated_balance
                final_avg_price = calculated_avg_price
                data_source = "calculated"
            elif discrepancy_percent < 20.0:  # –ù–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ä–æ–≥ 20%
                # –°–º–µ—à–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –Ω–æ —Ä–∞—Å—á–µ—Ç–Ω—É—é —Ü–µ–Ω—É
                use_calculated = False
                final_quantity = real_balance
                final_avg_price = calculated_avg_price if calculated_avg_price > 0 else self._estimate_avg_price(
                    currency)
                data_source = "mixed"

                self.logger.warning(f"üìä –°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ {discrepancy_percent:.1f}%)")
            else:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                use_calculated = False
                final_quantity = real_balance
                final_avg_price = self._estimate_avg_price(currency) or calculated_avg_price
                data_source = "real_balance"

            self.logger.info(f"üìä –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {currency}:")
            self.logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {data_source}")
            self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {final_quantity:.6f}")
            self.logger.info(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {final_avg_price:.8f}")
            self.logger.info(f"   –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {discrepancy_percent:.2f}%")

            return {
                'quantity': final_quantity,
                'avg_price': final_avg_price,
                'data_source': data_source,
                'real_balance': real_balance,
                'calculated_balance': calculated_balance,
                'discrepancy_percent': discrepancy_percent,
                'is_accurate': discrepancy_percent < 5.0
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {
                'quantity': 0,
                'avg_price': 0,
                'data_source': 'error',
                'is_accurate': False
            }

    def _estimate_avg_price(self, currency: str) -> Optional[float]:
        """üí° –û—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pair = f"{currency}_{self.config.CURRENCY_2}"
            user_trades = self.api.get_user_trades(pair=pair, limit=50)

            if not user_trades or pair not in user_trades:
                return None

            trades = user_trades[pair]
            if not trades:
                return None

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            recent_buys = []
            for trade in trades[:20]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–¥–µ–ª–æ–∫
                if trade['type'] == 'buy':
                    recent_buys.append(float(trade['price']))

            if recent_buys:
                # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫
                return sum(recent_buys) / len(recent_buys)

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã: {e}")
            return None

    def update_position(self, currency: str, trade_info: Dict[str, Any]):
        """üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
            self._last_trade_time = time.time()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_trade_to_history(trade_info)

            if currency not in self.positions:
                if trade_info['type'] == 'buy':
                    # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
                    self.positions[currency] = Position(
                        quantity=trade_info['quantity'],
                        avg_price=trade_info['price'],
                        total_cost=trade_info['amount'],
                        last_updated=datetime.now(),
                        trades=[trade_info]
                    )
                    self.logger.info(
                        f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {currency}: {trade_info['quantity']:.6f} –ø–æ {trade_info['price']:.6f}")
            else:
                position = self.positions[currency]

                if trade_info['type'] == 'buy':
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    new_total_cost = position.total_cost + trade_info['amount']
                    new_quantity = position.quantity + trade_info['quantity']
                    new_avg_price = new_total_cost / new_quantity

                    self.logger.info(f"üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {currency}:")
                    self.logger.info(f"   {position.quantity:.6f} -> {new_quantity:.6f}")
                    self.logger.info(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {position.avg_price:.6f} -> {new_avg_price:.6f}")

                    position.quantity = new_quantity
                    position.avg_price = new_avg_price
                    position.total_cost = new_total_cost
                    position.trades.append(trade_info)
                else:
                    # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    new_quantity = position.quantity - trade_info['quantity']

                    self.logger.info(f"üìâ –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é {currency}: {position.quantity:.6f} -> {new_quantity:.6f}")

                    if new_quantity <= 0:
                        self.logger.info(f"üóëÔ∏è  –ü–æ–∑–∏—Ü–∏—è {currency} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                        del self.positions[currency]
                    else:
                        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        cost_ratio = new_quantity / position.quantity
                        position.quantity = new_quantity
                        position.total_cost *= cost_ratio
                        position.trades.append(trade_info)

                if currency in self.positions:
                    self.positions[currency].last_updated = datetime.now()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            self.save_positions_to_file()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")

    def get_position(self, currency: str) -> Optional[Position]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–µ"""
        return self.positions.get(currency)

    def get_position_summary(self) -> Dict[str, Any]:
        """üìä –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        summary = {}
        for currency, position in self.positions.items():
            summary[currency] = {
                'quantity': position.quantity,
                'avg_price': position.avg_price,
                'total_cost': position.total_cost,
                'last_updated': position.last_updated.isoformat(),
                'trades_count': len(position.trades)
            }
        return summary

    def export_positions_history(self, filename: str = None) -> str:
        """üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π"""
        if filename is None:
            filename = f"data/positions_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        try:
            export_data = {
                'export_timestamp': datetime.now().isoformat(),
                'version': '1.0',
                'config': {
                    'currency_1': self.config.CURRENCY_1,
                    'currency_2': self.config.CURRENCY_2
                },
                'positions': self.get_position_summary(),
                'file_info': {
                    'positions_file': self.positions_file,
                    'backup_file': self.backup_file,
                    'trades_file': self.trades_file
                }
            }

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)

            self.logger.info(f"üì§ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
            return filename

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return None

    def cleanup_old_files(self, days_to_keep: int = 30):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
            export_pattern = 'data/positions_export_'
            if os.path.exists('data'):
                for filename in os.listdir('data'):
                    if filename.startswith('positions_export_'):
                        filepath = os.path.join('data', filename)
                        file_age = time.time() - os.path.getmtime(filepath)
                        if file_age > days_to_keep * 24 * 3600:
                            os.remove(filepath)
                            self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {filename}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")