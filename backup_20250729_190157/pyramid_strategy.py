import logging
import time
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime


class SmartPyramidStrategy:
    """üèóÔ∏è –£–º–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø—Ä–æ–¥–∞–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self, config, position_manager):
        self.config = config
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)

        # üéØ –ù–ê–°–¢–†–û–ô–ö–ò –ü–ò–†–ê–ú–ò–î–´ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è DOGE)
        self.pyramid_levels = [
            {
                'name': '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.008,    # +0.8% - –±—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è
                'sell_percent': 25,           # 25% –ø–æ–∑–∏—Ü–∏–∏
                'min_profit_eur': 0.10        # –ú–∏–Ω–∏–º—É–º 0.10 EUR –ø—Ä–∏–±—ã–ª–∏
            },
            {
                'name': '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.02,     # +2% - —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å
                'sell_percent': 35,           # 35% –ø–æ–∑–∏—Ü–∏–∏
                'min_profit_eur': 0.20        # –ú–∏–Ω–∏–º—É–º 0.20 EUR –ø—Ä–∏–±—ã–ª–∏
            },
            {
                'name': '–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.04,     # +4% - –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
                'sell_percent': 25,           # 25% –ø–æ–∑–∏—Ü–∏–∏
                'min_profit_eur': 0.30        # –ú–∏–Ω–∏–º—É–º 0.30 EUR –ø—Ä–∏–±—ã–ª–∏
            },
            {
                'name': '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.07,     # +7% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
                'sell_percent': 15,           # 15% –ø–æ–∑–∏—Ü–∏–∏
                'min_profit_eur': 0.50        # –ú–∏–Ω–∏–º—É–º 0.50 EUR –ø—Ä–∏–±—ã–ª–∏
            }
        ]

        # üõ°Ô∏è –ó–ê–©–ò–¢–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
        self.min_sell_quantity = 5.0          # –ú–∏–Ω–∏–º—É–º 5 DOGE –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        self.max_sell_per_cycle = 0.4          # –ú–∞–∫—Å–∏–º—É–º 40% –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
        self.cooldown_between_sells = 300      # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
        self.last_sell_time = 0

        self.logger.info("üèóÔ∏è –£–º–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"   üìä –£—Ä–æ–≤–Ω–µ–π: {len(self.pyramid_levels)}")
        self.logger.info(f"   üõ°Ô∏è –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.min_sell_quantity} DOGE")
        self.logger.info(f"   ‚è∞ –ö—É–ª–¥–∞—É–Ω: {self.cooldown_between_sells} —Å–µ–∫")

    def analyze_sell_opportunity(self, current_price: float, position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            if not position_data or position_data.get('quantity', 0) == 0:
                return {'should_sell': False, 'reason': '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏'}

            total_quantity = position_data['quantity']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if not self._can_sell_now():
                remaining_cooldown = self._get_remaining_cooldown()
                return {
                    'should_sell': False,
                    'reason': f'–ö—É–ª–¥–∞—É–Ω: {remaining_cooldown:.0f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–¥–∞–∂–∏'
                }

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–∞—Ö
            purchase_levels = self._get_purchase_levels()

            if not purchase_levels:
                return {'should_sell': False, 'reason': '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫'}

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∏—Ä–∞–º–∏–¥—ã
            best_opportunity = None
            max_profit = 0

            for level in self.pyramid_levels:
                opportunity = self._analyze_pyramid_level(
                    current_price,
                    purchase_levels,
                    level,
                    total_quantity
                )

                if (opportunity['can_sell'] and
                    opportunity['total_profit'] > max_profit and
                    opportunity['total_profit'] >= level['min_profit_eur']):

                    best_opportunity = opportunity
                    max_profit = opportunity['total_profit']

            if best_opportunity:
                return {
                    'should_sell': True,
                    'strategy': 'smart_pyramid',
                    **best_opportunity
                }

            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å
            next_target = self._get_next_target_price(current_price, purchase_levels)

            return {
                'should_sell': False,
                'reason': '–ù–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏',
                'next_target': next_target
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {'should_sell': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}

    def _get_purchase_levels(self) -> List[Dict[str, Any]]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–∫—É–ø–æ–∫ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""

        try:
            position_obj = self.position_manager.get_position(self.config.CURRENCY_1)

            if not position_obj or not position_obj.trades:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –≤ –ø–æ–∑–∏—Ü–∏–∏")
                return []

            purchase_groups = []

            for trade in position_obj.trades:
                if trade.get('type') == 'buy':
                    purchase_groups.append({
                        'price': float(trade.get('price', 0)),
                        'quantity': float(trade.get('quantity', 0)),
                        'cost': float(trade.get('amount', 0)),
                        'date': trade.get('timestamp', 'unknown')
                    })

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–µ—à–µ–≤—ã—Ö –∫ –¥–æ—Ä–æ–≥–∏–º)
            purchase_groups.sort(key=lambda x: x['price'])

            self.logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(purchase_groups)} –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return purchase_groups

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫: {e}")
            return []

    def _analyze_pyramid_level(self, current_price: float, purchases: List[Dict], level: Dict, total_quantity: float) -> Dict[str, Any]:
        """üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–∏—Ä–∞–º–∏–¥—ã"""

        level_name = level['name']
        target_multiplier = level['price_multiplier']
        sell_percentage = level['sell_percent'] / 100

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫—É–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å –ø—Ä–∏–±—ã–ª—å—é –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
        profitable_purchases = []

        for purchase in purchases:
            if purchase['price'] <= 0:
                continue

            required_price = purchase['price'] * target_multiplier

            if current_price >= required_price:
                profit_per_coin = current_price - purchase['price']
                total_profit_from_purchase = profit_per_coin * purchase['quantity']
                profit_percent = (profit_per_coin / purchase['price']) * 100

                profitable_purchases.append({
                    'purchase': purchase,
                    'profit_per_coin': profit_per_coin,
                    'total_profit_from_purchase': total_profit_from_purchase,
                    'profit_percent': profit_percent,
                    'required_price': required_price
                })

        if not profitable_purchases:
            return {'can_sell': False, 'level': level_name, 'reason': '–ù–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫'}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        total_profitable_quantity = sum(p['purchase']['quantity'] for p in profitable_purchases)
        max_sell_by_percentage = total_quantity * sell_percentage
        max_sell_by_cycle_limit = total_quantity * self.max_sell_per_cycle

        sell_quantity = min(
            total_profitable_quantity,
            max_sell_by_percentage,
            max_sell_by_cycle_limit
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if sell_quantity < self.min_sell_quantity:
            return {
                'can_sell': False,
                'level': level_name,
                'reason': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {sell_quantity:.2f} < –º–∏–Ω–∏–º—É–º–∞ {self.min_sell_quantity}'
            }

        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (FIFO –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏)
        profitable_purchases.sort(key=lambda x: x['purchase']['price'])

        selected_for_sell = []
        remaining_to_sell = sell_quantity
        total_cost_of_sold = 0

        for p in profitable_purchases:
            if remaining_to_sell <= 0:
                break

            sell_from_this = min(remaining_to_sell, p['purchase']['quantity'])
            cost_of_this_part = sell_from_this * p['purchase']['price']

            selected_for_sell.append({
                'quantity': sell_from_this,
                'buy_price': p['purchase']['price'],
                'cost': cost_of_this_part,
                'profit': (current_price - p['purchase']['price']) * sell_from_this
            })

            total_cost_of_sold += cost_of_this_part
            remaining_to_sell -= sell_from_this

        total_profit = sum(s['profit'] for s in selected_for_sell)
        revenue = sell_quantity * current_price
        profit_percent_total = (total_profit / total_cost_of_sold * 100) if total_cost_of_sold > 0 else 0

        return {
            'can_sell': True,
            'level': level_name,
            'sell_quantity': sell_quantity,
            'sell_price': current_price * 0.9995,  # –ù–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            'total_profit': total_profit,
            'profit_percent': profit_percent_total,
            'revenue': revenue,
            'cost': total_cost_of_sold,
            'selected_purchases': selected_for_sell,
            'target_multiplier': target_multiplier,
            'reason': f'{level_name}: –ø—Ä–æ–¥–∞–∂–∞ {sell_quantity:.2f} DOGE —Å –ø—Ä–∏–±—ã–ª—å—é {total_profit:.4f} EUR ({profit_percent_total:.1f}%)'
        }

    def _get_next_target_price(self, current_price: float, purchases: List[Dict]) -> Dict[str, Any]:
        """üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã"""

        if not purchases:
            return {'price': current_price * 1.02, 'reason': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∫–∞—Ö'}

        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç–∏–∂–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–±—ã–ª–∏
        min_required_price = float('inf')
        target_info = None

        for purchase in purchases:
            for level in self.pyramid_levels:
                required_price = purchase['price'] * level['price_multiplier']
                if required_price > current_price and required_price < min_required_price:
                    min_required_price = required_price
                    target_info = {
                        'purchase_price': purchase['price'],
                        'level': level,
                        'required_price': required_price
                    }

        if target_info:
            growth_needed = (min_required_price - current_price) / current_price * 100
            return {
                'price': min_required_price,
                'growth_needed': growth_needed,
                'target_level': target_info['level']['name'],
                'purchase_price': target_info['purchase_price'],
                'reason': f"–î–æ {target_info['level']['name']}: —Ä–æ—Å—Ç –Ω–∞ {growth_needed:.1f}% –¥–æ {min_required_price:.6f}"
            }

        return {
            'price': current_price * 1.02,
            'growth_needed': 2.0,
            'reason': '–í—Å–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã, –æ–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç–∞ +2%'
        }

    def _can_sell_now(self) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏ (–∫—É–ª–¥–∞—É–Ω)"""
        current_time = time.time()
        return (current_time - self.last_sell_time) >= self.cooldown_between_sells

    def _get_remaining_cooldown(self) -> float:
        """‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∫—É–ª–¥–∞—É–Ω–∞"""
        current_time = time.time()
        elapsed = current_time - self.last_sell_time
        return max(0, self.cooldown_between_sells - elapsed)

    def execute_pyramid_sell(self, sell_data: Dict[str, Any], api_client) -> bool:
        """üöÄ –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""

        if not sell_data.get('should_sell'):
            return False

        quantity = sell_data['sell_quantity']
        price = sell_data['sell_price']
        level = sell_data['level']
        expected_profit = sell_data['total_profit']

        self.logger.info(f"üèóÔ∏è –ü–ò–†–ê–ú–ò–î–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê: {level}")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} DOGE")
        self.logger.info(f"   –¶–µ–Ω–∞: {price:.8f} EUR")
        self.logger.info(f"   –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {expected_profit:.4f} EUR")
        self.logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: {sell_data.get('profit_percent', 0):.1f}%")

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–∞–º
        self.logger.info(f"   üìä –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏:")
        for i, purchase in enumerate(sell_data.get('selected_purchases', []), 1):
            self.logger.info(
                f"     {i}. {purchase['quantity']:.4f} DOGE "
                f"(–∫—É–ø–ª–µ–Ω–æ –ø–æ {purchase['buy_price']:.6f}) ‚Üí "
                f"–ø—Ä–∏–±—ã–ª—å {purchase['profit']:.4f} EUR"
            )

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–∏—Ä–∂–∏
            pair_settings = api_client.get_pair_settings()
            precision = int(pair_settings.get(pair, {}).get('price_precision', 8))
            price_rounded = round(price, precision)

            result = api_client.create_order(pair, quantity, price_rounded, 'sell')

            if result.get('result'):
                self.logger.info(f"‚úÖ –ü–ò–†–ê–ú–ò–î–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –ò–°–ü–û–õ–ù–ï–ù–ê!")
                self.logger.info(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
                self.last_sell_time = time.time()

                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {result}")

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ: {e}")

        return False

    def get_pyramid_status(self, current_price: float, position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

        try:
            analysis = self.analyze_sell_opportunity(current_price, position_data)

            status = {
                'strategy': 'smart_pyramid',
                'current_price': current_price,
                'can_sell_now': analysis.get('should_sell', False),
                'cooldown_remaining': self._get_remaining_cooldown(),
                'levels_status': []
            }

            if analysis.get('should_sell'):
                status['ready_level'] = analysis['level']
                status['sell_quantity'] = analysis['sell_quantity']
                status['expected_profit'] = analysis['total_profit']
                status['reason'] = analysis.get('reason', '–ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∂–µ')
            else:
                status['reason'] = analysis.get('reason', '–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏')
                if 'next_target' in analysis:
                    status['next_target'] = analysis['next_target']

            # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–∏—Ä–∞–º–∏–¥—ã
            purchase_levels = self._get_purchase_levels()

            if purchase_levels:
                for level in self.pyramid_levels:
                    level_analysis = self._analyze_pyramid_level(
                        current_price, purchase_levels, level, position_data.get('quantity', 0)
                    )

                    status['levels_status'].append({
                        'name': level['name'],
                        'target_multiplier': level['price_multiplier'],
                        'target_price_range': f"{min(p['price'] * level['price_multiplier'] for p in purchase_levels):.6f}",
                        'can_sell': level_analysis.get('can_sell', False),
                        'potential_profit': level_analysis.get('total_profit', 0),
                        'sell_percent': level['sell_percent']
                    })

            return status

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Ä–∞–º–∏–¥—ã: {e}")
            return {
                'strategy': 'smart_pyramid',
                'error': str(e),
                'can_sell_now': False
            }
