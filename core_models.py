#!/usr/bin/env python3
"""üéØ –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from enum import Enum
from typing import Dict, List, Optional, Any
import uuid


class TradeAction(Enum):
    """üéØ –î–µ–π—Å—Ç–≤–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"


class OrderType(Enum):
    """üìù –¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    MARKET = "market"
    LIMIT = "limit"
    STOP_LOSS = "stop_loss"


class OrderStatus(Enum):
    """üìã –°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    FILLED = "filled"
    CANCELLED = "cancelled"
    FAILED = "failed"


class RiskLevel(Enum):
    """üõ°Ô∏è –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class StrategyType(Enum):
    """üéØ –¢–∏–ø—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    DCA = "dca"
    PYRAMID = "pyramid"
    TRAILING_STOP = "trailing_stop"
    EMERGENCY_EXIT = "emergency_exit"
    ARBITRAGE = "arbitrage"


@dataclass(frozen=True)
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""
    base: str  # DOGE
    quote: str  # EUR
    
    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"
    
    @classmethod
    def from_string(cls, pair_str: str) -> 'TradingPair':
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ 'DOGE_EUR'"""
        base, quote = pair_str.split('_')
        return cls(base=base, quote=quote)


@dataclass
class MarketData:
    """üìä –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    pair: TradingPair
    timestamp: datetime
    current_price: Decimal
    bid: Optional[Decimal] = None
    ask: Optional[Decimal] = None
    volume_24h: Optional[Decimal] = None
    high_24h: Optional[Decimal] = None
    low_24h: Optional[Decimal] = None
    volatility: Optional[float] = None
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    rsi: Optional[float] = None
    macd: Optional[float] = None
    bollinger_upper: Optional[Decimal] = None
    bollinger_lower: Optional[Decimal] = None
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")


@dataclass
class TradeSignal:
    """üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = field(default_factory=datetime.now)
    strategy_name: str = ""
    strategy_type: StrategyType = StrategyType.DCA
    action: TradeAction = TradeAction.HOLD
    pair: Optional[TradingPair] = None
    quantity: Decimal = Decimal('0')
    price: Optional[Decimal] = None
    confidence: float = 0.0  # 0.0 - 1.0
    reason: str = ""
    priority: int = 1
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    stop_loss: Optional[Decimal] = None
    take_profit: Optional[Decimal] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        if not 0.0 <= self.confidence <= 1.0:
            raise ValueError("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
        
        if self.action != TradeAction.HOLD and self.quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")


@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è"""
    currency: str
    quantity: Decimal
    avg_price: Decimal
    total_cost: Decimal
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ–∑–∏—Ü–∏–∏
    trades: List['Trade'] = field(default_factory=list)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    strategy_source: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def is_empty(self) -> bool:
        """–ü—É—Å—Ç–∞—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è"""
        return self.quantity <= 0
    
    def calculate_pnl(self, current_price: Decimal) -> Decimal:
        """üí∞ –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞"""
        if self.is_empty:
            return Decimal('0')
        
        current_value = self.quantity * current_price
        return current_value - self.total_cost
    
    def calculate_pnl_percentage(self, current_price: Decimal) -> float:
        """üìà –†–∞—Å—á–µ—Ç P&L –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.is_empty or self.total_cost <= 0:
            return 0.0
        
        pnl = self.calculate_pnl(current_price)
        return float(pnl / self.total_cost * 100)
    
    def update_after_trade(self, trade: 'Trade') -> None:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏"""
        self.updated_at = datetime.now()
        self.trades.append(trade)
        
        if trade.action == TradeAction.BUY:
            # –ü–æ–∫—É–ø–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            new_quantity = self.quantity + trade.quantity
            new_cost = self.total_cost + (trade.quantity * trade.price)
            
            self.quantity = new_quantity
            self.total_cost = new_cost
            self.avg_price = new_cost / new_quantity if new_quantity > 0 else Decimal('0')
            
        elif trade.action == TradeAction.SELL:
            # –ü—Ä–æ–¥–∞–∂–∞ - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.quantity = max(Decimal('0'), self.quantity - trade.quantity)
            
            if self.quantity > 0:
                # –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                ratio = self.quantity / (self.quantity + trade.quantity)
                self.total_cost = self.total_cost * ratio
            else:
                # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
                self.total_cost = Decimal('0')
                self.avg_price = Decimal('0')


@dataclass
class Trade:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = field(default_factory=datetime.now)
    pair: TradingPair = field(default_factory=lambda: TradingPair("DOGE", "EUR"))
    action: TradeAction = TradeAction.HOLD
    quantity: Decimal = Decimal('0')
    price: Decimal = Decimal('0')
    commission: Decimal = Decimal('0')
    commission_currency: str = "EUR"
    
    # –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    order_id: Optional[str] = None
    strategy_name: Optional[str] = None
    signal_id: Optional[str] = None
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    pnl: Optional[Decimal] = None
    pnl_percentage: Optional[float] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def total_amount(self) -> Decimal:
        """üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏"""
        return self.quantity * self.price
    
    @property
    def net_amount(self) -> Decimal:
        """üí∏ –°—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏"""
        base_amount = self.total_amount
        if self.action == TradeAction.BUY:
            return base_amount + self.commission
        else:
            return base_amount - self.commission


@dataclass
class OrderResult:
    """üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    success: bool
    order_id: Optional[str] = None
    message: str = ""
    timestamp: datetime = field(default_factory=datetime.now)
    filled_quantity: Decimal = Decimal('0')
    filled_price: Optional[Decimal] = None
    status: OrderStatus = OrderStatus.PENDING
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    exchange_response: Dict[str, Any] = field(default_factory=dict)
    error_code: Optional[str] = None


@dataclass
class RiskAssessment:
    """üõ°Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"""
    level: RiskLevel
    score: float  # 0.0 - 1.0
    max_position_size: Decimal
    recommended_action: TradeAction
    warnings: List[str] = field(default_factory=list)
    reasons: List[str] = field(default_factory=list)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    position_size_ok: bool = True
    daily_loss_limit_ok: bool = True
    volatility_ok: bool = True
    correlation_ok: bool = True
    
    def is_acceptable(self) -> bool:
        """‚úÖ –ü—Ä–∏–µ–º–ª–µ–º—ã–π –ª–∏ —Ä–∏—Å–∫"""
        return self.level in [RiskLevel.LOW, RiskLevel.MEDIUM]


@dataclass
class Portfolio:
    """üìà –ü–æ—Ä—Ç—Ñ–µ–ª—å"""
    timestamp: datetime = field(default_factory=datetime.now)
    positions: Dict[str, Position] = field(default_factory=dict)
    cash_balance: Dict[str, Decimal] = field(default_factory=dict)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    total_value: Decimal = Decimal('0')
    total_pnl: Decimal = Decimal('0')
    daily_pnl: Decimal = Decimal('0')
    max_drawdown: float = 0.0
    
    def get_position(self, currency: str) -> Optional[Position]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.positions.get(currency)
    
    def calculate_total_value(self, prices: Dict[str, Decimal]) -> Decimal:
        """üí∞ –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        total = Decimal('0')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
        for currency, balance in self.cash_balance.items():
            if currency in prices:
                total += balance * prices[currency]
            else:
                total += balance  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
        for currency, position in self.positions.items():
            if not position.is_empty and currency in prices:
                total += position.quantity * prices[currency]
        
        self.total_value = total
        return total


@dataclass
class PerformanceMetrics:
    """üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    period_days: int
    total_trades: int
    profitable_trades: int
    total_pnl: Decimal
    total_return_pct: float
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    win_rate: float
    avg_profit_per_trade: Decimal
    best_trade: Decimal
    worst_trade: Decimal
    
    # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
    max_drawdown_pct: float
    sharpe_ratio: Optional[float] = None
    volatility: Optional[float] = None
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_trade_duration_hours: Optional[float] = None
    trades_per_day: float = 0.0
    
    @property
    def loss_rate(self) -> float:
        """üìâ –ü—Ä–æ—Ü–µ–Ω—Ç —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return 100.0 - self.win_rate if self.total_trades > 0 else 0.0


@dataclass
class SystemHealth:
    """üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
    timestamp: datetime = field(default_factory=datetime.now)
    uptime_hours: float = 0.0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
    api_calls_total: int = 0
    api_calls_failed: int = 0
    api_success_rate: float = 100.0
    avg_response_time_ms: float = 0.0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    cycles_completed: int = 0
    last_trade_time: Optional[datetime] = None
    
    # –û—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    errors_count: int = 0
    warnings_count: int = 0
    last_error: Optional[str] = None
    
    # –†–µ—Å—É—Ä—Å—ã
    memory_usage_mb: Optional[float] = None
    cpu_usage_pct: Optional[float] = None
    
    @property
    def is_healthy(self) -> bool:
        """üíö –ó–¥–æ—Ä–æ–≤–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞"""
        return (
            self.api_success_rate > 95.0 and
            self.errors_count < 10 and
            (self.last_error is None or 
             (datetime.now() - self.timestamp).total_seconds() > 3600)
        )


@dataclass
class ConfigProfile:
    """‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name: str
    description: str
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    position_size_pct: float = 6.0  # 6% –¥–µ–ø–æ–∑–∏—Ç–∞
    min_profit_pct: float = 0.8     # 0.8% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
    stop_loss_pct: float = 8.0      # 8% —Å—Ç–æ–ø-–ª–æ—Å—Å
    
    # DCA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    dca_enabled: bool = True
    dca_drop_threshold_pct: float = 1.5    # 1.5% –ø–∞–¥–µ–Ω–∏–µ –¥–ª—è DCA
    dca_purchase_size_pct: float = 3.0     # 3% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ DCA
    dca_max_purchases: int = 5
    dca_cooldown_minutes: int = 20
    
    # –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    pyramid_levels: List[Dict[str, float]] = field(default_factory=lambda: [
        {'profit_pct': 0.8, 'sell_pct': 25.0, 'min_eur': 0.08},
        {'profit_pct': 2.0, 'sell_pct': 35.0, 'min_eur': 0.15},
        {'profit_pct': 4.0, 'sell_pct': 25.0, 'min_eur': 0.25},
        {'profit_pct': 7.0, 'sell_pct': 15.0, 'min_eur': 0.40},
    ])
    
    # –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    emergency_exit_enabled: bool = True
    emergency_critical_loss_pct: float = 15.0
    emergency_major_loss_pct: float = 12.0
    
    # Rate limiting
    api_calls_per_minute: int = 25
    api_calls_per_hour: int = 250
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_interval_seconds: int = 6
    
    @classmethod
    def create_conservative(cls) -> 'ConfigProfile':
        """üõ°Ô∏è –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        return cls(
            name="conservative",
            description="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤",
            position_size_pct=4.0,
            min_profit_pct=1.2,
            stop_loss_pct=6.0,
            dca_purchase_size_pct=2.0,
            dca_max_purchases=3,
            emergency_critical_loss_pct=10.0
        )
    
    @classmethod
    def create_aggressive(cls) -> 'ConfigProfile':
        """‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
        return cls(
            name="aggressive", 
            description="–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏",
            position_size_pct=10.0,
            min_profit_pct=0.6,
            stop_loss_pct=12.0,
            dca_purchase_size_pct=5.0,
            dca_max_purchases=7,
            update_interval_seconds=4
        )
    
    @classmethod
    def create_balanced(cls) -> 'ConfigProfile':
        """‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
        return cls(
            name="balanced",
            description="–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"
        )


@dataclass
class Event:
    """üì° –°–æ–±—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    timestamp: datetime = field(default_factory=datetime.now)
    type: str = ""
    source: str = ""
    data: Dict[str, Any] = field(default_factory=dict)
    priority: int = 1  # 1 = –Ω–∏–∑–∫–∏–π, 5 = –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    processed: bool = False
    processed_at: Optional[datetime] = None
    error: Optional[str] = None


# –°–æ–±—ã—Ç–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
@dataclass
class TradeExecutedEvent(Event):
    """üí± –°–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    type: str = "trade_executed"
    trade: Optional[Trade] = None
    
    def __post_init__(self):
        if self.trade:
            self.data = {
                'trade_id': self.trade.id,
                'action': self.trade.action.value,
                'quantity': str(self.trade.quantity),
                'price': str(self.trade.price),
                'pair': str(self.trade.pair)
            }


@dataclass
class EmergencyExitEvent(Event):
    """üö® –°–æ–±—ã—Ç–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞"""
    type: str = "emergency_exit"
    priority: int = 5
    position: Optional[Position] = None
    reason: str = ""
    
    def __post_init__(self):
        self.data = {
            'reason': self.reason,
            'currency': self.position.currency if self.position else '',
            'quantity': str(self.position.quantity) if self.position else '0'
        }


@dataclass
class RiskLimitExceededEvent(Event):
    """‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–æ–≤"""
    type: str = "risk_limit_exceeded"
    priority: int = 4
    limit_type: str = ""
    current_value: float = 0.0
    limit_value: float = 0.0
    
    def __post_init__(self):
        self.data = {
            'limit_type': self.limit_type,
            'current_value': self.current_value,
            'limit_value': self.limit_value,
            'exceeded_by': self.current_value - self.limit_value
        }