# advanced_trend_filter.py - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞
import logging
import time
import statistics
from typing import List, Dict, Tuple, Optional
from datetime import datetime, timedelta
from collections import deque
from dataclasses import dataclass
from enum import Enum


class TrendDirection(Enum):
    """üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""
    STRONG_BULLISH = "strong_bullish"    # –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
    BULLISH = "bullish"                  # –†–æ—Å—Ç
    SIDEWAYS = "sideways"                # –ë–æ–∫–æ–≤–∏–∫
    BEARISH = "bearish"                  # –ü–∞–¥–µ–Ω–∏–µ
    STRONG_BEARISH = "strong_bearish"    # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ


@dataclass
class TrendAnalysis:
    """üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞"""
    direction: TrendDirection
    strength: float                      # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ 0-1
    trend_4h: float                     # –¢—Ä–µ–Ω–¥ –∑–∞ 4 —á–∞—Å–∞ (%)
    trend_1h: float                     # –¢—Ä–µ–Ω–¥ –∑–∞ 1 —á–∞—Å (%)
    trend_15m: float                    # –¢—Ä–µ–Ω–¥ –∑–∞ 15 –º–∏–Ω—É—Ç (%)
    volatility: float                   # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    momentum: float                     # –ú–æ–º–µ–Ω—Ç—É–º
    confidence: float                   # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ 0-1
    should_allow_dca: bool              # –†–∞–∑—Ä–µ—à–∏—Ç—å DCA
    should_allow_buy: bool              # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
    reason: str                         # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è


class AdvancedTrendFilter:
    """üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""

    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)

        # üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        self.prices_1m = deque(maxlen=240)   # 4 —á–∞—Å–∞ –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.prices_5m = deque(maxlen=48)    # 4 —á–∞—Å–∞ 5-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.prices_15m = deque(maxlen=16)   # 4 —á–∞—Å–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.prices_1h = deque(maxlen=24)    # 24 —á–∞—Å–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        # ‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        self.last_5m_update = 0
        self.last_15m_update = 0
        self.last_1h_update = 0

        # üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        self.bearish_threshold_4h = -0.08    # -8% –∑–∞ 4 —á–∞—Å–∞ = —Å–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–¥—å
        self.bearish_threshold_1h = -0.04    # -4% –∑–∞ 1 —á–∞—Å = –º–µ–¥–≤–µ–¥—å
        self.bullish_threshold_4h = 0.06     # +6% –∑–∞ 4 —á–∞—Å–∞ = —Å–∏–ª—å–Ω—ã–π –±—ã–∫
        self.bullish_threshold_1h = 0.03     # +3% –∑–∞ 1 —á–∞—Å = –±—ã–∫

        # üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã DCA
        self.dca_disable_threshold = -0.05   # –û—Ç–∫–ª—é—á–∞—Ç—å DCA –ø—Ä–∏ -5% –∑–∞ 4—á
        self.buy_disable_threshold = -0.10   # –û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ -10% –∑–∞ 4—á
        self.high_volatility_threshold = 0.05 # 5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è

        # üìà Momentum –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.momentum_periods = [5, 10, 15]  # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ–º–µ–Ω—Ç—É–º–∞

        self.logger.info("üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π TrendFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üêª –ú–µ–¥–≤–µ–∂–∏–π –ø–æ—Ä–æ–≥: {self.bearish_threshold_4h*100:.0f}% –∑–∞ 4—á")
        self.logger.info(f"   üêÇ –ë—ã—á–∏–π –ø–æ—Ä–æ–≥: {self.bullish_threshold_4h*100:.0f}% –∑–∞ 4—á")
        self.logger.info(f"   üö´ DCA –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.dca_disable_threshold*100:.0f}% –∑–∞ 4—á")

    def update_price(self, current_price: float, timestamp: float = None):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if timestamp is None:
            timestamp = time.time()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∏–Ω—É—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        self.prices_1m.append((timestamp, current_price))

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self._aggregate_timeframes(timestamp, current_price)

    def _aggregate_timeframes(self, timestamp: float, price: float):
        """üîÑ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º"""

        # 5-–º–∏–Ω—É—Ç–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        if timestamp - self.last_5m_update >= 300:  # 5 –º–∏–Ω—É—Ç
            if len(self.prices_1m) >= 5:
                # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                recent_5m = [p[1] for p in list(self.prices_1m)[-5:]]
                avg_5m = statistics.mean(recent_5m)
                self.prices_5m.append((timestamp, avg_5m))
                self.last_5m_update = timestamp

        # 15-–º–∏–Ω—É—Ç–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        if timestamp - self.last_15m_update >= 900:  # 15 –º–∏–Ω—É—Ç
            if len(self.prices_1m) >= 15:
                recent_15m = [p[1] for p in list(self.prices_1m)[-15:]]
                avg_15m = statistics.mean(recent_15m)
                self.prices_15m.append((timestamp, avg_15m))
                self.last_15m_update = timestamp

        # –ß–∞—Å–æ–≤–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        if timestamp - self.last_1h_update >= 3600:  # 1 —á–∞—Å
            if len(self.prices_1m) >= 60:
                recent_1h = [p[1] for p in list(self.prices_1m)[-60:]]
                avg_1h = statistics.mean(recent_1h)
                self.prices_1h.append((timestamp, avg_1h))
                self.last_1h_update = timestamp

    def analyze_trend(self, current_price: float) -> TrendAnalysis:
        """üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞"""

        try:
            self.update_price(current_price)

            # –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ç—Ä–µ–Ω–¥–æ–≤
            trend_4h = self._calculate_trend(self.prices_15m, 4*4)  # 4 —á–∞—Å–∞
            trend_1h = self._calculate_trend(self.prices_5m, 12)    # 1 —á–∞—Å
            trend_15m = self._calculate_trend(self.prices_1m, 15)   # 15 –º–∏–Ω—É—Ç

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = self._calculate_volatility(self.prices_1m, 60)  # 1 —á–∞—Å

            # –ú–æ–º–µ–Ω—Ç—É–º
            momentum = self._calculate_momentum(self.prices_1m)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            direction = self._determine_trend_direction(trend_4h, trend_1h, volatility)

            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            strength = self._calculate_trend_strength(trend_4h, trend_1h, momentum)

            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ
            confidence = self._calculate_confidence()

            # –†–µ—à–µ–Ω–∏—è –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ
            should_allow_dca, should_allow_buy, reason = self._make_trading_decisions(
                direction, trend_4h, trend_1h, volatility, strength
            )

            analysis = TrendAnalysis(
                direction=direction,
                strength=strength,
                trend_4h=trend_4h,
                trend_1h=trend_1h,
                trend_15m=trend_15m,
                volatility=volatility,
                momentum=momentum,
                confidence=confidence,
                should_allow_dca=should_allow_dca,
                should_allow_buy=should_allow_buy,
                reason=reason
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            self._log_analysis(analysis, current_price)

            return analysis

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return self._create_default_analysis("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

    def _calculate_trend(self, price_data: deque, periods: int) -> float:
        """üìà –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if len(price_data) < periods:
            return 0.0

        prices = list(price_data)
        if len(prices) < 2:
            return 0.0

        start_price = prices[-periods][1] if len(prices) >= periods else prices[0][1]
        end_price = prices[-1][1]

        return (end_price - start_price) / start_price if start_price > 0 else 0.0

    def _calculate_volatility(self, price_data: deque, periods: int) -> float:
        """üåä –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(price_data) < periods:
            periods = len(price_data)

        if periods < 2:
            return 0.0

        prices = [p[1] for p in list(price_data)[-periods:]]
        returns = []

        for i in range(1, len(prices)):
            if prices[i-1] > 0:
                returns.append((prices[i] - prices[i-1]) / prices[i-1])

        return statistics.stdev(returns) if len(returns) > 1 else 0.0

    def _calculate_momentum(self, price_data: deque) -> float:
        """‚ö° –†–∞—Å—á–µ—Ç –º–æ–º–µ–Ω—Ç—É–º–∞"""
        if len(price_data) < max(self.momentum_periods):
            return 0.0

        prices = list(price_data)
        momentum_scores = []

        for period in self.momentum_periods:
            if len(prices) >= period:
                start_price = prices[-period][1]
                end_price = prices[-1][1]
                momentum = (end_price - start_price) / start_price if start_price > 0 else 0
                momentum_scores.append(momentum)

        return statistics.mean(momentum_scores) if momentum_scores else 0.0

    def _determine_trend_direction(self, trend_4h: float, trend_1h: float,
                                 volatility: float) -> TrendDirection:
        """üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"""

        # –°–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É)
        if trend_4h >= self.bullish_threshold_4h:
            return TrendDirection.STRONG_BULLISH
        elif trend_4h <= self.bearish_threshold_4h:
            return TrendDirection.STRONG_BEARISH

        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã —Å —É—á–µ—Ç–æ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ
        elif trend_4h >= self.bullish_threshold_4h * 0.5:  # +3% –∑–∞ 4—á
            if trend_1h >= self.bullish_threshold_1h * 0.5:  # +1.5% –∑–∞ 1—á
                return TrendDirection.BULLISH

        elif trend_4h <= self.bearish_threshold_4h * 0.5:  # -4% –∑–∞ 4—á
            if trend_1h <= self.bearish_threshold_1h * 0.5:  # -2% –∑–∞ 1—á
                return TrendDirection.BEARISH

        # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        if volatility > self.high_volatility_threshold:
            # –°–º–æ—Ç—Ä–∏–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if trend_1h > 0.02:  # +2% –∑–∞ —á–∞—Å
                return TrendDirection.BULLISH
            elif trend_1h < -0.02:  # -2% –∑–∞ —á–∞—Å
                return TrendDirection.BEARISH

        return TrendDirection.SIDEWAYS

    def _calculate_trend_strength(self, trend_4h: float, trend_1h: float,
                                momentum: float) -> float:
        """üí™ –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""

        # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –æ—Ç 4-—á–∞—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        base_strength = min(1.0, abs(trend_4h) / 0.1)  # –ù–æ—Ä–º–∏—Ä—É–µ–º –∫ 10%

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–º—É —Ç—Ä–µ–Ω–¥—É
        if (trend_4h > 0 and trend_1h > 0) or (trend_4h < 0 and trend_1h < 0):
            # –¢—Ä–µ–Ω–¥—ã –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ - —É—Å–∏–ª–∏–≤–∞–µ–º
            trend_alignment = 0.2
        else:
            # –¢—Ä–µ–Ω–¥—ã –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö - –æ—Å–ª–∞–±–ª—è–µ–º
            trend_alignment = -0.1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–æ–º–µ–Ω—Ç—É–º—É
        momentum_factor = min(0.2, abs(momentum) * 10)  # –ú–∞–∫—Å–∏–º—É–º +20%

        strength = base_strength + trend_alignment + momentum_factor
        return max(0.0, min(1.0, strength))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-1

    def _calculate_confidence(self) -> float:
        """üéØ –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""

        # –ë–∞–∑–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        data_confidence = min(1.0, len(self.prices_1m) / 120)  # 2 —á–∞—Å–∞ –¥–ª—è 100%

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframe_bonus = 0.0
        if len(self.prices_5m) >= 12:   # 1 —á–∞—Å 5-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            timeframe_bonus += 0.1
        if len(self.prices_15m) >= 8:   # 2 —á–∞—Å–∞ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            timeframe_bonus += 0.1
        if len(self.prices_1h) >= 4:    # 4 —á–∞—Å–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            timeframe_bonus += 0.2

        confidence = data_confidence + timeframe_bonus
        return min(1.0, confidence)

    def _make_trading_decisions(self, direction: TrendDirection, trend_4h: float,
                              trend_1h: float, volatility: float,
                              strength: float) -> Tuple[bool, bool, str]:
        """ü§ñ –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""

        should_allow_dca = True
        should_allow_buy = True
        reasons = []

        # üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ DCA –≤ —Å–∏–ª—å–Ω–æ–º –º–µ–¥–≤–µ–∂—å–µ–º —Ç—Ä–µ–Ω–¥–µ
        if trend_4h <= self.dca_disable_threshold:
            should_allow_dca = False
            reasons.append(f"DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: –ø–∞–¥–µ–Ω–∏–µ {trend_4h*100:.1f}% –∑–∞ 4—á")

        # üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –ø–∞–¥–µ–Ω–∏–∏
        if trend_4h <= self.buy_disable_threshold:
            should_allow_buy = False
            reasons.append(f"–ü–æ–∫—É–ø–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ {trend_4h*100:.1f}%")

        # üåä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if volatility > self.high_volatility_threshold:
            if direction in [TrendDirection.BEARISH, TrendDirection.STRONG_BEARISH]:
                should_allow_dca = False
                reasons.append(f"DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility*100:.1f}% + –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")

        # ‚ö° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        if trend_1h <= -0.06:  # -6% –∑–∞ —á–∞—Å = –∫—Ä–∏—Ç–∏—á–Ω–æ
            should_allow_buy = False
            should_allow_dca = False
            reasons.append("–í—Å–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —á–∞—Å–æ–≤–æ–µ –ø–∞–¥–µ–Ω–∏–µ")

        # üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        if direction in [TrendDirection.BULLISH, TrendDirection.STRONG_BULLISH]:
            should_allow_dca = True
            should_allow_buy = True
            if not reasons:
                reasons.append(f"–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥: –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")

        if direction == TrendDirection.SIDEWAYS and volatility < 0.02:
            # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å + –±–æ–∫–æ–≤–∏–∫ = –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            should_allow_dca = True
            should_allow_buy = True
            if not reasons:
                reasons.append("–ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥ —Å –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é: —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")

        reason = "; ".join(reasons) if reasons else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
        return should_allow_dca, should_allow_buy, reason

    def _log_analysis(self, analysis: TrendAnalysis, current_price: float):
        """üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""

        self.logger.info(f"üß† –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–ê:")
        self.logger.info(f"   üí∞ –¶–µ–Ω–∞: {current_price:.8f}")
        self.logger.info(f"   üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {analysis.direction.value}")
        self.logger.info(f"   üí™ –°–∏–ª–∞: {analysis.strength:.2f}")
        self.logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")

        self.logger.info(f"   üìà –¢—Ä–µ–Ω–¥—ã:")
        self.logger.info(f"      4—á: {analysis.trend_4h*100:+.2f}%")
        self.logger.info(f"      1—á: {analysis.trend_1h*100:+.2f}%")
        self.logger.info(f"      15–º: {analysis.trend_15m*100:+.2f}%")

        self.logger.info(f"   üìä –ú–µ—Ç–∫–∏:")
        self.logger.info(f"      –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.volatility*100:.2f}%")
        self.logger.info(f"      –ú–æ–º–µ–Ω—Ç—É–º: {analysis.momentum*100:+.2f}%")

        # –¶–≤–µ—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
        dca_status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê" if analysis.should_allow_dca else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê"
        buy_status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–´" if analysis.should_allow_buy else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´"

        self.logger.info(f"   üéØ –†–µ—à–µ–Ω–∏—è:")
        self.logger.info(f"      DCA: {dca_status}")
        self.logger.info(f"      –ü–æ–∫—É–ø–∫–∏: {buy_status}")
        self.logger.info(f"      –ü—Ä–∏—á–∏–Ω–∞: {analysis.reason}")

    def _create_default_analysis(self, reason: str) -> TrendAnalysis:
        """üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return TrendAnalysis(
            direction=TrendDirection.SIDEWAYS,
            strength=0.0,
            trend_4h=0.0,
            trend_1h=0.0,
            trend_15m=0.0,
            volatility=0.0,
            momentum=0.0,
            confidence=0.0,
            should_allow_dca=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–ª–æ–∫–∏—Ä—É–µ–º
            should_allow_buy=False,
            reason=reason
        )

    def get_trend_summary(self) -> Dict:
        """üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–µ–Ω–¥—É"""
        if len(self.prices_1m) == 0:
            return {"status": "no_data"}

        current_price = self.prices_1m[-1][1]
        analysis = self.analyze_trend(current_price)

        return {
            "direction": analysis.direction.value,
            "strength": analysis.strength,
            "confidence": analysis.confidence,
            "trend_4h_percent": analysis.trend_4h * 100,
            "trend_1h_percent": analysis.trend_1h * 100,
            "volatility_percent": analysis.volatility * 100,
            "dca_allowed": analysis.should_allow_dca,
            "buy_allowed": analysis.should_allow_buy,
            "reason": analysis.reason,
            "data_points": {
                "1m": len(self.prices_1m),
                "5m": len(self.prices_5m),
                "15m": len(self.prices_15m),
                "1h": len(self.prices_1h)
            }
        }

    def should_disable_dca(self, current_price: float) -> Tuple[bool, str]:
        """üö´ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å DCA"""
        analysis = self.analyze_trend(current_price)
        return not analysis.should_allow_dca, analysis.reason

    def should_disable_buying(self, current_price: float) -> Tuple[bool, str]:
        """üö´ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏"""
        analysis = self.analyze_trend(current_price)
        return not analysis.should_allow_buy, analysis.reason


# üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
class TrendAwareBot:
    """ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π trend filter"""

    def __init__(self, config):
        self.config = config
        self.trend_filter = AdvancedTrendFilter(config)
        self.logger = logging.getLogger(__name__)
        # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

    def should_execute_dca(self, current_price: float, drop_percent: float) -> Tuple[bool, str]:
        """üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ DCA —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞"""

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ DCA
        if drop_percent < 0.025:  # 2.5%
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {drop_percent*100:.1f}%"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
        should_disable, reason = self.trend_filter.should_disable_dca(current_price)
        if should_disable:
            self.logger.warning(f"üö´ DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–¥–æ–º: {reason}")
            return False, f"Trend filter: {reason}"

        return True, "DCA —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"

    def should_execute_buy(self, current_price: float) -> Tuple[bool, str]:
        """üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
        should_disable, reason = self.trend_filter.should_disable_buying(current_price)
        if should_disable:
            self.logger.warning(f"üö´ –ü–æ–∫—É–ø–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ç—Ä–µ–Ω–¥–æ–º: {reason}")
            return False, f"Trend filter: {reason}"

        return True, "–ü–æ–∫—É–ø–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã"


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    from config import TradingConfig

    config = TradingConfig()
    trend_filter = AdvancedTrendFilter(config)

    # –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    import random
    base_price = 0.19

    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TREND FILTER")
    print("=" * 50)

    # –°–∏–º—É–ª—è—Ü–∏—è –ø–∞–¥–∞—é—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    for i in range(100):
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞–¥–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
        price_change = -0.001 + random.uniform(-0.002, 0.001)
        base_price *= (1 + price_change)

        if i % 20 == 0:  # –ö–∞–∂–¥—ã–µ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π
            analysis = trend_filter.analyze_trend(base_price)
            print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {i}: –¶–µ–Ω–∞ {base_price:.6f}")
            print(f"–¢—Ä–µ–Ω–¥ 4—á: {analysis.trend_4h*100:+.2f}%")
            print(f"DCA —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: {'–î–ê' if analysis.should_allow_dca else '–ù–ï–¢'}")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {analysis.reason}")

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    summary = trend_filter.get_trend_summary()
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê:")
    print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {summary['direction']}")
    print(f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {summary['strength']:.2f}")
    print(f"–¢—Ä–µ–Ω–¥ 4—á: {summary['trend_4h_percent']:+.2f}%")
    print(f"DCA —Ä–∞–∑—Ä–µ—à–µ–Ω–∞: {'–î–ê' if summary['dca_allowed'] else '–ù–ï–¢'}")
