from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, Tuple, List
import logging
import time
from config import TradingConfig
from technical_indicators import TechnicalIndicators


class TradingStrategy(ABC):
    def __init__(self, config: TradingConfig, api_client, risk_manager):
        self.config = config
        self.api = api_client
        self.risk_manager = risk_manager
        self.logger = logging.getLogger(__name__)

    @abstractmethod
    def should_buy(self, market_data: Dict[str, Any]) -> Tuple[bool, float, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (should_buy, quantity, price)"""
        pass

    @abstractmethod
    def should_sell(self, market_data: Dict[str, Any], position: Dict[str, Any]) -> Tuple[bool, float, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (should_sell, quantity, price)"""
        pass


class MeanReversionStrategy(TradingStrategy):
    def __init__(self, config: TradingConfig, api_client, risk_manager, position_manager):
        super().__init__(config, api_client, risk_manager)
        self.recent_prices = []
        self.position_manager = position_manager
        self.indicators = TechnicalIndicators()

        # üõ°Ô∏è –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_data_points = self.config.MIN_DATA_POINTS
        self.last_trade_time = 0
        self.min_time_between_trades = self.config.MIN_TIME_BETWEEN_TRADES

        # üìä –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.trade_count_today = 0
        self.last_trade_reset = time.time()

        # üö´ –û–¢–ö–õ–Æ–ß–ê–ï–ú –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
        if self.config.FORCE_TRADE_DISABLED:
            self.logger.info("üõ°Ô∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–ê")

    def _update_prices(self, current_price: float):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω"""
        self.recent_prices.append(current_price)
        if len(self.recent_prices) > self.config.VOLATILITY_PERIOD:
            self.recent_prices.pop(0)

    def get_average_price(self) -> float:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã"""
        if not self.recent_prices:
            return 0.0
        return sum(self.recent_prices) / len(self.recent_prices)

    def _check_trade_limits(self) -> Tuple[bool, str]:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é"""
        current_time = time.time()

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –≤ –Ω–æ–≤–æ–º –¥–Ω–µ
        if current_time - self.last_trade_reset > 86400:  # 24 —á–∞—Å–∞
            self.trade_count_today = 0
            self.last_trade_reset = current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
        if hasattr(self.config, 'MAX_TRADES_PER_HOUR'):
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –±–æ–ª–µ–µ 2 —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
            if current_time - self.last_trade_time < 1800:  # 30 –º–∏–Ω—É—Ç
                remaining = 1800 - (current_time - self.last_trade_time)
                return False, f"–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏: {remaining / 60:.0f} –º–∏–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        if current_time - self.last_trade_time < self.min_time_between_trades:
            remaining = self.min_time_between_trades - (current_time - self.last_trade_time)
            return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {remaining / 60:.0f} –º–∏–Ω"

        return True, "OK"

    def _validate_trade_profitability(self, order_type: str, price: float, quantity: float,
                                      position_price: float = None) -> Tuple[bool, str]:
        """üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ –¥–æ –µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è"""

        commission_cost = 0.006  # 0.6% —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ

        if order_type == 'buy':
            # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å —Å –ø—Ä–∏–±—ã–ª—å—é
            min_sell_price = price * (1 + self.config.MIN_PROFIT_TO_SELL + commission_cost)

            self.logger.info(f"üí° –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∫–∏:")
            self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {price:.8f}")
            self.logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {min_sell_price:.8f}")
            self.logger.info(f"   –¢—Ä–µ–±—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")

            return True, "–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"

        elif order_type == 'sell' and position_price:
            # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª–∏
            profit_percent = (price - position_price) / position_price
            profit_after_commission = profit_percent - commission_cost

            self.logger.info(f"üí° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏:")
            self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {position_price:.8f}")
            self.logger.info(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {price:.8f}")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å –¥–æ –∫–æ–º–∏—Å—Å–∏–π: {profit_percent * 100:.2f}%")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: {profit_after_commission * 100:.2f}%")
            self.logger.info(f"   –¢—Ä–µ–±—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")

            if profit_percent < self.config.MIN_PROFIT_TO_SELL:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent * 100:.2f}% < {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%"

            if profit_after_commission < 0:
                return False, f"–£–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: {profit_after_commission * 100:.2f}%"

            return True, f"–ü—Ä–∏–±—ã–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {profit_after_commission * 100:.2f}%"

        return True, "OK"

    def _analyze_market_conditions(self, current_price: float) -> Dict[str, Any]:
        """üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        if len(self.recent_prices) < self.min_data_points:
            return {
                'ready': False,
                'reason': f'–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {len(self.recent_prices)}/{self.min_data_points}',
                'data_points': len(self.recent_prices)
            }

        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        sma_short = self.indicators.sma(self.recent_prices, 10)
        sma_long = self.indicators.sma(self.recent_prices, 20) if len(self.recent_prices) >= 20 else sma_short
        ema = self.indicators.ema(self.recent_prices, 12)
        rsi = self.indicators.rsi(self.recent_prices)

        # –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        bb_upper, bb_middle, bb_lower = self.indicators.bollinger_bands(self.recent_prices)

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = self.risk_manager.calculate_volatility(self.recent_prices)

        # üö´ –°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if volatility < self.config.MIN_VOLATILITY_THRESHOLD:
            return {
                'ready': False,
                'reason': f'–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f} < {self.config.MIN_VOLATILITY_THRESHOLD:.4f}',
                'volatility': volatility
            }

        # –¢—Ä–µ–Ω–¥
        trend_strength = (sma_short - sma_long) / sma_long if sma_long > 0 else 0

        # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
        bb_position = (current_price - bb_lower) / (bb_upper - bb_lower) if bb_upper != bb_lower else 0.5

        return {
            'ready': True,
            'current_price': current_price,
            'sma_short': sma_short,
            'sma_long': sma_long,
            'ema': ema,
            'rsi': rsi,
            'bb_upper': bb_upper,
            'bb_middle': bb_middle,
            'bb_lower': bb_lower,
            'bb_position': bb_position,
            'volatility': volatility,
            'trend_strength': trend_strength,
            'data_points': len(self.recent_prices)
        }

    def _calculate_conservative_buy_price(self, current_price: float, analysis: Dict, signal_strength: int) -> float:
        """üí∞ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""

        volatility = analysis.get('volatility', 0.002)

        # –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–µ–¥ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        base_spread = self.config.BASE_PROFIT_MARKUP

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è)
        volatility_multiplier = min(1.5, max(0.8, volatility * 50))
        adaptive_spread = base_spread * volatility_multiplier

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è)
        if signal_strength >= 4:
            # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –Ω–µ–±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
            price_adjustment = -adaptive_spread * 0.3
            signal_desc = "–û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ô"
        elif signal_strength >= 3:
            # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - —Å—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞
            price_adjustment = -adaptive_spread * 0.5
            signal_desc = "–°–ò–õ–¨–ù–´–ô"
        elif signal_strength >= 2:
            # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª - –æ–±—ã—á–Ω–∞—è —Å–∫–∏–¥–∫–∞
            price_adjustment = -adaptive_spread * 0.7
            signal_desc = "–°–†–ï–î–ù–ò–ô"
        else:
            # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª - –±–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞
            price_adjustment = -adaptive_spread * 1.0
            signal_desc = "–°–õ–ê–ë–´–ô"

        buy_price = current_price * (1 + price_adjustment)

        # –ü–µ—Ä–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: MAX_PRICE_DEVIATION –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        max_discount_config = self.config.MAX_PRICE_DEVIATION
        min_buy_price_config = current_price * (1 - max_discount_config)
        buy_price = max(buy_price, min_buy_price_config)

        # üéØ –í–¢–û–†–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è DOGE (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ)
        max_allowed_discount_percent = 0.0015  # 0.15% –º–∞–∫—Å–∏–º—É–º –¥–ª—è DOGE
        min_allowed_price = current_price * (1 - max_allowed_discount_percent)

        if buy_price < min_allowed_price:
            old_discount_percent = (current_price - buy_price) / current_price * 100
            buy_price = min_allowed_price
            new_discount_percent = (current_price - buy_price) / current_price * 100

            self.logger.info(f"üîß –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –°–ö–ò–î–ö–ò –î–õ–Ø DOGE:")
            self.logger.info(f"   –†–∞—Å—á–µ—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞: {old_discount_percent:.2f}%")
            self.logger.info(f"   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –¥–æ: {new_discount_percent:.2f}%")
            self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: DOGE —Ç—Ä–µ–±—É–µ—Ç –º–∞–ª—ã—Ö —Å–∫–∏–¥–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger.info(f"üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:")
        self.logger.info(f"   –°–∏–≥–Ω–∞–ª: {signal_desc} ({signal_strength} –±–∞–ª–ª–æ–≤)")
        self.logger.info(f"   –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: {volatility_multiplier:.2f}")
        self.logger.info(f"   –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–µ–¥: {base_spread:.4f}, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π: {adaptive_spread:.4f}")
        self.logger.info(f"   –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: {price_adjustment:+.4f} ({price_adjustment * 100:+.2f}%)")
        self.logger.info(
            f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {buy_price:.8f} (—Å–∫–∏–¥–∫–∞ {((current_price - buy_price) / current_price * 100):.2f}%)")

        return buy_price

    def should_buy(self, market_data: Dict[str, Any]) -> Tuple[bool, float, float]:
        """üõí –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏"""
        current_price = market_data.get('current_price', 0.0)
        balance = market_data.get('balance', 0.0)

        self._update_prices(current_price)

        if len(self.recent_prices) >= 10:
            self._debug_rsi_issues(self.recent_prices)

        # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        can_trade, limit_reason = self._check_trade_limits()
        if not can_trade:
            self.logger.info(f"‚è∏Ô∏è  {limit_reason}")
            return False, 0.0, 0.0

        # üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        analysis = self._analyze_market_conditions(current_price)

        if not analysis['ready']:
            self.logger.info(f"‚è∏Ô∏è  {analysis['reason']}")
            return False, 0.0, 0.0

        self.logger.info(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:")
        self.logger.info(f"   üíπ RSI: {analysis['rsi']:.1f}")
        self.logger.info(f"   üìè Bollinger –ø–æ–∑–∏—Ü–∏—è: {analysis['bb_position']:.2f}")
        self.logger.info(f"   üìà –¢—Ä–µ–Ω–¥: {analysis['trend_strength']:+.3f}")
        self.logger.info(f"   üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis['volatility']:.4f}")

        # üéØ –°–¢–†–û–ì–ò–ï —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        conditions = {
            'deeply_oversold': analysis['rsi'] < 30,  # –ì–ª—É–±–æ–∫–æ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
            'very_low_bb': analysis['bb_position'] < 0.2,  # –í –Ω–∏–∂–Ω–∏—Ö 20% Bollinger
            'below_ema': current_price < analysis['ema'] * 0.995,  # –ù–∏–∂–µ EMA –Ω–∞ 0.5%+
            'downtrend': analysis['trend_strength'] < -0.005,  # –ß–µ—Ç–∫–∏–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            'sufficient_volatility': analysis['volatility'] > self.config.MIN_VOLATILITY_THRESHOLD,
            'strong_dip': current_price < analysis['sma_short'] * 0.99  # –ù–∏–∂–µ –∫–æ—Ä–æ—Ç–∫–æ–π MA –Ω–∞ 1%+
        }

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ
        met_conditions = []
        for condition_name, is_met in conditions.items():
            status = "‚úÖ" if is_met else "‚ùå"
            self.logger.info(f"   {status} {condition_name}")
            if is_met:
                met_conditions.append(condition_name)

        conditions_met = len(met_conditions)

        # üö´ –¢–†–ï–ë–£–ï–ú –ú–ò–ù–ò–ú–£–ú 3 –£–°–õ–û–í–ò–Ø –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if conditions_met < 2: # 3:
            self.logger.info(f"‚è∏Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {conditions_met}/6")
            self.logger.info(f"üí° –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—Å–ª–æ–≤–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏")
            return False, 0.0, 0.0

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        buy_price = self._calculate_conservative_buy_price(current_price, analysis, conditions_met)
        max_spend = balance * self.config.MAX_POSITION_SIZE
        quantity = max_spend / buy_price

        # üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        is_profitable, profit_reason = self._validate_trade_profitability('buy', buy_price, quantity)
        if not is_profitable:
            self.logger.warning(f"üö´ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {profit_reason}")
            return False, 0.0, 0.0

        self.logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò!")
        self.logger.info(f"   –£—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {conditions_met}/6: {', '.join(met_conditions)}")
        self.logger.info(f"   –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫—É–ø–∏—Ç—å: {quantity:.4f} –ø–æ {buy_price:.8f}")
        self.logger.info(f"   –°—É–º–º–∞: {max_spend:.2f} EUR ({self.config.MAX_POSITION_SIZE * 100:.0f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)")
        self.logger.info(f"   –°–∫–∏–¥–∫–∞ –æ—Ç —Ä—ã–Ω–∫–∞: {((current_price - buy_price) / current_price * 100):.2f}%")

        if self.risk_manager.can_open_position(max_spend, balance):
            self.last_trade_time = time.time()
            self.trade_count_today += 1
            return True, quantity, buy_price
        else:
            self.logger.warning("üö´ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")

        return False, 0.0, 0.0

    def should_sell(self, market_data: Dict[str, Any], position: Dict[str, Any]) -> Tuple[bool, float, float]:
        """üíé –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É–±—ã—Ç–∫–æ–≤"""
        current_price = market_data.get('current_price', 0.0)
        quantity = position.get('quantity', 0.0)

        if not quantity:
            return False, 0.0, 0.0

        # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        can_trade, limit_reason = self._check_trade_limits()
        if not can_trade:
            self.logger.info(f"‚è∏Ô∏è  {limit_reason}")
            return False, 0.0, 0.0

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤
        real_position = self.position_manager.get_position(self.config.CURRENCY_1)
        if not real_position:
            self.logger.warning("‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤")
            return False, 0.0, 0.0

        position_price = real_position.avg_price
        quantity = min(quantity, real_position.quantity)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å
        potential_profit = (current_price - position_price) / position_price

        self.logger.info(f"üíé –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏:")
        self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {position_price:.8f}")
        self.logger.info(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")
        self.logger.info(f"   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit * 100:+.2f}%")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")

        # üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–¢–û–ü-–õ–û–°–°
        stop_loss_threshold = -self.config.STOP_LOSS_PERCENT
        if potential_profit <= stop_loss_threshold:
            loss_percent = potential_profit * 100
            self.logger.error(f"üö® –°–¢–û–ü-–õ–û–°–°! –£–±—ã—Ç–æ–∫: {loss_percent:.2f}%")
            sell_price = current_price * 0.999  # –ü—Ä–æ–¥–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            self.last_trade_time = time.time()
            return True, quantity, sell_price

        # üö´ –ù–ï –ü–†–û–î–ê–ï–ú –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if potential_profit < self.config.MIN_PROFIT_TO_SELL:
            self.logger.info(
                f"‚è∏Ô∏è  –î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é: –ø—Ä–∏–±—ã–ª—å {potential_profit * 100:.2f}% < –ø–æ—Ä–æ–≥–∞ {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")
            return False, 0.0, 0.0

        # üìä –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        analysis = self._analyze_market_conditions(current_price)

        if not analysis['ready']:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ –ø—Ä–∏–±—ã–ª—å –±–æ–ª—å—à–∞—è - –ø—Ä–æ–¥–∞–µ–º
            if potential_profit >= self.config.FAST_PROFIT_THRESHOLD / 100:
                self.logger.info(f"üíé –ë–´–°–¢–†–ê–Ø –ü–†–û–î–ê–ñ–ê! –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit * 100:.2f}%")
                sell_price = current_price * 0.9998
                self.last_trade_time = time.time()
                return True, quantity, sell_price
            return False, 0.0, 0.0

        # üéØ –ë–´–°–¢–†–ê–Ø –ü–†–û–î–ê–ñ–ê –ø—Ä–∏ –æ—Ç–ª–∏—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if potential_profit >= self.config.FAST_PROFIT_THRESHOLD / 100:
            self.logger.info(f"üíé –ë–´–°–¢–†–ê–Ø –ü–†–û–î–ê–ñ–ê! –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit * 100:.2f}%")
            sell_price = current_price * 0.9998  # –ü—Ä–æ–¥–∞–µ–º –±–ª–∏–∑–∫–æ –∫ —Ä—ã–Ω–∫—É

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            is_profitable, profit_reason = self._validate_trade_profitability('sell', sell_price, quantity,
                                                                              position_price)
            if is_profitable:
                self.last_trade_time = time.time()
                return True, quantity, sell_price
            else:
                self.logger.warning(f"üö´ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {profit_reason}")

        # üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
        self.logger.info(f"üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
        self.logger.info(f"   üíπ RSI: {analysis['rsi']:.1f}")
        self.logger.info(f"   üìè Bollinger –ø–æ–∑–∏—Ü–∏—è: {analysis['bb_position']:.2f}")
        self.logger.info(f"   üìà vs EMA: {(current_price / analysis['ema'] - 1) * 100:+.2f}%")
        self.logger.info(f"   üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis['volatility']:.4f}")

        # üéØ –°–¢–†–û–ì–ò–ï —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏
        sell_conditions = {
            'good_profit': potential_profit >= self.config.MIN_PROFIT_TO_SELL,
            'overbought_rsi': analysis['rsi'] > 70,  # –°—Ç—Ä–æ–∂–µ: 70 –≤–º–µ—Å—Ç–æ 55
            'high_bb_position': analysis['bb_position'] > 0.8,  # –°—Ç—Ä–æ–∂–µ: 80% –≤–º–µ—Å—Ç–æ 65%
            'above_ema': current_price > analysis['ema'] * 1.01,  # –°—Ç—Ä–æ–∂–µ: +1% –≤–º–µ—Å—Ç–æ +0.03%
            'uptrend': analysis['trend_strength'] > 0.005,  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        }

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏
        met_sell_conditions = []
        for condition_name, is_met in sell_conditions.items():
            status = "‚úÖ" if is_met else "‚ùå"
            self.logger.info(f"   {status} {condition_name}")
            if is_met:
                met_sell_conditions.append(condition_name)

        sell_conditions_met = len(met_sell_conditions)

        # üö´ –¢–†–ï–ë–£–ï–ú –ú–ò–ù–ò–ú–£–ú 3 –£–°–õ–û–í–ò–Ø –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–∫—Ä–æ–º–µ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–∏–±—ã–ª–∏)
        if sell_conditions_met < 3:
            self.logger.info(f"‚è∏Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {sell_conditions_met}/5")
            self.logger.info(f"üíé –î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é, –∂–¥–µ–º –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π")
            return False, 0.0, 0.0

        # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –Ω–∞–¥–±–∞–≤–∫–æ–π
        volatility = analysis['volatility']
        spread_multiplier = max(1.0, min(2.0, volatility * 100))  # –û—Ç 1x –¥–æ 2x –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        spread = self.config.MIN_SPREAD * spread_multiplier

        sell_price = current_price * (1 + spread)

        # üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        is_profitable, profit_reason = self._validate_trade_profitability('sell', sell_price, quantity, position_price)
        if not is_profitable:
            self.logger.warning(f"üö´ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {profit_reason}")
            return False, 0.0, 0.0

        final_profit = (sell_price - position_price) / position_price

        self.logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–ò!")
        self.logger.info(f"   –£—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {sell_conditions_met}/5: {', '.join(met_sell_conditions)}")
        self.logger.info(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_price:.8f} (+{spread * 100:.2f}% –∫ —Ä—ã–Ω–∫—É)")
        self.logger.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {final_profit * 100:+.2f}%")

        self.last_trade_time = time.time()
        self.trade_count_today += 1
        return True, quantity, sell_price

    # üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
    def _debug_rsi_issues(self, prices: List[float]):
        """üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å RSI"""

        if len(prices) >= 10:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º debug_rsi –∏–∑ indicators
            debug_info = self.indicators.debug_rsi(prices)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞
            if 'error' in debug_info:
                self.logger.info(f"üîç RSI –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: {debug_info['error']}")
                return

            self.logger.info(f"üîç RSI –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            self.logger.info(f"   üìä –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {debug_info.get('prices_count', 0)}")
            self.logger.info(f"   üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã: {debug_info.get('recent_prices', [])}")
            self.logger.info(f"   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è: {debug_info.get('recent_changes', [])}")
            self.logger.info(f"   ‚¨ÜÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç: {debug_info.get('avg_gain', 0):.6f}")
            self.logger.info(f"   ‚¨áÔ∏è –°—Ä–µ–¥–Ω–∏–π —Å–ø–∞–¥: {debug_info.get('avg_loss', 0):.6f}")
            self.logger.info(f"   üåä –ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {debug_info.get('max_change', 0):.6f}")

            # –í—ã—á–∏—Å–ª—è–µ–º RSI –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            avg_gain = debug_info.get('avg_gain', 0)
            avg_loss = debug_info.get('avg_loss', 0)

            if avg_loss > 0:
                rs = avg_gain / avg_loss
                calculated_rsi = 100 - (100 / (1 + rs))
                self.logger.info(f"   üíπ –†–∞—Å—á–µ—Ç–Ω—ã–π RSI: {calculated_rsi:.1f}")
            else:
                self.logger.info(f"   üíπ RSI: {100 if avg_gain > 0 else 50}")