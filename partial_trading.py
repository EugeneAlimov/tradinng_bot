"""
üéØ –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–ª–æ—è–º
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤—ã—Å–æ–∫–æ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø—Ä–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–∏
"""

import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
from dataclasses import dataclass

@dataclass
class TradingLayer:
    """üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–ª–æ–π"""
    trades: List[Dict]
    avg_price: float
    total_quantity: float
    age_hours: float
    can_sell: bool
    profit_percent: float
    layer_id: int

class PartialTradingStrategy:
    """üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è —á–∞—Å—Ç–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.min_layer_profit = getattr(config, 'PARTIAL_MIN_LAYER_PROFIT', 0.012)
        self.max_hold_days = getattr(config, 'PARTIAL_MAX_HOLD_DAYS', 7) 
        self.layer_tolerance = getattr(config, 'PARTIAL_LAYER_TOLERANCE', 0.02)
        self.min_sell_quantity = 5.0  # –ú–∏–Ω–∏–º—É–º –¥–ª—è EXMO

    def analyze_trading_layers(self, trades: List[Dict], current_price: float) -> List[TradingLayer]:
        """üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–ª–æ–∏"""
        if not trades:
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        buy_trades = [t for t in trades if t.get('side') == 'buy' or t.get('type') == 'buy']
        if not buy_trades:
            return []

        buy_trades.sort(key=lambda x: x['date'], reverse=True)

        layers = []
        current_layer = []
        layer_id = 1

        for trade in buy_trades:
            if not current_layer:
                current_layer = [trade]
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º —Å–ª–æ–µ–º
            layer_avg = sum(float(t['price']) for t in current_layer) / len(current_layer)
            trade_price = float(trade['price'])
            price_diff = abs(trade_price - layer_avg) / layer_avg

            # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_diff = abs((current_layer[0]['date'] - trade['date']).days)

            # –ï—Å–ª–∏ —Ü–µ–Ω—ã –∏ –≤—Ä–µ–º—è –±–ª–∏–∑–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–π
            if price_diff <= self.layer_tolerance and time_diff <= 2:
                current_layer.append(trade)
            else:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                if current_layer:
                    layer = self._create_layer(current_layer, current_price, layer_id)
                    layers.append(layer)
                    layer_id += 1
                current_layer = [trade]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
        if current_layer:
            layer = self._create_layer(current_layer, current_price, layer_id)
            layers.append(layer)

        return layers

    def _create_layer(self, trades: List[Dict], current_price: float, layer_id: int) -> TradingLayer:
        """üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–ª–æ—è"""

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—è
        total_quantity = sum(float(t['quantity']) for t in trades)
        total_cost = sum(float(t['quantity']) * float(t['price']) for t in trades)
        avg_price = total_cost / total_quantity if total_quantity > 0 else 0

        # –í–æ–∑—Ä–∞—Å—Ç —Å–ª–æ—è (–ø–æ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Å–¥–µ–ª–∫–µ)
        oldest_trade = min(trades, key=lambda x: x['date'])
        age_hours = (datetime.now() - oldest_trade['date']).total_seconds() / 3600

        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—è
        profit_percent = ((current_price - avg_price) / avg_price * 100) if avg_price > 0 else -100

        # –†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
        can_sell = self._should_sell_layer(profit_percent, age_hours, total_quantity)

        return TradingLayer(
            trades=trades,
            avg_price=avg_price,
            total_quantity=total_quantity,
            age_hours=age_hours,
            can_sell=can_sell,
            profit_percent=profit_percent,
            layer_id=layer_id
        )

    def _should_sell_layer(self, profit_percent: float, age_hours: float, quantity: float) -> bool:
        """üéØ –†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ —Å–ª–æ—è"""

        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if quantity < self.min_sell_quantity:
            return False

        # –ï—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        if profit_percent >= (self.min_layer_profit * 100):
            return True

        # –°–ª–æ–π —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞)
        if age_hours >= (self.max_hold_days * 24):
            return True

        # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–∏–±—ã–ª—å, –Ω–æ —Å–ª–æ–π –¥–æ–≤–æ–ª—å–Ω–æ —Å—Ç–∞—Ä—ã–π
        if profit_percent >= 0.5 and age_hours >= 48:  # 2 –¥–Ω—è
            return True

        return False

    def should_sell_partial(self, position_data: Dict, current_price: float) -> Dict:
        """üí∞ –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            trades = position_data.get('trades', [])
            if not trades:
                return {'action': 'hold', 'reason': '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫'}

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏
            layers = self.analyze_trading_layers(trades, current_price)
            if not layers:
                return {'action': 'hold', 'reason': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–∏'}

            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            sellable_layers = [layer for layer in layers if layer.can_sell]

            if not sellable_layers:
                oldest_layer = max(layers, key=lambda x: x.age_hours)
                return {
                    'action': 'hold', 
                    'reason': f'–ù–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤. –°—Ç–∞—Ä–µ–π—à–∏–π: {oldest_layer.age_hours:.1f}—á ({oldest_layer.profit_percent:+.1f}%)'
                }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            total_sellable = sum(layer.total_quantity for layer in sellable_layers)

            if total_sellable < self.min_sell_quantity:
                return {
                    'action': 'hold',
                    'reason': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {total_sellable:.2f} < {self.min_sell_quantity}'
                }

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤
            self._log_layers_analysis(layers, current_price)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
            reasons = []
            for layer in sellable_layers:
                if layer.profit_percent >= (self.min_layer_profit * 100):
                    reason = f"–ø—Ä–∏–±—ã–ª—å {layer.profit_percent:+.1f}%"
                elif layer.age_hours >= (self.max_hold_days * 24):
                    reason = f"–≤–æ–∑—Ä–∞—Å—Ç {layer.age_hours/24:.1f} –¥–Ω"
                else:
                    reason = f"—Å—Ç–∞—Ä—ã–π+–ø—Ä–∏–±—ã–ª—å {layer.profit_percent:+.1f}%"

                reasons.append(f"–°–ª–æ–π{layer.layer_id}: {layer.total_quantity:.1f} ({reason})")

            return {
                'action': 'partial_sell',
                'quantity': total_sellable,
                'layers_count': len(sellable_layers),
                'total_layers': len(layers),
                'avg_profit': sum(l.profit_percent for l in sellable_layers) / len(sellable_layers),
                'reason': '; '.join(reasons)
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–µ–≤: {e}")
            return {'action': 'hold', 'reason': f'–û—à–∏–±–∫–∞: {str(e)}'}

    def _log_layers_analysis(self, layers: List[TradingLayer], current_price: float):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–µ–≤"""

        self.logger.info("üìä –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –°–õ–û–ï–í:")
        self.logger.info(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.6f}")
        self.logger.info(f"   üìã –í—Å–µ–≥–æ —Å–ª–æ–µ–≤: {len(layers)}")

        total_quantity = sum(layer.total_quantity for layer in layers)
        weighted_avg = sum(layer.avg_price * layer.total_quantity for layer in layers) / total_quantity

        self.logger.info(f"   ‚öñÔ∏è –û–±—â–∏–π –æ–±—ä–µ–º: {total_quantity:.2f}")
        self.logger.info(f"   üí≤ –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è: {weighted_avg:.6f}")
        self.logger.info(f"   üìà –û–±—â–∏–π P&L: {((current_price - weighted_avg) / weighted_avg * 100):+.1f}%")

        for layer in layers:
            status = "‚úÖ –ü–†–û–î–ê–ï–ú" if layer.can_sell else "‚ùå –î–ï–†–ñ–ò–ú"
            self.logger.info(f"   –°–ª–æ–π {layer.layer_id}: {layer.total_quantity:.1f} –ø–æ {layer.avg_price:.6f} "
                           f"({layer.profit_percent:+.1f}%, {layer.age_hours:.1f}—á) {status}")

    def calculate_layer_targets(self, layers: List[TradingLayer]) -> Dict:
        """üéØ –¶–µ–ª–µ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Å–ª–æ–µ–≤"""
        targets = {}

        for layer in layers:
            target_price = layer.avg_price * (1 + self.min_layer_profit)
            targets[f'layer_{layer.layer_id}'] = {
                'current_price': layer.avg_price,
                'target_price': target_price,
                'quantity': layer.total_quantity,
                'current_profit': layer.profit_percent,
                'needed_profit': (self.min_layer_profit * 100) - layer.profit_percent,
                'age_hours': layer.age_hours,
                'can_sell_now': layer.can_sell
            }

        return targets

    def get_strategy_stats(self, trades: List[Dict], current_price: float) -> Dict:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            layers = self.analyze_trading_layers(trades, current_price)
            if not layers:
                return {'status': 'no_data'}

            sellable = [l for l in layers if l.can_sell]

            return {
                'total_layers': len(layers),
                'sellable_layers': len(sellable),
                'total_quantity': sum(l.total_quantity for l in layers),
                'sellable_quantity': sum(l.total_quantity for l in sellable),
                'avg_age_hours': sum(l.age_hours for l in layers) / len(layers),
                'avg_profit_percent': sum(l.profit_percent for l in layers) / len(layers),
                'best_layer_profit': max(l.profit_percent for l in layers) if layers else 0,
                'worst_layer_profit': min(l.profit_percent for l in layers) if layers else 0
            }

        except Exception as e:
            return {'status': 'error', 'error': str(e)}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def integrate_partial_trading(bot_instance):
    """üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""

    if not getattr(bot_instance.config, 'ENABLE_PARTIAL_TRADING', False):
        return lambda decision, *args: decision  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

    bot_instance.partial_strategy = PartialTradingStrategy(bot_instance.config)

    def enhanced_sell_decision(original_decision, position_data, current_price):
        """üéØ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ"""

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
        partial_analysis = bot_instance.partial_strategy.should_sell_partial(
            position_data, current_price
        )

        if partial_analysis['action'] == 'partial_sell':
            bot_instance.logger.info(f"üéØ –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ê:")
            bot_instance.logger.info(f"   üìä {partial_analysis['reason']}")
            return partial_analysis

        # –ï—Å–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω—É–∂–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        return original_decision

    return enhanced_sell_decision

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    from datetime import datetime, timedelta

    print("üéØ –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û–ô –¢–û–†–ì–û–í–õ–ò")
    print("=" * 40)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    class TestConfig:
        PARTIAL_MIN_LAYER_PROFIT = 0.012
        PARTIAL_MAX_HOLD_DAYS = 7
        PARTIAL_LAYER_TOLERANCE = 0.02

    strategy = PartialTradingStrategy(TestConfig())

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_trades = [
        {
            'date': datetime.now() - timedelta(days=6),
            'side': 'buy',
            'price': '0.200',
            'quantity': '10'
        },
        {
            'date': datetime.now() - timedelta(days=3),
            'side': 'buy', 
            'price': '0.195',
            'quantity': '10'
        },
        {
            'date': datetime.now() - timedelta(hours=4),
            'side': 'buy',
            'price': '0.190',
            'quantity': '10'
        }
    ]

    test_position = {'trades': test_trades}
    current_price = 0.193

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    analysis = strategy.should_sell_partial(test_position, current_price)

    print(f"–†–µ—à–µ–Ω–∏–µ: {analysis['action']}")
    print(f"–ü—Ä–∏—á–∏–Ω–∞: {analysis.get('reason', 'N/A')}")

    if analysis['action'] == 'partial_sell':
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {analysis.get('quantity', 0):.2f}")
        print(f"–°–ª–æ–µ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {analysis.get('layers_count', 0)}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = strategy.get_strategy_stats(test_trades, current_price)
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å–µ–≥–æ —Å–ª–æ–µ–≤: {stats.get('total_layers', 0)}")
    print(f"–ö –ø—Ä–æ–¥–∞–∂–µ: {stats.get('sellable_layers', 0)}")
    print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats.get('avg_profit_percent', 0):+.1f}%")
