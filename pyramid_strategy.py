# pyramid_strategy.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging
import time
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime


class SmartPyramidStrategy:
    """üèóÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É–±—ã—Ç–∫–æ–≤"""

    def __init__(self, config, position_manager):
        self.config = config
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)

        # üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ä–∞–º–∏–¥—ã (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ)
        self.pyramid_levels = [
            {
                'name': '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.015,    # +1.5% –≤–º–µ—Å—Ç–æ 0.8% (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                'sell_percent': 25,
                'min_profit_eur': 0.15
            },
            {
                'name': '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.03,     # +3% –≤–º–µ—Å—Ç–æ 2.0% (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                'sell_percent': 35,
                'min_profit_eur': 0.25
            },
            {
                'name': '–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.05,     # +5% –≤–º–µ—Å—Ç–æ 4.0% (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                'sell_percent': 25,
                'min_profit_eur': 0.35
            },
            {
                'name': '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å',
                'price_multiplier': 1.08,     # +8% –≤–º–µ—Å—Ç–æ 7% (–ò–°–ü–†–ê–í–õ–ï–ù–û)
                'sell_percent': 15,
                'min_profit_eur': 0.60
            }
        ]

        # üõ°Ô∏è –ù–û–í–´–ï –∑–∞—â–∏—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_profit_threshold = 0.012     # 1.2% –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –í–°–ï–ì–î–ê
        self.commission_buffer = 0.008        # 0.8% –±—É—Ñ–µ—Ä –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
        self.enable_loss_protection = True    # –í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç —É–±—ã—Ç–∫–æ–≤

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_sell_quantity = 5.0
        self.max_sell_per_cycle = 0.4
        self.cooldown_between_sells = 300
        self.last_sell_time = 0

        self.logger.info("üèóÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        self.logger.info(f"   üõ°Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {self.min_profit_threshold * 100:.1f}%")
        self.logger.info(f"   üîí –ó–∞—â–∏—Ç–∞ –æ—Ç —É–±—ã—Ç–∫–æ–≤: {'–í–ö–õ' if self.enable_loss_protection else '–í–´–ö–õ'}")

    def analyze_sell_opportunity(self, current_price: float, position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏"""

        try:
            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            accurate_data = self.position_manager.get_accurate_position_data(self.config.CURRENCY_1)

            if not accurate_data or accurate_data['quantity'] <= 0:
                return {'should_sell': False, 'reason': '–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏'}

            total_quantity = accurate_data['quantity']
            avg_price = accurate_data['avg_price']

            self.logger.info(f"üèóÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ø–∏—Ä–∞–º–∏–¥—ã:")
            self.logger.info(f"   üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {total_quantity:.6f} –ø–æ {avg_price:.8f}")
            self.logger.info(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")

            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
            overall_profit = (current_price - avg_price) / avg_price
            min_required_profit = self.min_profit_threshold + self.commission_buffer

            if self.enable_loss_protection and overall_profit < min_required_profit:
                self.logger.warning(f"üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –£–ë–´–¢–ö–û–í –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
                self.logger.warning(f"   –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {overall_profit * 100:+.2f}%")
                self.logger.warning(f"   –ú–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: {min_required_profit * 100:.1f}%")
                self.logger.warning(f"   –ü–†–û–î–ê–ñ–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê!")

                return {
                    'should_sell': False,
                    'reason': f'–ó–∞—â–∏—Ç–∞ –æ—Ç —É–±—ã—Ç–∫–æ–≤: {overall_profit * 100:+.2f}% < {min_required_profit * 100:.1f}%'
                }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if not self._can_sell_now():
                remaining_cooldown = self._get_remaining_cooldown()
                return {
                    'should_sell': False,
                    'reason': f'–ö—É–ª–¥–∞—É–Ω: {remaining_cooldown:.0f} —Å–µ–∫'
                }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            best_opportunity = None
            max_profit = 0

            for level in self.pyramid_levels:
                opportunity = self._analyze_pyramid_level_safe(
                    current_price, avg_price, total_quantity, level
                )

                if (opportunity['can_sell'] and
                    opportunity['total_profit'] > max_profit and
                    opportunity['total_profit'] >= level['min_profit_eur']):

                    best_opportunity = opportunity
                    max_profit = opportunity['total_profit']

            if best_opportunity:
                return {
                    'should_sell': True,
                    'strategy': 'safe_pyramid',
                    **best_opportunity
                }

            return {
                'should_sell': False,
                'reason': '–ù–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏'
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ä–∞–º–∏–¥—ã: {e}")
            return {'should_sell': False, 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'}

    def _analyze_pyramid_level_safe(self, current_price: float, avg_price: float,
                                   total_quantity: float, level: Dict) -> Dict[str, Any]:
        """üîç –ë–ï–ó–û–ü–ê–°–ù–´–ô –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è –ø–∏—Ä–∞–º–∏–¥—ã"""

        level_name = level['name']
        target_multiplier = level['price_multiplier']
        sell_percentage = level['sell_percent'] / 100

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        required_price = avg_price * target_multiplier

        if current_price < required_price:
            return {
                'can_sell': False,
                'level': level_name,
                'reason': f'–¶–µ–Ω–∞ {current_price:.8f} < —Ü–µ–ª–∏ {required_price:.8f}'
            }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        sell_quantity = min(
            total_quantity * sell_percentage,
            total_quantity * self.max_sell_per_cycle
        )

        if sell_quantity < self.min_sell_quantity:
            return {
                'can_sell': False,
                'level': level_name,
                'reason': f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {sell_quantity:.2f} < –º–∏–Ω–∏–º—É–º–∞'
            }

        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        total_profit = sell_quantity * (current_price - avg_price)
        profit_percent = (current_price - avg_price) / avg_price * 100

        return {
            'can_sell': True,
            'level': level_name,
            'sell_quantity': sell_quantity,
            'sell_price': current_price * 0.9995,
            'total_profit': total_profit,
            'profit_percent': profit_percent,
            'avg_price_used': avg_price,
            'reason': f'{level_name}: –ø—Ä–æ–¥–∞–∂–∞ {sell_quantity:.2f} DOGE —Å –ø—Ä–∏–±—ã–ª—å—é {total_profit:.4f} EUR'
        }

    def execute_pyramid_sell(self, sell_data: Dict[str, Any], api_client) -> bool:
        """üöÄ –ë–ï–ó–û–ü–ê–°–ù–û–ï –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""

        if not sell_data.get('should_sell'):
            return False

        quantity = sell_data['sell_quantity']
        price = sell_data['sell_price']
        level = sell_data['level']
        avg_price_used = sell_data.get('avg_price_used', 0)

        # üõ°Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        if avg_price_used > 0:
            profit_check = (price - avg_price_used) / avg_price_used
            if profit_check < self.min_profit_threshold:
                self.logger.error(f"üö® –§–ò–ù–ê–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å {profit_check*100:.2f}%")
                return False

        self.logger.info(f"üèóÔ∏è –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–ò–†–ê–ú–ò–î–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê: {level}")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} DOGE")
        self.logger.info(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {price:.8f} EUR")
        self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {avg_price_used:.8f} EUR")
        self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å: {((price - avg_price_used) / avg_price_used * 100):+.2f}%")

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            pair_settings = api_client.get_pair_settings()
            precision = int(pair_settings.get(pair, {}).get('price_precision', 8))
            price_rounded = round(price, precision)

            result = api_client.create_order(pair, quantity, price_rounded, 'sell')

            if result.get('result'):
                self.logger.info(f"‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–ò–†–ê–ú–ò–î–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –ò–°–ü–û–õ–ù–ï–ù–ê!")
                self.logger.info(f"   –û—Ä–¥–µ—Ä ID: {result.get('order_id', 'N/A')}")
                self.last_sell_time = time.time()
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result}")

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")

        return False

    def _can_sell_now(self) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        current_time = time.time()
        return (current_time - self.last_sell_time) >= self.cooldown_between_sells

    def _get_remaining_cooldown(self) -> float:
        """‚è∞ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞"""
        current_time = time.time()
        elapsed = current_time - self.last_sell_time
        return max(0, self.cooldown_between_sells - elapsed)

    def get_pyramid_status(self, current_price: float, position_data: Dict[str, Any]) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç—É—Å –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategy': 'safe_pyramid',
            'loss_protection': self.enable_loss_protection,
            'min_profit_threshold': f"{self.min_profit_threshold * 100:.1f}%",
            'current_price': current_price,
            'cooldown_remaining': self._get_remaining_cooldown()
        }
