# trailing_stop.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –±—ã—Å—Ç—Ä—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º

from typing import Optional, Tuple, Dict, Any
from datetime import datetime
import logging
import json
import os
import time

# –ò—Å–ø–æ–ª—å–∑—É–µ–º TYPE_CHECKING –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    pass


class TrailingState:
    """üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ trailing stop –ø–æ–∑–∏—Ü–∏–∏"""

    def __init__(self, entry_price: float, total_quantity: float, remaining_quantity: float):
        self.entry_price = entry_price
        self.total_quantity = total_quantity
        self.remaining_quantity = remaining_quantity

        self.status = "waiting"  # waiting, trailing
        self.peak_price = entry_price
        self.current_price = entry_price
        self.partial_sell_done = False
        self.created_at = datetime.now()
        self.last_update = datetime.now()

    def to_dict(self) -> Dict[str, Any]:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'entry_price': self.entry_price,
            'total_quantity': self.total_quantity,
            'remaining_quantity': self.remaining_quantity,
            'status': self.status,
            'peak_price': self.peak_price,
            'current_price': self.current_price,
            'partial_sell_done': self.partial_sell_done,
            'created_at': self.created_at.isoformat(),
            'last_update': self.last_update.isoformat()
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TrailingState':
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        instance = cls(
            entry_price=data['entry_price'],
            total_quantity=data['total_quantity'],
            remaining_quantity=data['remaining_quantity']
        )

        instance.status = data.get('status', 'waiting')
        instance.peak_price = data.get('peak_price', instance.entry_price)
        instance.current_price = data.get('current_price', instance.entry_price)
        instance.partial_sell_done = data.get('partial_sell_done', False)

        try:
            instance.created_at = datetime.fromisoformat(data['created_at'])
            instance.last_update = datetime.fromisoformat(data['last_update'])
        except:
            instance.created_at = datetime.now()
            instance.last_update = datetime.now()

        return instance


class TrailingStopManager:
    """üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ç–æ–ø–æ–≤ —Å –±—ã—Å—Ç—Ä—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""

    def __init__(self, data_dir: str = 'data'):
        self.logger = logging.getLogger(__name__)
        self.data_dir = data_dir
        self.state_file = os.path.join(data_dir, 'trailing_stops.json')

        # üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ trailing stop
        self.trailing_percent = 0.005  # 0.5% –æ—Ç –ø–∏–∫–∞
        self.activation_profit = 0.012  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏ +1.2%
        self.partial_sell_percent = 0.70  # üîß –£–í–ï–õ–ò–ß–ï–ù–û –¥–æ 70% –≤–º–µ—Å—Ç–æ 30%

        # üÜï –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.min_order_size_doge = 5.0  # –ú–∏–Ω–∏–º—É–º 5 DOGE –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        self.aggressive_sell_discount = 0.002  # 0.2% —Å–∫–∏–¥–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏
        self.double_check_enabled = True  # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π
        self.double_check_delay = 0.1  # 100ms –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
        self.positions: Dict[str, TrailingState] = {}

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        os.makedirs(data_dir, exist_ok=True)
        self.load_state()

        self.logger.info("üéØ TrailingStopManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (FAST EXECUTION)")
        self.logger.info(f"   Trailing: {self.trailing_percent * 100:.1f}% –æ—Ç –ø–∏–∫–∞")
        self.logger.info(f"   –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {self.activation_profit * 100:.1f}%")
        self.logger.info(f"   –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {self.partial_sell_percent * 100:.0f}%")
        self.logger.info(f"   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞: {self.aggressive_sell_discount * 100:.1f}%")

    def load_state(self) -> None:
        """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.state_file):
                with open(self.state_file, 'r') as f:
                    data = json.load(f)

                for currency, state_data in data.items():
                    self.positions[currency] = TrailingState.from_dict(state_data)

                self.logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.positions)} trailing –ø–æ–∑–∏—Ü–∏–π")
            else:
                self.logger.info("üìÇ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            self.positions = {}

    def save_state(self) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            data = {}
            for currency, state in self.positions.items():
                data[currency] = state.to_dict()

            with open(self.state_file, 'w') as f:
                json.dump(data, f, indent=2)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def update_position(self, currency: str, current_price: float, entry_price: float,
                        total_quantity: float, get_fresh_price_callback=None) -> Tuple[bool, float, str]:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ trailing stop –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–ª–ª–±—ç–∫–æ–º –¥–ª—è —Å–≤–µ–∂–µ–π —Ü–µ–Ω—ã"""

        profit_percent = (current_price - entry_price) / entry_price

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
        if currency not in self.positions:
            self.positions[currency] = TrailingState(
                entry_price=entry_price,
                total_quantity=total_quantity,
                remaining_quantity=total_quantity
            )

        state = self.positions[currency]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.current_price = current_price
        state.last_update = datetime.now()

        self.logger.info(f"üéØ Trailing –∞–Ω–∞–ª–∏–∑ {currency}:")
        self.logger.info(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")
        self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å: {profit_percent * 100:+.2f}%")
        self.logger.info(f"   –°—Ç–∞—Ç—É—Å: {state.status}")
        self.logger.info(f"   –û—Å—Ç–∞–µ—Ç—Å—è: {state.remaining_quantity:.4f}")

        # üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ trailing stop
        should_sell, sell_quantity, reason = self._process_trailing_logic_fast(
            state, current_price, profit_percent, get_fresh_price_callback
        )

        if should_sell:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
            state.remaining_quantity -= sell_quantity

            if state.remaining_quantity <= 0.001:  # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                del self.positions[currency]
                self.logger.info(f"üèÅ Trailing –ø–æ–∑–∏—Ü–∏—è {currency} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.save_state()

        return should_sell, sell_quantity, reason

    def _process_trailing_logic_fast(self, state: TrailingState, current_price: float,
                                     profit_percent: float, get_fresh_price_callback=None) -> Tuple[bool, float, str]:
        """üöÄ –ë–´–°–¢–†–ê–Ø –ª–æ–≥–∏–∫–∞ trailing stop —Å –¥–≤–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""

        # –≠—Ç–∞–ø 1: –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
        if (state.status == "waiting" and
                profit_percent >= self.activation_profit and
                not state.partial_sell_done):

            sell_quantity = state.total_quantity * self.partial_sell_percent

            # üîß –ü–†–û–í–ï–†–ö–ê –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
            if sell_quantity < self.min_order_size_doge:
                self.logger.warning(f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ {sell_quantity:.2f} < –º–∏–Ω–∏–º—É–º–∞ {self.min_order_size_doge}")
                self.logger.info(f"üí° –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ trailing –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ trailing –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏
                state.status = "trailing"
                state.peak_price = current_price
                # –ù–ï –ø–æ–º–µ—á–∞–µ–º partial_sell_done = True

                return False, 0.0, "–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ trailing"

            # –û–±—ã—á–Ω–∞—è —á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            state.status = "trailing"
            state.partial_sell_done = True
            state.peak_price = current_price

            self.logger.info(f"üéØ –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–î–ê–ñ–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å: {profit_percent * 100:.2f}%")
            self.logger.info(f"   –ü—Ä–æ–¥–∞–µ–º: {sell_quantity:.4f} ({self.partial_sell_percent * 100:.0f}%)")

            # üöÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
            return True, sell_quantity, f"AGGRESSIVE_SELL:{current_price:.8f}:–ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ +{profit_percent * 100:.1f}%"

        # –≠—Ç–∞–ø 2: Trailing stop –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–æ–∑–∏—Ü–∏–∏
        if state.status == "trailing":

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫
            if current_price > state.peak_price:
                old_peak = state.peak_price
                state.peak_price = current_price

                self.logger.info(f"üìà –ù–æ–≤—ã–π –ø–∏–∫: {old_peak:.8f} ‚Üí {state.peak_price:.8f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º trailing stop
            trailing_stop_price = state.peak_price * (1 - self.trailing_percent)
            distance_from_peak = (state.peak_price - current_price) / state.peak_price * 100

            self.logger.info(f"üéØ Trailing –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:")
            self.logger.info(f"   –ü–∏–∫: {state.peak_price:.8f}")
            self.logger.info(f"   –°—Ç–æ–ø: {trailing_stop_price:.8f}")
            self.logger.info(f"   –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç –ø–∏–∫–∞: {distance_from_peak:.2f}%")

            if current_price <= trailing_stop_price:

                # üîç –î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê —Å —Å–≤–µ–∂–µ–π —Ü–µ–Ω–æ–π
                if self.double_check_enabled and get_fresh_price_callback:
                    self.logger.info(f"üîç –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ trailing stop...")
                    time.sleep(self.double_check_delay)

                    fresh_price = get_fresh_price_callback()
                    if fresh_price and fresh_price > 0:
                        fresh_stop_price = state.peak_price * (1 - self.trailing_percent)
                        fresh_distance = (state.peak_price - fresh_price) / state.peak_price * 100

                        self.logger.info(f"   –°–≤–µ–∂–∞—è —Ü–µ–Ω–∞: {fresh_price:.8f}")
                        self.logger.info(f"   –°–≤–µ–∂–∏–π —Å—Ç–æ–ø: {fresh_stop_price:.8f}")
                        self.logger.info(f"   –°–≤–µ–∂–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {fresh_distance:.2f}%")

                        if fresh_price > fresh_stop_price:
                            self.logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: —Ü–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å")
                            return False, 0.0, "Trailing stop –æ—Ç–º–µ–Ω–µ–Ω - —Ü–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å"

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                        current_price = fresh_price
                        distance_from_peak = fresh_distance

                sell_quantity = state.remaining_quantity

                self.logger.info(f"üö® TRAILING STOP –°–†–ê–ë–û–¢–ê–õ!")
                self.logger.info(f"   –ü—Ä–æ–¥–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫: {sell_quantity:.4f}")

                # üöÄ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏
                return True, sell_quantity, f"MARKET_SELL:{current_price:.8f}:Trailing stop: –ø–∏–∫ {state.peak_price:.6f}, –ø–∞–¥–µ–Ω–∏–µ {distance_from_peak:.1f}%"

        return False, 0.0, "Trailing –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è"

    def calculate_adaptive_sell_price(self, current_price: float, order_type: str = "normal") -> float:
        """üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""

        if order_type == "AGGRESSIVE_SELL":
            # –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ - —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
            discount = 0.001  # 0.1%
        elif order_type == "MARKET_SELL":
            # Trailing stop - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
            discount = self.aggressive_sell_discount  # 0.2%
        else:
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
            discount = 0.0002  # 0.02%

        return current_price * (1 - discount)

    def reset_position(self, currency: str) -> None:
        """üîÑ –°–±—Ä–æ—Å trailing –ø–æ–∑–∏—Ü–∏–∏"""
        if currency in self.positions:
            del self.positions[currency]
            self.save_state()
            self.logger.info(f"üîÑ Trailing –ø–æ–∑–∏—Ü–∏—è {currency} —Å–±—Ä–æ—à–µ–Ω–∞")

    def get_status(self, currency: str) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ trailing –ø–æ–∑–∏—Ü–∏–∏"""
        if currency not in self.positions:
            return {'active': False}

        state = self.positions[currency]
        return {
            'active': True,
            'status': state.status,
            'entry_price': state.entry_price,
            'peak_price': state.peak_price,
            'current_price': state.current_price,
            'total_quantity': state.total_quantity,
            'remaining_quantity': state.remaining_quantity,
            'partial_sell_done': state.partial_sell_done,
            'trailing_stop_price': state.peak_price * (1 - self.trailing_percent) if state.peak_price else 0
        }