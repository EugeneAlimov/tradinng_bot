#!/usr/bin/env python3
"""üèóÔ∏è –ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —ç—Ç–∞–ø–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

import sys
import os
import time
from pathlib import Path
from typing import Dict, Any, List
import json
import shutil


class Stage2Runner:
    """üèóÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 2"""
    
    def __init__(self):
        self.root_path = Path(".")
        self.src_path = Path("src")
        self.results = {}
        self.start_time = time.time()
        
        print("üèóÔ∏è –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –Ø–î–†–ê –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
        print("=" * 60)
        print("üìã –ó–∞–¥–∞—á–∏ —ç—Ç–∞–ø–∞:")
        print("  2.1 üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Core —Å–ª–æ—è")
        print("  2.2 üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (interfaces.py)")
        print("  2.3 üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π (models.py)")
        print("  2.4 üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (exceptions.py)")
        print("  2.5 üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π (events.py)")
        print("  2.6 üíâ –ü—Ä–æ–≤–µ—Ä–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (di_container.py)")
        print("  2.7 ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (config/settings.py)")
        print("  2.8 üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("=" * 60)
    
    def run_complete_stage2(self) -> bool:
        """üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ 2"""
        
        success = True
        
        try:
            # 2.1 –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            print("\nüìÅ –®–∞–≥ 2.1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Core —Å–ª–æ—è...")
            structure_result = self._create_core_structure()
            success = success and structure_result
            
            # 2.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            print("\nüéØ –®–∞–≥ 2.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...")
            interfaces_result = self._check_interfaces()
            success = success and interfaces_result
            
            # 2.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
            print("\nüèóÔ∏è –®–∞–≥ 2.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            models_result = self._check_models()
            success = success and models_result
            
            # 2.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            print("\nüö® –®–∞–≥ 2.4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...")
            exceptions_result = self._check_exceptions()
            success = success and exceptions_result
            
            # 2.5 –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π
            print("\nüì° –®–∞–≥ 2.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π...")
            events_result = self._check_events()
            success = success and events_result
            
            # 2.6 –ü—Ä–æ–≤–µ—Ä–∫–∞ DI
            print("\nüíâ –®–∞–≥ 2.6: –ü—Ä–æ–≤–µ—Ä–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
            di_result = self._check_di_container()
            success = success and di_result
            
            # 2.7 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            print("\n‚öôÔ∏è –®–∞–≥ 2.7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            config_result = self._check_config()
            success = success and config_result
            
            # 2.8 –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("\nüß™ –®–∞–≥ 2.8: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            validation_result = self._run_validation_tests()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self._generate_stage2_summary()
            
            overall_success = all([
                structure_result, interfaces_result, models_result,
                exceptions_result, events_result, di_result,
                config_result, validation_result
            ])
            
            self._print_final_results(overall_success)
            
            return overall_success
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 2: {e}")
            self.results['critical_error'] = {'success': False, 'error': str(e)}
            return False
    
    def _create_core_structure(self) -> bool:
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π Core —Å–ª–æ—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            core_dirs = [
                "src",
                "src/core", 
                "src/config",
                "src/domain",
                "src/application", 
                "src/infrastructure",
                "src/presentation"
            ]
            
            created_dirs = []
            for dir_path in core_dirs:
                full_path = self.root_path / dir_path
                if not full_path.exists():
                    full_path.mkdir(parents=True, exist_ok=True)
                    created_dirs.append(dir_path)
            
            # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
            init_files = [
                "src/__init__.py",
                "src/core/__init__.py",
                "src/config/__init__.py",
                "src/domain/__init__.py",
                "src/application/__init__.py",
                "src/infrastructure/__init__.py",
                "src/presentation/__init__.py"
            ]
            
            created_inits = []
            for init_file in init_files:
                init_path = self.root_path / init_file
                if not init_path.exists():
                    init_path.write_text('"""üì¶ –ú–æ–¥—É–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""\n')
                    created_inits.append(init_file)
            
            self.results['structure'] = {
                'success': True,
                'created_directories': created_dirs,
                'created_init_files': created_inits,
                'total_dirs': len(core_dirs),
                'total_inits': len(init_files)
            }
            
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:")
            print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(core_dirs)}")
            print(f"   üìÑ __init__.py —Ñ–∞–π–ª–æ–≤: {len(init_files)}")
            if created_dirs:
                print(f"   üÜï –ù–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {len(created_dirs)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            self.results['structure'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_interfaces(self) -> bool:
        """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        try:
            interfaces_file = self.src_path / "core" / "interfaces.py"
            
            if not interfaces_file.exists():
                print("‚ùå –§–∞–π–ª interfaces.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            try:
                with open(interfaces_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(interfaces_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                required_interfaces = [
                    'IExchangeAPI', 'ITradingStrategy', 'IRiskManager',
                    'IPositionManager', 'ITradeExecutor', 'IMarketDataProvider'
                ]
                
                found_interfaces = [iface for iface in required_interfaces if iface in content]
                
                self.results['interfaces'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_interfaces': found_interfaces,
                    'total_required': len(required_interfaces),
                    'coverage_percent': (len(found_interfaces) / len(required_interfaces)) * 100
                }
                
                print(f"‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {len(found_interfaces)}/{len(required_interfaces)}")
                
                return len(found_interfaces) >= len(required_interfaces) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ interfaces.py: {e}")
                self.results['interfaces'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
            self.results['interfaces'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_models(self) -> bool:
        """üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–µ–π"""
        try:
            models_file = self.src_path / "core" / "models.py"
            
            if not models_file.exists():
                print("‚ùå –§–∞–π–ª models.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            try:
                with open(models_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(models_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–¥–µ–ª–∏
                required_models = [
                    'TradingPair', 'Position', 'TradeSignal', 'MarketData',
                    'OrderResult', 'Money', 'Price'
                ]
                
                found_models = [model for model in required_models if model in content]
                
                self.results['models'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_models': found_models,
                    'total_required': len(required_models),
                    'coverage_percent': (len(found_models) / len(required_models)) * 100
                }
                
                print(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üèóÔ∏è –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(found_models)}/{len(required_models)}")
                
                return len(found_models) >= len(required_models) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ models.py: {e}")
                self.results['models'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            self.results['models'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_exceptions(self) -> bool:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            exceptions_file = self.src_path / "core" / "exceptions.py"
            
            if not exceptions_file.exists():
                print("‚ùå –§–∞–π–ª exceptions.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            try:
                with open(exceptions_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(exceptions_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                required_exceptions = [
                    'TradingSystemError', 'APIError', 'TradingError',
                    'RiskManagementError', 'ValidationError', 'ConfigurationError'
                ]
                
                found_exceptions = [exc for exc in required_exceptions if exc in content]
                
                self.results['exceptions'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_exceptions': found_exceptions,
                    'total_required': len(required_exceptions),
                    'coverage_percent': (len(found_exceptions) / len(required_exceptions)) * 100
                }
                
                print(f"‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üö® –ù–∞–π–¥–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(found_exceptions)}/{len(required_exceptions)}")
                
                return len(found_exceptions) >= len(required_exceptions) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ exceptions.py: {e}")
                self.results['exceptions'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
            self.results['exceptions'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_events(self) -> bool:
        """üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ–±—ã—Ç–∏–π"""
        try:
            events_file = self.src_path / "core" / "events.py"
            
            if not events_file.exists():
                print("‚ùå –§–∞–π–ª events.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            try:
                with open(events_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(events_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏–π
                required_components = [
                    'IEventBus', 'EventBus', 'DomainEvent',
                    'EventSubscription', 'EventDispatcher'
                ]
                
                found_components = [comp for comp in required_components if comp in content]
                
                self.results['events'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_components': found_components,
                    'total_required': len(required_components),
                    'coverage_percent': (len(found_components) / len(required_components)) * 100
                }
                
                print(f"‚úÖ –°–æ–±—ã—Ç–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üì° –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(found_components)}/{len(required_components)}")
                
                return len(found_components) >= len(required_components) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ events.py: {e}")
                self.results['events'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            self.results['events'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_di_container(self) -> bool:
        """üíâ –ü—Ä–æ–≤–µ—Ä–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            di_file = self.src_path / "core" / "di_container.py"
            
            if not di_file.exists():
                print("‚ùå –§–∞–π–ª di_container.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            try:
                with open(di_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(di_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DI
                required_components = [
                    'DependencyContainer', 'ServiceDescriptor', 'ServiceLifetime',
                    'ContainerBuilder', 'ServiceLocator'
                ]
                
                found_components = [comp for comp in required_components if comp in content]
                
                self.results['di_container'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_components': found_components,
                    'total_required': len(required_components),
                    'coverage_percent': (len(found_components) / len(required_components)) * 100
                }
                
                print(f"‚úÖ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üíâ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(found_components)}/{len(required_components)}")
                
                return len(found_components) >= len(required_components) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ di_container.py: {e}")
                self.results['di_container'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            self.results['di_container'] = {'success': False, 'error': str(e)}
            return False
    
    def _check_config(self) -> bool:
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_file = self.src_path / "config" / "settings.py"
            
            if not config_file.exists():
                print("‚ùå –§–∞–π–ª config/settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                compile(content, str(config_file), 'exec')
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                required_components = [
                    'TradingSystemSettings', 'ConfigProvider', 'TradingProfile',
                    'APISettings', 'TradingSettings', 'RiskSettings'
                ]
                
                found_components = [comp for comp in required_components if comp in content]
                
                self.results['config'] = {
                    'success': True,
                    'file_size': len(content),
                    'found_components': found_components,
                    'total_required': len(required_components),
                    'coverage_percent': (len(found_components) / len(required_components)) * 100
                }
                
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:")
                print(f"   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   ‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(found_components)}/{len(required_components)}")
                
                return len(found_components) >= len(required_components) // 2
                
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ settings.py: {e}")
                self.results['config'] = {'success': False, 'error': f"Syntax error: {e}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.results['config'] = {'success': False, 'error': str(e)}
            return False
    
    def _run_validation_tests(self) -> bool:
        """üß™ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            test_results = {
                'import_tests': self._test_imports(),
                'instantiation_tests': self._test_instantiation(),
                'integration_tests': self._test_basic_integration()
            }
            
            all_passed = all(test_results.values())
            
            self.results['validation'] = {
                'success': all_passed,
                'test_results': test_results,
                'total_tests': len(test_results),
                'passed_tests': sum(test_results.values())
            }
            
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   üß™ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {sum(test_results.values())}/{len(test_results)}")
            
            for test_name, result in test_results.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {test_name}")
            
            return all_passed
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            self.results['validation'] = {'success': False, 'error': str(e)}
            return False
    
    def _test_imports(self) -> bool:
        """üì• –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
            sys.path.insert(0, str(self.src_path))
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã core –º–æ–¥—É–ª–µ–π
            core_modules = [
                'core.interfaces',
                'core.models', 
                'core.exceptions',
                'core.events',
                'core.di_container',
                'config.settings'
            ]
            
            import_errors = []
            for module_name in core_modules:
                try:
                    __import__(module_name)
                except Exception as e:
                    import_errors.append(f"{module_name}: {e}")
            
            if import_errors:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {len(import_errors)}")
                for error in import_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"     {error}")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
            return False
    
    def _test_instantiation(self) -> bool:
        """üè≠ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            from core.models import TradingPair, Money, Position, TradeSignal
            from core.di_container import DependencyContainer, ContainerBuilder
            from config.settings import TradingSystemSettings, ConfigProvider
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            test_objects = []
            
            # TradingPair
            pair = TradingPair("DOGE", "EUR")
            test_objects.append(("TradingPair", pair))
            
            # Money
            money = Money(amount=100, currency="EUR")
            test_objects.append(("Money", money))
            
            # Position
            position = Position(currency="DOGE")
            test_objects.append(("Position", position))
            
            # TradeSignal
            signal = TradeSignal()
            test_objects.append(("TradeSignal", signal))
            
            # DependencyContainer
            container = DependencyContainer()
            test_objects.append(("DependencyContainer", container))
            
            # ConfigProvider
            config_provider = ConfigProvider()
            test_objects.append(("ConfigProvider", config_provider))
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(test_objects)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
            return False
    
    def _test_basic_integration(self) -> bool:
        """üîó –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            from core.models import TradingPair, Money, Position
            from core.di_container import DependencyContainer
            from config.settings import TradingSystemSettings
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
            pair = TradingPair.from_string("DOGE_EUR")
            money1 = Money(100, "EUR")
            money2 = Money(50, "EUR")
            total = money1 + money2
            
            # –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–∏
            position = Position(currency="DOGE", quantity=1000, avg_price=0.18)
            profit = position.calculate_profit_loss(0.20)
            
            # –¢–µ—Å—Ç DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            container = DependencyContainer()
            container.register_instance(str, "test_string")
            resolved = container.resolve(str)
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            settings = TradingSystemSettings()
            settings.validate()
            
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _generate_stage2_summary(self) -> None:
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —ç—Ç–∞–ø–∞ 2"""
        
        elapsed_time = time.time() - self.start_time
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_files = 0
        total_size = 0
        
        for component, result in self.results.items():
            if result.get('success') and 'file_size' in result:
                total_files += 1
                total_size += result['file_size']
        
        summary = {
            'stage': 2,
            'name': '–°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã',
            'execution_time_minutes': round(elapsed_time / 60, 2),
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'results': self.results,
            'overall_success': all(
                result.get('success', False) 
                for result in self.results.values()
            ),
            'statistics': {
                'total_core_files': total_files,
                'total_code_size': total_size,
                'components_created': list(self.results.keys()),
                'success_rate': sum(1 for r in self.results.values() if r.get('success', False)) / max(len(self.results), 1) * 100
            },
            'next_steps': self._generate_next_steps(),
            'critical_findings': self._extract_critical_findings(),
            'architecture_readiness': self._assess_architecture_readiness()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        output_file = "stage2_core_creation_summary.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —ç—Ç–∞–ø–∞ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        self.results['summary'] = summary
    
    def _generate_next_steps(self) -> List[str]:
        """üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        next_steps = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–∞–ø–∞ 2
        failed_components = [
            name for name, result in self.results.items() 
            if not result.get('success', False)
        ]
        
        if failed_components:
            next_steps.append(f"üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(failed_components)}")
        
        validation_success = self.results.get('validation', {}).get('success', False)
        if not validation_success:
            next_steps.append("üß™ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        if not failed_components and validation_success:
            next_steps.extend([
                "üéØ –ì–æ—Ç–æ–≤ –∫ –≠—Ç–∞–ø—É 3: –°–æ–∑–¥–∞–Ω–∏–µ Domain —Å–ª–æ—è",
                "üèõÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏",
                "üéØ –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "üõ°Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å—ã",
                "üìä –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã"
            ])
        else:
            next_steps.extend([
                "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–∞–ø 2 –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫",
                "üìù –ò–∑—É—á–∏—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤ –¥–µ—Ç–∞–ª—è—Ö",
                "üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"
            ])
        
        return next_steps
    
    def _extract_critical_findings(self) -> List[str]:
        """üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫"""
        findings = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        for component, result in self.results.items():
            if result.get('success') and 'coverage_percent' in result:
                coverage = result['coverage_percent']
                if coverage < 80:
                    findings.append(f"üìä {component}: –ø–æ–∫—Ä—ã—Ç–∏–µ {coverage:.1f}% (–Ω–∏–∑–∫–æ–µ)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
        large_files = []
        for component, result in self.results.items():
            if result.get('success') and 'file_size' in result:
                size = result['file_size']
                if size > 15000:  # > 15KB
                    large_files.append(f"{component} ({size} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if large_files:
            findings.append(f"üìÑ –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã: {', '.join(large_files)}")
        
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_result = self.results.get('validation', {})
        if not validation_result.get('success', False):
            test_results = validation_result.get('test_results', {})
            failed_tests = [name for name, passed in test_results.items() if not passed]
            if failed_tests:
                findings.append(f"üß™ –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: {', '.join(failed_tests)}")
        
        return findings
    
    def _assess_architecture_readiness(self) -> Dict[str, Any]:
        """üèóÔ∏è –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        component_readiness = {}
        for component, result in self.results.items():
            if 'coverage_percent' in result:
                component_readiness[component] = result['coverage_percent']
        
        overall_readiness = sum(component_readiness.values()) / max(len(component_readiness), 1)
        
        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        criteria = {
            'core_structure_exists': self.results.get('structure', {}).get('success', False),
            'interfaces_complete': self.results.get('interfaces', {}).get('coverage_percent', 0) >= 80,
            'models_complete': self.results.get('models', {}).get('coverage_percent', 0) >= 80,
            'exceptions_complete': self.results.get('exceptions', {}).get('coverage_percent', 0) >= 80,
            'di_container_works': self.results.get('di_container', {}).get('success', False),
            'config_system_works': self.results.get('config', {}).get('success', False),
            'validation_passes': self.results.get('validation', {}).get('success', False)
        }
        
        passed_criteria = sum(criteria.values())
        total_criteria = len(criteria)
        criteria_score = (passed_criteria / total_criteria) * 100
        
        return {
            'overall_readiness_percent': round(overall_readiness, 1),
            'criteria_score_percent': round(criteria_score, 1),
            'passed_criteria': passed_criteria,
            'total_criteria': total_criteria,
            'component_readiness': component_readiness,
            'criteria_details': criteria,
            'ready_for_stage3': (criteria_score >= 85 and overall_readiness >= 80)
        }
    
    def _print_final_results(self, overall_success: bool) -> None:
        """üìä –ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        elapsed_time = time.time() - self.start_time
        
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–ò –≠–¢–ê–ü–ê 2: –°–û–ó–î–ê–ù–ò–ï –Ø–î–†–ê")
        print("="*60)
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if overall_success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú:")
        components = [
            ("2.1 –°—Ç—Ä—É–∫—Ç—É—Ä–∞", "structure"),
            ("2.2 –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "interfaces"),
            ("2.3 –ú–æ–¥–µ–ª–∏", "models"),
            ("2.4 –ò—Å–∫–ª—é—á–µ–Ω–∏—è", "exceptions"),
            ("2.5 –°–æ–±—ã—Ç–∏—è", "events"),
            ("2.6 DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "di_container"),
            ("2.7 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "config"),
            ("2.8 –í–∞–ª–∏–¥–∞—Ü–∏—è", "validation")
        ]
        
        for comp_name, comp_key in components:
            result = self.results.get(comp_key, {})
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            coverage = result.get('coverage_percent', 0)
            coverage_str = f" ({coverage:.0f}%)" if coverage > 0 else ""
            print(f"  {status} {comp_name}{coverage_str}")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        readiness = self._assess_architecture_readiness()
        print(f"\nüèóÔ∏è –ì–û–¢–û–í–ù–û–°–¢–¨ –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
        print(f"  üìä –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness['overall_readiness_percent']}%")
        print(f"  ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {readiness['passed_criteria']}/{readiness['total_criteria']}")
        print(f"  üéØ –ì–æ—Ç–æ–≤ –∫ –≠—Ç–∞–ø—É 3: {'‚úÖ –î–ê' if readiness['ready_for_stage3'] else '‚ùå –ù–ï–¢'}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ö–æ–¥–∫–∏
        findings = self._extract_critical_findings()
        if findings:
            print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:")
            for finding in findings[:3]:
                print(f"  ‚Ä¢ {finding}")
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps = self._generate_next_steps()
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        for i, step in enumerate(next_steps[:5], 1):
            print(f"  {i}. {step}")
        
        print("="*60)


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —è–¥—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–≠—Ç–∞–ø 2)")
    print("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 2-5 –º–∏–Ω—É—Ç")
    
    try:
        runner = Stage2Runner()
        success = runner.run_complete_stage2()
        
        if success:
            print(f"\nüéâ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üèóÔ∏è Core —Å–ª–æ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω:")
            print(f"  ‚Ä¢ src/core/interfaces.py - –í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–∏—Å—Ç–µ–º—ã")
            print(f"  ‚Ä¢ src/core/models.py - –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
            print(f"  ‚Ä¢ src/core/exceptions.py - –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
            print(f"  ‚Ä¢ src/core/events.py - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π")
            print(f"  ‚Ä¢ src/core/di_container.py - Dependency Injection")
            print(f"  ‚Ä¢ src/config/settings.py - –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print(f"\nüöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –≠—Ç–∞–ø 3: Domain —Å–ª–æ–π")
            return True
        else:
            print(f"\n‚ö†Ô∏è –≠–¢–ê–ü 2 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            print(f"üîç –ò–∑—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç stage2_core_creation_summary.json")
            print(f"üîÑ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–∞–ø")
            return False
    
    except KeyboardInterrupt:
        print(f"\n‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ Core —Å–ª–æ—è")
        return False


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)