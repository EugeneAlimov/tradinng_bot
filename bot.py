import logging
import signal
import sys
import time
from datetime import datetime
from typing import Dict, Any

from config import TradingConfig
from api_client import ExmoAPIClient
from risk_management import RiskManager
from position_manager import PositionManager
from analytics_system import TradingAnalytics
from adaptive_dca_strategy import AdaptiveDCAStrategy
from trailing_stop import TrailingStopManager
from pyramid_strategy import SmartPyramidStrategy
from advanced_trend_filter import AdvancedTrendFilter, TrendDirection

# üÜï –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from hybrid_strategy import HybridTradeOrchestrator
from rate_limiter import RateLimitedAPIClient
from improved_technical_indicators import ImprovedTechnicalIndicators

from services.api_service import APIService
from services.trade_validator import TradeValidator


class ImprovedTradingBot:
    """üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º"""

    def __init__(self):
        self.logger = None
        self.config = TradingConfig()
        self.setup_logging()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–µ–π
        if not self.config.API_KEY or not self.config.API_SECRET:
            self.logger.error("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.running = True
        self.start_time = time.time()
        self.cycle_count = 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.profitable_trades = 0
        self.error_count = 0
        self.consecutive_errors = 0
        self.last_successful_cycle = time.time()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.last_analytics_update = time.time()
        self.last_stats_log = time.time()
        self.analytics_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.stats_log_interval = 3600  # 1 —á–∞—Å

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        self.logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


    def _initialize_components(self):
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""

        self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –ë–∞–∑–æ–≤—ã–µ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        original_api = ExmoAPIClient(self.config)
        rate_limited_api = RateLimitedAPIClient(original_api)

        # üÜï –ù–æ–≤—ã–π API —Å–µ—Ä–≤–∏—Å
        self.api_service = APIService(rate_limited_api, self.config)
        self.api = rate_limited_api  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        # üÜï –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–¥–µ–ª–æ–∫
        self.trade_validator = TradeValidator(self.config)

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.risk_manager = RiskManager(self.config)
        self.position_manager = PositionManager(self.config, self.api_service)  # üîß –ü–µ—Ä–µ–¥–∞–µ–º api_service

        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        self.dca_strategy = AdaptiveDCAStrategy(
            self.config, self.api_service, self.risk_manager, self.position_manager  # üîß api_service
        )

        # üÜï –ó–∞–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤ DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if hasattr(self.dca_strategy, 'indicators'):
            self.dca_strategy.indicators = ImprovedTechnicalIndicators()

        self.pyramid_strategy = SmartPyramidStrategy(self.config, self.position_manager)
        self.trailing_stop = TrailingStopManager()

        # üÜï –ì–ª–∞–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ - —Ç–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        self.trade_orchestrator = HybridTradeOrchestrator(
            self.config, self.api_service, self.risk_manager, self.position_manager,  # üîß api_service
            self.pyramid_strategy, self.trailing_stop
        )

        self.analytics = TradingAnalytics()

        # üß† Trend Filter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–µ–¥–≤–µ–∂—å–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤
        if self.config.TREND_FILTER_ENABLED:
            self.trend_filter = AdvancedTrendFilter(self.config)
            self.logger.info("üß† Trend Filter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.trend_filter = None
            self.logger.warning("‚ö†Ô∏è Trend Filter –û–¢–ö–õ–Æ–ß–ï–ù - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!")

        self.pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"
        self.pair_settings = {}

        self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=getattr(logging, self.config.LOG_LEVEL),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.config.LOG_FILE),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)

    def signal_handler(self, signum, frame):
        """üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        self.shutdown()

    def initialize(self) -> bool:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
            if not self.api_service.check_connection():
                self.logger.error("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã
            pair_settings = self.api_service.get_pair_settings()
            if self.pair not in pair_settings:
                self.logger.error(f"‚ùå –ü–∞—Ä–∞ {self.pair} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            self.pair_settings = pair_settings[self.pair]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ API
            api_commission = float(self.pair_settings.get('commission_taker_percent', 0.3)) / 100
            if api_commission != self.config.AUTO_COMMISSION_RATE:
                self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é: {api_commission * 100:.1f}%")
                self.config.AUTO_COMMISSION_RATE = api_commission

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∑–∏—Ü–∏–π
            self.logger.info("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤...")
            try:
                positions = self.position_manager.load_positions_from_history(days_back=30)
                if positions:
                    for currency, position in positions.items():
                        self.logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è {currency}: {position.quantity:.6f} –ø–æ {position.avg_price:.8f}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            balances = self.api_service.get_balances()  # üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            balance_eur = balances.get(self.config.CURRENCY_2, 0)
            balance_doge = balances.get(self.config.CURRENCY_1, 0)

            self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_eur:.4f} EUR, {balance_doge:.6f} DOGE")

            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._log_initialization_settings()

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    def _log_initialization_settings(self):
        """üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.logger.info(f"üéØ –ù–ê–°–¢–†–û–ô–ö–ò –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ë–û–¢–ê:")
        self.logger.info(f"   –ü–∞—Ä–∞: {self.pair}")
        self.logger.info(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.config.MAX_POSITION_SIZE * 100:.0f}%")
        self.logger.info(f"   –ö–æ–º–∏—Å—Å–∏—è: {self.config.AUTO_COMMISSION_RATE * 100:.1f}%")

        self.logger.info(f"üéØ DCA –ù–ê–°–¢–†–û–ô–ö–ò:")
        self.logger.info(f"   –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–æ–∫: {self.dca_strategy.max_purchases}")
        self.logger.info(f"   –†–∞–∑–º–µ—Ä –ø–æ–∫—É–ø–∫–∏: {self.dca_strategy.bottom_purchase_size * 100:.0f}% –¥–µ–ø–æ–∑–∏—Ç–∞")
        self.logger.info(f"   –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è: {self.dca_strategy.stabilization_minutes * 60:.0f} —Å–µ–∫—É–Ω–¥")

        self.logger.info(f"üèóÔ∏è –ü–ò–†–ê–ú–ò–î–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        self.logger.info(f"   –£—Ä–æ–≤–Ω–µ–π: {len(self.pyramid_strategy.pyramid_levels)}")
        self.logger.info(f"   –ö—É–ª–¥–∞—É–Ω: {self.pyramid_strategy.cooldown_between_sells} —Å–µ–∫")

        self.logger.info(f"üéØ TRAILING STOP:")
        self.logger.info(f"   Trailing: {self.trailing_stop.trailing_percent * 100:.1f}%")
        self.logger.info(f"   –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {self.trailing_stop.activation_profit * 100:.1f}%")

        # üÜï –ù–æ–≤–æ–µ: Rate Limiting –∏ API Service —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        rate_stats = self.api.get_rate_limit_stats()
        self.logger.info(f"‚è±Ô∏è RATE LIMITING:")
        self.logger.info(
            f"   –õ–∏–º–∏—Ç—ã: {rate_stats['limits']['per_second']}/—Å–µ–∫, {rate_stats['limits']['per_minute']}/–º–∏–Ω")
        self.logger.info(f"   –¢–æ—Ä–≥–æ–≤—ã–µ: {rate_stats['limits']['trading_per_minute']}/–º–∏–Ω")

        # API Service —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cache_stats = self.api_service.get_cache_stats()
        self.logger.info(f"üåê API SERVICE:")
        self.logger.info(f"   –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤: {cache_stats['balance_cache_size']} –∑–∞–ø–∏—Å–µ–π")
        self.logger.info(f"   –ö—ç—à —Ü–µ–Ω: {cache_stats['price_cache_size']} –∑–∞–ø–∏—Å–µ–π")

    def execute_trade_cycle(self):
        """üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
        cycle_start = time.time()

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self._collect_market_data()
            if not market_data:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            emergency_stop, emergency_reason = self.risk_manager.emergency_stop_check(market_data['balance'])
            if emergency_stop:
                self.logger.error(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {emergency_reason}")
                self._cancel_all_orders("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                self.running = False
                return

            # üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
            cycle_result = self.trade_orchestrator.execute_trade_cycle(market_data)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._process_cycle_result(cycle_result)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cycle_time = time.time() - cycle_start
            self.last_successful_cycle = time.time()
            self.consecutive_errors = 0

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            self._handle_periodic_tasks()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            self.error_count += 1
            self.consecutive_errors += 1

            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if self.consecutive_errors >= 5:
                self.logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors}")
                self.running = False

    def _collect_market_data(self) -> Dict[str, Any]:
        """üìä –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–µ–Ω–¥–∞"""
        try:
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = self.api_service.get_current_price(self.pair)
            if current_price == 0:
                return None

            # –ë–∞–ª–∞–Ω—Å
            balances = self.api_service.get_balances()
            balance_eur = balances.get(self.config.CURRENCY_2, 0)
            balance_doge = balances.get(self.config.CURRENCY_1, 0)

            # –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            accurate_data = self.position_manager.get_accurate_position_data(self.config.CURRENCY_1)

            # üß† –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            trend_analysis = None
            if self.trend_filter:
                trend_analysis = self.trend_filter.analyze_trend(current_price)

                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –∫–∞–∂–¥—ã–µ 50 —Ü–∏–∫–ª–æ–≤
                if self.cycle_count % 50 == 0:
                    self.logger.info(f"üß† Trend: {trend_analysis.direction.value}, "
                                     f"4h: {trend_analysis.trend_4h * 100:+.1f}%, "
                                     f"DCA: {'‚úÖ' if trend_analysis.should_allow_dca else 'üö´'}")

            return {
                'current_price': current_price,
                'balance': balance_eur,
                'doge_balance': balance_doge,
                'accurate_position': accurate_data,
                'trend_analysis': trend_analysis,  # üß† –ù–û–í–û–ï –ø–æ–ª–µ
                'timestamp': time.time()
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def _process_cycle_result(self, cycle_result: Dict[str, Any]):
        """üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""

        if not cycle_result.get('success'):
            self.logger.warning(f"‚ö†Ô∏è –¶–∏–∫–ª –Ω–µ—É—Å–ø–µ—à–µ–Ω: {cycle_result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}")
            return

        action = cycle_result.get('action', 'none')
        reason = cycle_result.get('reason', '')
        trade_executed = cycle_result.get('trade_executed', False)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action != 'none':
            action_emoji = {
                'pyramid_sell': 'üèóÔ∏è',
                'trailing_sell': 'üéØ',
                'dca_initial_buy': 'üõí',
                'dca_bottom_buy': 'ü©π',
                'hold': 'üíé',
                'wait': '‚è∏Ô∏è'
            }
            emoji = action_emoji.get(action, 'üîÑ')
            self.logger.info(f"{emoji} –î–µ–π—Å—Ç–≤–∏–µ: {action} - {reason}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–¥–µ–ª–æ–∫
        if trade_executed:
            self.total_trades += 1
            self.profitable_trades += 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            if 'quantity' in cycle_result and 'price' in cycle_result:
                trade_info = {
                    'type': 'buy' if 'buy' in action else 'sell',
                    'quantity': cycle_result['quantity'],
                    'price': cycle_result['price']
                }
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç P&L –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ risk_manager

    def _handle_periodic_tasks(self):
        """üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        current_time = time.time()

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if current_time - self.last_analytics_update > self.analytics_interval:
            try:
                self.analytics.collect_runtime_stats(self)
                self.last_analytics_update = current_time
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        if current_time - self.last_stats_log > self.stats_log_interval:
            try:
                self._log_hourly_stats()
                self.last_stats_log = current_time
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def _log_hourly_stats(self):
        """üìä –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        uptime = (time.time() - self.start_time) / 3600
        success_rate = (self.profitable_trades / max(1, self.total_trades)) * 100

        self.logger.info("üìä –ß–ê–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.1f} —á–∞—Å–æ–≤")
        self.logger.info(f"   üîÑ –¶–∏–∫–ª–æ–≤: {self.cycle_count}")
        self.logger.info(f"   üìà –°–¥–µ–ª–æ–∫: {self.total_trades}")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        self.logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {self.error_count}")

        # üÜï –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting
        self.api.log_rate_limit_stats()

        # üÜï –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API Service
        cache_stats = self.api_service.get_cache_stats()
        self.logger.info(f"üåê API SERVICE –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.logger.info(f"   üí∞ –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤: {cache_stats['balance_cache_size']} –∑–∞–ø–∏—Å–µ–π")
        self.logger.info(f"   üí± –ö—ç—à —Ü–µ–Ω: {cache_stats['price_cache_size']} –∑–∞–ø–∏—Å–µ–π")
        self.logger.info(f"   ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä: {'–ö–≠–®–ò–†–û–í–ê–ù–´' if cache_stats['pair_settings_cached'] else '–ù–ï –ö–≠–®–ò–†–û–í–ê–ù–´'}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        dca_status = self.dca_strategy.get_status()
        if dca_status['active']:
            self.logger.info(f"üéØ DCA –∞–∫—Ç–∏–≤–Ω–∞: {dca_status['total_purchases']} –ø–æ–∫—É–ø–æ–∫")

        trailing_status = self.trailing_stop.get_status(self.config.CURRENCY_1)
        if trailing_status['active']:
            self.logger.info(f"üéØ Trailing –∞–∫—Ç–∏–≤–µ–Ω: —Å—Ç–∞—Ç—É—Å {trailing_status['status']}")

    def _cancel_all_orders(self, reason: str = ""):
        """‚ùå –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            open_orders = self.api_service.get_open_orders()  # üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º api_service
            pair_orders = open_orders.get(self.pair, [])

            if pair_orders:
                self.logger.info(f"‚ùå –û—Ç–º–µ–Ω—è–µ–º {len(pair_orders)} –æ—Ä–¥–µ—Ä–æ–≤. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

                for order in pair_orders:
                    try:
                        self.api_service.cancel_order(int(order['order_id']))  # üîß api_service
                        self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order['order_id']} –æ—Ç–º–µ–Ω–µ–Ω")
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order['order_id']}: {e}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")

    def _calculate_adaptive_interval(self) -> float:
        """‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""

        try:
            # –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º
            mode = 'normal'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            if self.consecutive_errors >= 3:
                mode = 'emergency'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º trailing stop
            trailing_status = self.trailing_stop.get_status(self.config.CURRENCY_1)
            if trailing_status.get('active', False):
                if trailing_status['status'] == 'trailing':
                    mode = 'trailing'
                else:
                    mode = 'waiting'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            if mode == 'normal':
                balance_doge = self.api_service.get_balance(self.config.CURRENCY_1)  # üîß api_service

                if balance_doge > 0:
                    mode = 'position'

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            interval = self.config.ADAPTIVE_INTERVALS.get(mode, self.config.UPDATE_INTERVAL)

            # üÜï –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É rate limiter
            rate_stats = self.api.get_rate_limit_stats()
            load_percent = rate_stats['load_percentage']['per_minute']

            if load_percent > 80:
                # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                interval *= 1.5
                self.logger.info(
                    f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ API ({load_percent:.0f}%), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {interval:.1f}—Å")

            return interval

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
            return self.config.UPDATE_INTERVAL

    def run(self):
        """üöÄ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if not self.initialize():
            self.logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return

        self.logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        while self.running:
            try:
                self.cycle_count += 1

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 50-–π —Ü–∏–∫–ª
                if self.cycle_count % 50 == 0:
                    self.logger.info(f"üîÑ –¶–∏–∫–ª #{self.cycle_count}")

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                self.execute_trade_cycle()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if self.error_count >= 10:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
                    self.logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {self.error_count}")
                    break

                # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                sleep_interval = self._calculate_adaptive_interval()
                time.sleep(sleep_interval)

            except KeyboardInterrupt:
                self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break

            except Exception as e:
                self.error_count += 1
                self.consecutive_errors += 1
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")

                if self.consecutive_errors >= 5:
                    self.logger.error(f"üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors}")
                    break

                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                time.sleep(min(60, self.consecutive_errors * 10))

        self.shutdown()

    def shutdown(self):
        """üîö –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        try:
            uptime = time.time() - self.start_time
            success_rate = (self.profitable_trades / max(1, self.total_trades)) * 100

            self.logger.info("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime / 3600:.1f} —á–∞—Å–æ–≤")
            self.logger.info(f"   üîÑ –¶–∏–∫–ª–æ–≤: {self.cycle_count}")
            self.logger.info(f"   üìà –°–¥–µ–ª–æ–∫: {self.total_trades}")
            self.logger.info(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.profitable_trades}")
            self.logger.info(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            self.logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {self.error_count}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            dca_status = self.dca_strategy.get_status()
            if dca_status['active']:
                self.logger.info("üéØ –ê–ö–¢–ò–í–ù–ê–Ø DCA –ü–û–ó–ò–¶–ò–Ø:")
                self.logger.info(f"   –ü–æ–∫—É–ø–æ–∫: {dca_status['total_purchases']}")
                self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {dca_status['total_quantity']:.4f}")
                self.logger.info(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {dca_status['total_invested']:.4f} EUR")

            trailing_status = self.trailing_stop.get_status(self.config.CURRENCY_1)
            if trailing_status['active']:
                self.logger.info("üéØ –ê–ö–¢–ò–í–ù–ê–Ø TRAILING –ü–û–ó–ò–¶–ò–Ø:")
                self.logger.info(f"   –°—Ç–∞—Ç—É—Å: {trailing_status['status']}")
                self.logger.info(f"   –û—Å—Ç–∞–µ—Ç—Å—è: {trailing_status['remaining_quantity']:.4f}")

            # üÜï –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiting –∏ API service
            self.logger.info("‚è±Ô∏è –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê RATE LIMITING:")
            self.api.log_rate_limit_stats()

            cache_stats = self.api_service.get_cache_stats()
            self.logger.info("üåê –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê API SERVICE:")
            self.logger.info(f"   üí∞ –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤: {cache_stats['balance_cache_size']} –∑–∞–ø–∏—Å–µ–π")
            self.logger.info(f"   üí± –ö—ç—à —Ü–µ–Ω: {cache_stats['price_cache_size']} –∑–∞–ø–∏—Å–µ–π")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            try:
                final_stats = self.analytics.get_summary_stats(days_back=14)
                if final_stats.get('recommendations'):
                    self.logger.info("üí° –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                    for rec in final_stats['recommendations']:
                        self.logger.info(f"   {rec}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ
            self._cancel_all_orders("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            self.position_manager.save_positions_to_file()
            self.api.close()

            self.logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    def get_system_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            uptime = time.time() - self.start_time
            success_rate = (self.profitable_trades / max(1, self.total_trades)) * 100

            return {
                'timestamp': datetime.now().isoformat(),
                'uptime_hours': uptime / 3600,
                'cycle_count': self.cycle_count,
                'total_trades': self.total_trades,
                'profitable_trades': self.profitable_trades,
                'success_rate': success_rate,
                'error_count': self.error_count,
                'consecutive_errors': self.consecutive_errors,
                'is_running': self.running,

                # –°—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                'dca_status': self.dca_strategy.get_status(),
                'trailing_status': self.trailing_stop.get_status(self.config.CURRENCY_1),
                'orchestrator_status': self.trade_orchestrator.get_orchestrator_status(),

                # üÜï Rate limiting —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                'rate_limit_stats': self.api.get_rate_limit_stats(),

                # üÜï API Service —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                'api_service_stats': self.api_service.get_cache_stats(),

                # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
                'risk_metrics': self.risk_manager.get_risk_metrics()
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {'error': str(e)}


if __name__ == "__main__":
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢ –° –ù–û–í–´–ú–ò –°–ï–†–í–ò–°–ê–ú–ò")
    print("=" * 60)
    print("–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚úÖ APIService - –µ–¥–∏–Ω—ã–π API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("‚úÖ TradeValidator - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
    print("‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("=" * 60)

    bot = ImprovedTradingBot()
    bot.run()
