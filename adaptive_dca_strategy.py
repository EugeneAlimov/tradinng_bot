# adaptive_dca_strategy_updated.py - DCA —Å —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–º –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –¥–Ω–∞
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from datetime import datetime
import logging
import time


@dataclass
class BottomPurchase:
    """–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –¥–Ω–µ"""
    price: float
    quantity: float
    timestamp: datetime
    bottom_confirmed_at: datetime


class AdaptiveDCAStrategy:
    """üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è DCA —Å —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–Ω–∞ (30 —Å–µ–∫—É–Ω–¥!)"""

    def __init__(self, config, api_client, risk_manager, position_manager):
        self.config = config
        self.api = api_client
        self.risk_manager = risk_manager
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.max_position_percent = 0.56  # –ú–∞–∫—Å–∏–º—É–º 56% –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ DOGE
        self.bottom_purchase_size = 0.08  # 8% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –Ω–∞ –¥–Ω–µ
        self.max_purchases = 7  # –ú–∞–∫—Å–∏–º—É–º 7 –ø–æ–∫—É–ø–æ–∫ (7*8% = 56%)

        # ‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–∞
        self.stabilization_minutes = 0.5  # 30 –°–ï–ö–£–ù–î! (–±—ã–ª–æ 15 –º–∏–Ω—É—Ç)
        self.bounce_threshold = 0.0003  # 0.03% –º–∏–∫—Ä–æ-–æ—Ç—Å–∫–æ–∫ (–±—ã–ª–æ 0.3%)
        self.max_range_percent = 0.002  # 0.2% –¥–∏–∞–ø–∞–∑–æ–Ω (–±—ã–ª–æ 1%)
        self.min_time_between_bottoms = 180  # 3 –º–∏–Ω—É—Ç—ã –∫—É–ª–¥–∞—É–Ω (–±—ã–ª–æ 30 –º–∏–Ω)

        # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.min_drop_for_dca = 0.015  # –ú–∏–Ω–∏–º—É–º 1.5% –ø–∞–¥–µ–Ω–∏—è (–±—ã–ª–æ 2%)
        self.price_action_weight = 0.8  # 80% –≤–µ—Å–∞ –Ω–∞ price action –∞–Ω–∞–ª–∏–∑
        self.volume_confirmation = False  # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä–µ–º–æ–≤
        self.micro_bounce_detection = True  # –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –º–∏–∫—Ä–æ-–æ—Ç—Å–∫–æ–∫–æ–≤

        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.first_entry_price: Optional[float] = None
        self.purchases: List[BottomPurchase] = []
        self.total_invested = 0.0
        self.total_quantity = 0.0

        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω–∞
        self.price_history = []  # [(timestamp, price)]
        self.last_bottom_time = None

        self.logger.info("‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:")
        self.logger.info(f"   ‚è∞ –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è: {self.stabilization_minutes * 60:.0f} –°–ï–ö–£–ù–î!")
        self.logger.info(f"   üìà –û—Ç—Å–∫–æ–∫: {self.bounce_threshold * 100:.3f}%")
        self.logger.info(f"   üìè –î–∏–∞–ø–∞–∑–æ–Ω: {self.max_range_percent * 100:.2f}%")
        self.logger.info(f"   üïê –ö—É–ª–¥–∞—É–Ω: {self.min_time_between_bottoms // 60} –º–∏–Ω—É—Ç")
        self.logger.info(f"   üéØ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–æ–∫: {self.max_purchases}")

    def should_buy_initial(self, market_data: Dict) -> Tuple[bool, float, float]:
        """–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É"""
        if self.first_entry_price is not None:
            return False, 0.0, 0.0  # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è

        current_price = market_data.get('current_price', 0.0)
        balance = market_data.get('balance', 0.0)

        if self._is_good_initial_entry(current_price, balance):
            quantity = balance * self.bottom_purchase_size / current_price
            buy_price = current_price * 0.999

            self.logger.info(f"üéØ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê:")
            self.logger.info(f"   –¶–µ–Ω–∞: {buy_price:.8f}")
            self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.4f}")

            return True, quantity, buy_price

        return False, 0.0, 0.0

    def should_buy_on_bottom(self, market_data: Dict) -> Tuple[bool, float, float]:
        """‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –ø–æ–∫—É–ø–∫–∞ –Ω–∞ –¥–Ω–µ (30 —Å–µ–∫—É–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è!)"""
        if self.first_entry_price is None:
            return False, 0.0, 0.0  # –ù–µ—Ç –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏

        current_price = market_data.get('current_price', 0.0)
        balance = market_data.get('balance', 0.0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if not self._can_make_bottom_purchase(balance):
            return False, 0.0, 0.0

        # ‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–∞
        if not self._is_confirmed_bottom_ultra_fast(current_price):
            return False, 0.0, 0.0

        # –î–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –ø–æ–∫—É–ø–∞–µ–º!
        quantity = balance * self.bottom_purchase_size / current_price
        buy_price = current_price * 0.9995  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è

        drop_from_first = (self.first_entry_price - current_price) / self.first_entry_price * 100

        self.logger.info(f"‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –ü–û–ö–£–ü–ö–ê –ù–ê –î–ù–ï #{len(self.purchases) + 1}:")
        self.logger.info(f"   –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞: {self.first_entry_price:.8f}")
        self.logger.info(f"   –¶–µ–Ω–∞ –¥–Ω–∞: {buy_price:.8f}")
        self.logger.info(f"   –ü–∞–¥–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–π: {drop_from_first:.1f}%")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.4f}")
        self.logger.info(f"   –í—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {self.stabilization_minutes * 60:.0f} —Å–µ–∫—É–Ω–¥")

        return True, quantity, buy_price

    def _is_confirmed_bottom_ultra_fast(self, current_price: float) -> bool:
        """‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–Ω–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥"""

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        current_time = time.time()
        self.price_history.append((current_time, current_price))

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        two_hours_ago = current_time - 7200
        self.price_history = [(t, p) for t, p in self.price_history if t > two_hours_ago]

        # ‚ö° –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –¥–∞–Ω–Ω—ã—Ö
        stabilization_seconds = int(self.stabilization_minutes * 60)

        if len(self.price_history) < stabilization_seconds:
            self.logger.debug(f"‚è≥ –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {len(self.price_history)}/{stabilization_seconds} —Å–µ–∫—É–Ω–¥")
            return False

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥!)
        analysis_period = self.price_history[-stabilization_seconds:]
        analysis_prices = [p[1] for p in analysis_period]

        if len(analysis_prices) < stabilization_seconds:
            return False

        return self._ultra_fast_bottom_analysis(current_price, analysis_prices)

    def _ultra_fast_bottom_analysis(self, current_price: float, prices: List[float]) -> bool:
        """üéØ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–Ω–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥ —Å price action"""

        # 1. üìè –°–¢–†–û–ì–ò–ô –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        min_price = min(prices)
        max_price = max(prices)
        price_range = (max_price - min_price) / min_price

        if price_range > self.max_range_percent:
            self.logger.debug(f"üîß –î–∏–∞–ø–∞–∑–æ–Ω {price_range * 100:.3f}% > {self.max_range_percent * 100:.2f}%")
            return False

        # 2. üìà –ú–ò–ö–†–û-–û–¢–°–ö–û–ö (–¥–∞–∂–µ 0.03% –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!)
        recent_prices = prices[-5:] if len(prices) >= 5 else prices[-len(prices) // 2:]
        if len(recent_prices) == 0:
            return False

        recent_avg = sum(recent_prices) / len(recent_prices)
        micro_bounce = (recent_avg - min_price) / min_price

        if micro_bounce < self.bounce_threshold:
            self.logger.debug(f"üîß –û—Ç—Å–∫–æ–∫ {micro_bounce * 100:.4f}% < {self.bounce_threshold * 100:.3f}%")
            return False

        # 3. üéØ PRICE ACTION –∞–Ω–∞–ª–∏–∑ (–∫–ª—é—á–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä!)
        price_action_score = self._analyze_price_action_ultra_fast(prices, min_price)

        if price_action_score < 0.6:  # 60% confidence –º–∏–Ω–∏–º—É–º
            self.logger.debug(f"üîß Price action —Å–ª–∞–±—ã–π: {price_action_score:.2f}")
            return False

        # 4. üöÄ –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–û–î–û–õ–ñ–ê–Æ–©–ï–ï–°–Ø –ü–ê–î–ï–ù–ò–ï
        if len(prices) >= 4:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ –ø–µ—Ä–≤–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏
            first_quarter = prices[:len(prices) // 4]
            last_quarter = prices[-len(prices) // 4:]

            if len(first_quarter) > 0 and len(last_quarter) > 0:
                first_avg = sum(first_quarter) / len(first_quarter)
                last_avg = sum(last_quarter) / len(last_quarter)

                # –ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–µ—Ç–≤–µ—Ä—Ç–∏ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∞–¥–∞—Ç—å - –ù–ï –ø–æ–∫—É–ø–∞–µ–º
                if last_avg < first_avg * 0.9985:  # –ü–∞–¥–µ–Ω–∏–µ >0.15% –≤–Ω—É—Ç—Ä–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                    self.logger.debug(f"üîß –ü—Ä–æ–¥–æ–ª–∂–∞—é—â–µ–µ—Å—è –ø–∞–¥–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–æ–¥–∞")
                    return False

        # 5. üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô —Ñ–∏–ª—å—Ç—Ä: –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –æ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
        if len(self.price_history) >= 60:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–∏–Ω—É—Ç—É —ç–∫—Å—Ç—Ä–∞
            hour_prices = [p[1] for p in self.price_history[-60:]]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞ —ç–∫—Å—Ç—Ä–∞
            if hour_prices:
                recent_high = max(hour_prices)
                total_drop = (recent_high - min_price) / recent_high

                if total_drop < self.min_drop_for_dca:
                    self.logger.debug(f"üîß –ü–∞–¥–µ–Ω–∏–µ {total_drop * 100:.1f}% < {self.min_drop_for_dca * 100:.1f}%")
                    return False

        # ‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!
        confidence = price_action_score * 100

        self.logger.info(f"‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ï –î–ù–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!")
        self.logger.info(f"   ‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {len(prices)} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"   üìè –î–∏–∞–ø–∞–∑–æ–Ω: {price_range * 100:.3f}%")
        self.logger.info(f"   üìà –ú–∏–∫—Ä–æ-–æ—Ç—Å–∫–æ–∫: {micro_bounce * 100:.4f}%")
        self.logger.info(f"   üéØ Price action: {confidence:.0f}%")
        self.logger.info(f"   üíé –¶–µ–Ω–∞ –¥–Ω–∞: {min_price:.8f}")

        return True

    def _analyze_price_action_ultra_fast(self, prices: List[float], min_price: float) -> float:
        """üéØ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ price action –∑–∞ 30 —Å–µ–∫—É–Ω–¥"""

        if len(prices) < 4:
            return 0.3  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏–∑–∫–∏–π —Å–∫–æ—Ä

        score = 0.0

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ "V" –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        min_index = prices.index(min_price)

        # –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ (–µ—Å—Ç—å –æ—Ç—Å–∫–æ–∫)
        position_ratio = min_index / len(prices)
        if 0.2 <= position_ratio <= 0.8:  # –ú–∏–Ω–∏–º—É–º –≤ "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º" –º–µ—Å—Ç–µ
            score += 0.3  # +30% –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞ —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç
        if min_index < len(prices) - 2:
            prices_after_min = prices[min_index + 1:]
            avg_after = sum(prices_after_min) / len(prices_after_min)

            if avg_after > min_price * 1.0001:  # –•–æ—Ç—è –±—ã 0.01% —Ä–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞
                score += 0.3  # +30% –∑–∞ —Ä–æ—Å—Ç –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤)
        last_portion = prices[-len(prices) // 3:] if len(prices) >= 6 else prices[-2:]
        if len(last_portion) > 1:
            last_portion_min = min(last_portion)
            # –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –Ω–µ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 0.01% –Ω–∏–∂–µ
            if last_portion_min >= min_price * 0.9999:
                score += 0.2  # +20% –∑–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–æ –º–∏–Ω–∏–º—É–º–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏—Å—Ö–æ–¥—è—â–∏–π)
        if len(prices) >= 6:
            first_half = prices[:len(prices) // 2]

            if len(first_half) >= 2:
                first_half_trend = (first_half[-1] - first_half[0]) / first_half[0]
                if first_half_trend < -0.001:  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ >0.1%
                    score += 0.2  # +20% –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –¥–æ –º–∏–Ω–∏–º—É–º–∞

        return min(1.0, score)  # –ú–∞–∫—Å–∏–º—É–º 100%

    def should_sell(self, market_data: Dict[str, Any], position: Dict[str, Any]) -> Tuple[bool, float, float]:
        """üíé –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        current_price = market_data.get('current_price', 0.0)
        quantity = position.get('quantity', 0.0)

        if not quantity:
            return False, 0.0, 0.0

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        real_position = self.position_manager.get_position(self.config.CURRENCY_1)
        if not real_position:
            return False, 0.0, 0.0

        position_price = real_position.avg_price
        quantity = min(quantity, real_position.quantity)
        potential_profit = (current_price - position_price) / position_price

        self.logger.info(f"üíé –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏:")
        self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {position_price:.8f}")
        self.logger.info(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")
        self.logger.info(f"   –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit * 100:+.2f}%")

        # üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–¢–û–ü-–õ–û–°–°
        if potential_profit <= -self.config.STOP_LOSS_PERCENT:
            self.logger.error(f"üö® –°–¢–û–ü-–õ–û–°–°! –£–±—ã—Ç–æ–∫: {potential_profit * 100:.2f}%")
            sell_price = current_price * 0.999
            return True, quantity, sell_price

        # üö´ –ù–ï –ü–†–û–î–ê–ï–ú –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if potential_profit < self.config.MIN_PROFIT_TO_SELL:
            self.logger.info(
                f"‚è∏Ô∏è  –î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é: –ø—Ä–∏–±—ã–ª—å {potential_profit * 100:.2f}% < –ø–æ—Ä–æ–≥–∞ {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")
            return False, 0.0, 0.0

        # üéØ –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∏–±—ã–ª–∏ –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if potential_profit >= 0.015:  # 1.5% –∏ –≤—ã—à–µ - –ø—Ä–æ–¥–∞–µ–º —Å—Ä–∞–∑—É
            self.logger.info(f"üíé –ë–´–°–¢–†–ê–Ø –ü–†–û–î–ê–ñ–ê! –•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit * 100:.2f}%")
            sell_price = current_price * 0.9998

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            is_profitable, profit_reason = self._validate_trade_profitability('sell', sell_price, quantity,
                                                                              position_price)
            if is_profitable:
                return True, quantity, sell_price
            else:
                self.logger.warning(f"üö´ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {profit_reason}")

        # üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏
        analysis = self._analyze_market_conditions(current_price)
        if not analysis['ready']:
            if potential_profit >= 0.013:
                self.logger.info(f"üíé –ü–†–û–î–ê–ñ–ê –ë–ï–ó –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê: {potential_profit * 100:.2f}%")
                sell_price = current_price * 0.9998
                return True, quantity, sell_price
            return False, 0.0, 0.0

        # üéØ –û–°–õ–ê–ë–õ–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏
        sell_conditions = {
            'sufficient_profit': potential_profit >= self.config.MIN_PROFIT_TO_SELL,
            'not_crashing': analysis['rsi'] > 25,
            'reasonable_bb_position': analysis['bb_position'] > 0.3,
            'not_deep_red': current_price > analysis['ema'] * 0.99,
        }

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è
        met_conditions = []
        for condition_name, is_met in sell_conditions.items():
            status = "‚úÖ" if is_met else "‚ùå"
            self.logger.info(f"   {status} {condition_name}")
            if is_met:
                met_conditions.append(condition_name)

        conditions_met = len(met_conditions)

        # üéØ –¢—Ä–µ–±—É–µ–º —Ç–æ–ª—å–∫–æ 2 –∏–∑ 4 —É—Å–ª–æ–≤–∏–π
        if conditions_met >= 2:
            spread = self.config.MIN_SPREAD
            sell_price = current_price * (1 + spread)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            is_profitable, profit_reason = self._validate_trade_profitability('sell', sell_price, quantity,
                                                                              position_price)
            if is_profitable:
                final_profit = (sell_price - position_price) / position_price
                self.logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–ò!")
                self.logger.info(f"   –£—Å–ª–æ–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {conditions_met}/4: {', '.join(met_conditions)}")
                self.logger.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {final_profit * 100:+.2f}%")
                return True, quantity, sell_price
            else:
                self.logger.warning(f"üö´ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {profit_reason}")

        # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        self.logger.info(f"‚è∏Ô∏è  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {conditions_met}/4")
        self.logger.info(f"üíé –î–µ—Ä–∂–∏–º –ø–æ–∑–∏—Ü–∏—é, –∂–¥–µ–º –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π –∏–ª–∏ —Ä–æ—Å—Ç–∞ –¥–æ 1.5%")

        return False, 0.0, 0.0

    def _can_make_bottom_purchase(self, balance: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –¥–Ω–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫
        if len(self.purchases) >= self.max_purchases - 1:
            self.logger.info(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –¥–Ω–µ: {self.max_purchases}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞
        total_position_value = self.total_invested + (balance * self.bottom_purchase_size)
        total_balance = balance + self.total_invested

        if total_position_value / total_balance > self.max_position_percent:
            self.logger.info(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏: {self.max_position_percent * 100}%")
            return False

        # ‚ö° –£–°–ö–û–†–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏ (3 –º–∏–Ω—É—Ç—ã –≤–º–µ—Å—Ç–æ 30)
        if self.last_bottom_time:
            time_since_last = (datetime.now() - self.last_bottom_time).total_seconds()
            if time_since_last < self.min_time_between_bottoms:
                remaining = (self.min_time_between_bottoms - time_since_last) / 60
                self.logger.info(f"‚è∞ –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏: {remaining:.0f} –º–∏–Ω")
                return False

        return True

    def _is_good_initial_entry(self, current_price: float, balance: float) -> bool:
        """üêï DOGE-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥"""
        self.price_history.append((time.time(), current_price))

        if len(self.price_history) < 5:  # –ï—â–µ –±—ã—Å—Ç—Ä–µ–µ: 5 —Ç–æ—á–µ–∫ –≤–º–µ—Å—Ç–æ 10
            return False

        # üöÄ –ï—â–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è DOGE
        recent_prices = [p[1] for p in self.price_history[-15:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥
        if len(recent_prices) >= 10:
            recent_high = max(recent_prices)
            current_drop = (recent_high - current_price) / recent_high

            # üéØ –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ 1% –∑–∞ 15 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 1.5% –∑–∞ 30 –º–∏–Ω—É—Ç)
            if current_drop >= 0.01:
                self.logger.info(f"üéØ –ü–ï–†–í–´–ô –í–•–û–î: –ø–∞–¥–µ–Ω–∏–µ {current_drop * 100:.1f}% –∑–∞ 15 —Å–µ–∫")
                return True

        # üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: —Ä–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ 5 —Å–µ–∫—É–Ω–¥
        if len(self.price_history) >= 5:
            five_sec_ago_price = self.price_history[-5][1]
            quick_drop = (five_sec_ago_price - current_price) / five_sec_ago_price

            if quick_drop >= 0.005:  # 0.5% –∑–∞ 5 —Å–µ–∫—É–Ω–¥
                self.logger.info(f"üöÄ –ú–ì–ù–û–í–ï–ù–ù–´–ô –í–•–û–î: –ø–∞–¥–µ–Ω–∏–µ {quick_drop * 100:.1f}% –∑–∞ 5 —Å–µ–∫")
                return True

        return False

    def _analyze_market_conditions(self, current_price: float) -> Dict[str, Any]:
        """üìä –û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π DCA"""
        if len(self.price_history) < 10:  # –°–Ω–∏–∂–µ–Ω–æ —Å 15
            return {
                'ready': False,
                'reason': f'–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ: {len(self.price_history)}/10',
                'data_points': len(self.price_history)
            }

        recent_prices = [p[1] for p in self.price_history[-20:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç–æ—á–µ–∫

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        sma = sum(recent_prices) / len(recent_prices)
        ema = recent_prices[-1]  # –£–ø—Ä–æ—â–∞–µ–º EMA –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π RSI
        changes = []
        for i in range(1, len(recent_prices)):
            changes.append(recent_prices[i] - recent_prices[i - 1])

        if len(changes) > 0:
            gains = [c for c in changes if c > 0]
            losses = [-c for c in changes if c < 0]
            avg_gain = sum(gains) / len(gains) if gains else 0.001
            avg_loss = sum(losses) / len(losses) if losses else 0.001
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
        else:
            rsi = 50

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ Bollinger Bands
        std_dev = (sum([(p - sma) ** 2 for p in recent_prices]) / len(recent_prices)) ** 0.5
        bb_upper = sma + (std_dev * 2)
        bb_lower = sma - (std_dev * 2)
        bb_position = (current_price - bb_lower) / (bb_upper - bb_lower) if bb_upper != bb_lower else 0.5

        return {
            'ready': True,
            'current_price': current_price,
            'sma_short': sma,
            'ema': ema,
            'rsi': rsi,
            'bb_upper': bb_upper,
            'bb_middle': sma,
            'bb_lower': bb_lower,
            'bb_position': bb_position,
            'data_points': len(recent_prices)
        }

    def _validate_trade_profitability(self, order_type: str, price: float, quantity: float,
                                      position_price: float = None) -> Tuple[bool, str]:
        """üí∞ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""
        commission_cost = 0.006  # 0.6% —Ç—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ

        if order_type == 'buy':
            return True, "–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"

        elif order_type == 'sell' and position_price:
            profit_percent = (price - position_price) / position_price
            profit_after_commission = profit_percent - commission_cost

            if profit_percent < self.config.MIN_PROFIT_TO_SELL:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent * 100:.2f}% < {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%"

            if profit_after_commission < 0:
                return False, f"–£–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: {profit_after_commission * 100:.2f}%"

            return True, f"–ü—Ä–∏–±—ã–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {profit_after_commission * 100:.2f}%"

        return True, "OK"

    def on_purchase_executed(self, price: float, quantity: float, is_initial: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
        if is_initial:
            self.first_entry_price = price
            self.total_quantity = quantity
            self.total_invested = price * quantity

            self.logger.info(f"üéØ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞:")
            self.logger.info(f"   –¶–µ–Ω–∞: {price:.8f}")
            self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.4f}")
            self.logger.info(f"   –¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏: {price * 1.007:.8f}")
        else:
            # –ü–æ–∫—É–ø–∫–∞ –Ω–∞ –¥–Ω–µ
            purchase = BottomPurchase(
                price=price,
                quantity=quantity,
                timestamp=datetime.now(),
                bottom_confirmed_at=datetime.now()
            )
            self.purchases.append(purchase)

            self.total_quantity += quantity
            self.total_invested += price * quantity
            self.last_bottom_time = datetime.now()

            avg_price = self.total_invested / self.total_quantity

            self.logger.info(f"‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø –ø–æ–∫—É–ø–∫–∞ –Ω–∞ –¥–Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞:")
            self.logger.info(f"   –ü–æ–∫—É–ø–∫–∞ #{len(self.purchases)}")
            self.logger.info(f"   –¶–µ–Ω–∞: {price:.8f}")
            self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.4f}")
            self.logger.info(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.total_quantity:.4f}")
            self.logger.info(f"   –ù–æ–≤–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.8f}")

    def on_position_closed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        total_purchases = len(self.purchases) + 1

        self.logger.info(f"üéØ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê:")
        self.logger.info(f"   –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}")
        if self.purchases:
            duration = datetime.now() - self.purchases[0].timestamp
            self.logger.info(f"   –ü–µ—Ä–∏–æ–¥: {duration.total_seconds() / 60:.0f} –º–∏–Ω—É—Ç")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.first_entry_price = None
        self.purchases = []
        self.total_invested = 0.0
        self.total_quantity = 0.0
        self.last_bottom_time = None

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.first_entry_price is None:
            return {'active': False}

        avg_price = self.total_invested / self.total_quantity if self.total_quantity > 0 else 0
        target_price = self.first_entry_price * 1.007

        return {
            'active': True,
            'first_entry_price': self.first_entry_price,
            'target_sell_price': target_price,
            'total_purchases': len(self.purchases) + 1,
            'total_quantity': self.total_quantity,
            'total_invested': self.total_invested,
            'avg_price': avg_price,
            'remaining_purchases': self.max_purchases - len(self.purchases) - 1,
            'can_buy_more': len(self.purchases) < self.max_purchases - 1,
            'ultra_fast_mode': True,
            'stabilization_seconds': int(self.stabilization_minutes * 60),
            'last_bottom_time': self.last_bottom_time.isoformat() if self.last_bottom_time else None
        }

    def update_price_history(self, current_price: float):
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"""
        current_time = time.time()
        self.price_history.append((current_time, current_price))

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        thirty_min_ago = current_time - 1800
        self.price_history = [(t, p) for t, p in self.price_history if t > thirty_min_ago]

    def get_debug_info(self) -> Dict:
        """üîç –ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        if len(self.price_history) < 5:
            return {'status': 'insufficient_data', 'points': len(self.price_history)}

        recent_prices = [p[1] for p in self.price_history[-30:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥

        return {
            'price_history_points': len(self.price_history),
            'recent_price_range': {
                'min': min(recent_prices) if recent_prices else 0,
                'max': max(recent_prices) if recent_prices else 0,
                'current': recent_prices[-1] if recent_prices else 0
            },
            'settings': {
                'stabilization_seconds': int(self.stabilization_minutes * 60),
                'bounce_threshold_percent': self.bounce_threshold * 100,
                'max_range_percent': self.max_range_percent * 100,
                'cooldown_minutes': self.min_time_between_bottoms / 60
            },
            'last_analysis_time': time.time(),
            'time_since_last_bottom': (
                (datetime.now() - self.last_bottom_time).total_seconds() / 60
                if self.last_bottom_time else None
            )
        }

    def enable_test_mode(self):
        """üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –µ—â–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        self.stabilization_minutes = 0.25  # 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤!
        self.bounce_threshold = 0.0001  # 0.01% –æ—Ç—Å–∫–æ–∫
        self.max_range_percent = 0.001  # 0.1% –¥–∏–∞–ø–∞–∑–æ–Ω
        self.min_time_between_bottoms = 60  # 1 –º–∏–Ω—É—Ç–∞ –∫—É–ª–¥–∞—É–Ω

        self.logger.warning("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ô DCA –ê–ö–¢–ò–í–ï–ù!")
        self.logger.warning("   ‚ö° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–∞ –∑–∞ 15 –°–ï–ö–£–ù–î!")
        self.logger.warning("   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    def force_bottom_detection_now(self) -> bool:
        """üîß –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        if len(self.price_history) == 0:
            return False

        current_price = self.price_history[-1][1] if self.price_history else 0
        result = self._is_confirmed_bottom_ultra_fast(current_price)

        self.logger.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–ù–ê: {'‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û' if result else '‚ùå –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û'}")
        return result
