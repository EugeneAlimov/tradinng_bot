#!/usr/bin/env python3
"""üöÄ –ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —ç—Ç–∞–ø–∞ 2: –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —è–¥—Ä–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""

import sys
import os
from pathlib import Path

def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –≠–¢–ê–ü–ê 2: –°–û–ó–î–ê–ù–ò–ï –Ø–î–†–ê –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ stage2_runner.py
    runner_file = Path("stage2_runner.py")
    
    if not runner_file.exists():
        print("‚ùå –§–∞–π–ª stage2_runner.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª stage2_runner.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º runner
        print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º stage2_runner...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
        current_dir = str(Path(".").resolve())
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º runner
        import stage2_runner
        
        print("‚úÖ stage2_runner —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("üèóÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        print("-" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        success = stage2_runner.main()
        
        print("-" * 60)
        
        if success:
            print("üéâ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("üìä Core —Å–ª–æ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω")
            print("üöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –≠—Ç–∞–ø 3: Domain —Å–ª–æ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ
            src_path = Path("src")
            if src_path.exists():
                print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                for item in sorted(src_path.rglob("*.py")):
                    relative_path = item.relative_to(Path("."))
                    file_size = item.stat().st_size
                    print(f"  ‚úÖ {relative_path} ({file_size} –±–∞–π—Ç)")
        else:
            print("‚ö†Ô∏è –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç stage2_core_creation_summary.json")
            print("üîÑ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
        
        return success
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ stage2_runner: {e}")
        print("üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª stage2_runner.py —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return False
    
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return False


def show_help():
    """üìö –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    print("üöÄ –ó–ê–ü–£–°–ö–ê–¢–ï–õ–¨ –≠–¢–ê–ü–ê 2 - –°–û–ó–î–ê–ù–ò–ï –Ø–î–†–ê –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    print("üìã –û–ø–∏—Å–∞–Ω–∏–µ:")
    print("  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —è–¥—Ä–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("  —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã. –°–æ–∑–¥–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Core —Å–ª–æ—è.")
    print()
    print("üéØ –ß—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è:")
    print("  ‚Ä¢ src/core/interfaces.py - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å–∏—Å—Ç–µ–º—ã")
    print("  ‚Ä¢ src/core/models.py - –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ src/core/exceptions.py - –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    print("  ‚Ä¢ src/core/events.py - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π")
    print("  ‚Ä¢ src/core/di_container.py - Dependency Injection")
    print("  ‚Ä¢ src/config/settings.py - –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print()
    print("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("  python run_stage2.py           # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫")
    print("  python run_stage2.py --help    # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print("  python run_stage2.py --check   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    print()
    print("üìä –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print("  ‚Ä¢ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ src/ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    print("  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç stage2_core_creation_summary.json")
    print("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≠—Ç–∞–ø—É 3: Domain —Å–ª–æ–π")


def check_prerequisites():
    """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É —ç—Ç–∞–ø–∞ 2"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –≠–¢–ê–ü–£ 2")
    print("=" * 40)
    
    checks = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    python_version = sys.version_info
    if python_version >= (3, 8):
        checks.append(("‚úÖ", f"Python {python_version.major}.{python_version.minor} (OK)"))
    else:
        checks.append(("‚ùå", f"Python {python_version.major}.{python_version.minor} (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 3.8)"))
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ stage2_runner.py
    runner_file = Path("stage2_runner.py")
    if runner_file.exists():
        checks.append(("‚úÖ", "stage2_runner.py –Ω–∞–π–¥–µ–Ω"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        try:
            with open(runner_file, 'r', encoding='utf-8') as f:
                content = f.read()
            compile(content, str(runner_file), 'exec')
            checks.append(("‚úÖ", "stage2_runner.py —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
        except SyntaxError as e:
            checks.append(("‚ùå", f"stage2_runner.py –∏–º–µ–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {e}"))
    else:
        checks.append(("‚ùå", "stage2_runner.py –Ω–µ –Ω–∞–π–¥–µ–Ω"))
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    current_dir = Path(".")
    if current_dir.is_dir() and os.access(current_dir, os.W_OK):
        checks.append(("‚úÖ", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏"))
    else:
        checks.append(("‚ùå", "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"))
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ Core
    core_files_exist = False
    src_path = Path("src")
    if src_path.exists():
        core_path = src_path / "core"
        if core_path.exists():
            core_files = list(core_path.glob("*.py"))
            if core_files:
                checks.append(("‚ö†Ô∏è", f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Core —Ñ–∞–π–ª—ã: {len(core_files)} (–±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã)"))
                core_files_exist = True
    
    if not core_files_exist:
        checks.append(("‚ÑπÔ∏è", "Core —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å –Ω—É–ª—è"))
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    try:
        import shutil
        disk_usage = shutil.disk_usage(".")
        free_gb = disk_usage.free / (1024**3)
        if free_gb >= 0.1:  # 100MB –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∏—Ç—å
            checks.append(("‚úÖ", f"–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb:.1f} –ì–ë"))
        else:
            checks.append(("‚ö†Ô∏è", f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_gb:.1f} –ì–ë"))
    except Exception:
        checks.append(("‚ö†Ô∏è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for status, message in checks:
        print(f"  {status} {message}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    success_count = sum(1 for status, _ in checks if status == "‚úÖ")
    warning_count = sum(1 for status, _ in checks if status == "‚ö†Ô∏è")
    error_count = sum(1 for status, _ in checks if status == "‚ùå")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"  ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
    print(f"  ‚ùå –û—à–∏–±–∫–∏: {error_count}")
    
    ready = error_count == 0
    if ready:
        print(f"  üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ‚úÖ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£")
    else:
        print(f"  üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ‚ùå –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–∞–ø–∞ 2")
    
    return ready


def show_status():
    """üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞"""
    print("üìä –°–¢–ê–¢–£–° –≠–¢–ê–ü–ê 2")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    report_file = Path("stage2_core_creation_summary.json")
    if report_file.exists():
        try:
            import json
            with open(report_file, 'r', encoding='utf-8') as f:
                report = json.load(f)
            
            print(f"üìÑ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:")
            print(f"  üïê –í—Ä–µ–º—è: {report.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"  ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {report.get('execution_time_minutes', 0)} –º–∏–Ω")
            print(f"  üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–°–ü–ï–®–ù–û' if report.get('overall_success', False) else '‚ùå –° –û–®–ò–ë–ö–ê–ú–ò'}")
            
            if 'statistics' in report:
                stats = report['statistics']
                print(f"  üìÅ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats.get('total_core_files', 0)}")
                print(f"  üìè –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: {stats.get('total_code_size', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"  üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if 'results' in report:
                print(f"\nüìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
                for component, result in report['results'].items():
                    if isinstance(result, dict):
                        status = "‚úÖ" if result.get('success', False) else "‚ùå"
                        coverage = result.get('coverage_percent', 0)
                        coverage_str = f" ({coverage:.0f}%)" if coverage > 0 else ""
                        print(f"    {status} {component}{coverage_str}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    else:
        print("üìÑ –û—Ç—á–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    src_path = Path("src")
    if src_path.exists():
        print(f"\nüìÅ –¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã Core:")
        core_files = [
            "core/interfaces.py",
            "core/models.py", 
            "core/exceptions.py",
            "core/events.py",
            "core/di_container.py",
            "config/settings.py"
        ]
        
        for file_path in core_files:
            full_path = src_path / file_path
            if full_path.exists():
                size = full_path.stat().st_size
                print(f"    ‚úÖ {file_path} ({size} –±–∞–π—Ç)")
            else:
                print(f"    ‚ùå {file_path} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    else:
        print(f"\nüìÅ –ü–∞–ø–∫–∞ src/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['--help', '-h', 'help']:
            show_help()
            sys.exit(0)
        elif arg in ['--check', '-c', 'check']:
            ready = check_prerequisites()
            sys.exit(0 if ready else 1)
        elif arg in ['--status', '-s', 'status']:
            show_status()
            sys.exit(0)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}")
            print("üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)
    
    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
    try:
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...")
        ready = check_prerequisites()
        
        if not ready:
            print("\n‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
            print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python run_stage2.py --check' –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            sys.exit(1)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø 2...\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        success = main()
        
        if success:
            print(f"\nüéâ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π: python run_stage2.py --status")
            print(f"üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å–∫ –≠—Ç–∞–ø–∞ 3 (Domain —Å–ª–æ–π)")
            sys.exit(0)
        else:
            print(f"\n‚ùå –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
            print(f"üîç –ò–∑—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç stage2_core_creation_summary.json")
            print(f"üîÑ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
            sys.exit(1)
    
    except KeyboardInterrupt:
        print(f"\n‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è Ctrl+C
    
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª stage2_runner.py –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        sys.exit(1)