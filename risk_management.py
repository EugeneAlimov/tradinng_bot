import statistics
from typing import List, Tuple, Optional
from datetime import datetime, timedelta
from collections import deque
import time
import logging
from config import TradingConfig


class RiskManager:
    def __init__(self, config: TradingConfig):
        self.config = config
        self.logger = logging.getLogger(__name__)

        # üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.daily_pnl = 0.0
        self.trades_today = deque(maxlen=100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        self.last_reset_date = datetime.now().date()

        # üõ°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
        self.active_stop_losses = {}  # {currency: {'price': float, 'quantity': float}}

        # üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.total_trades = 0
        self.profitable_trades = 0
        self.total_profit = 0.0
        self.max_drawdown = 0.0
        self.peak_balance = 0.0

        self.logger.info("üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def maybe_reset_daily_pnl(self):
        """üåÖ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ø–æ–ª–Ω–æ—á—å"""
        current_date = datetime.now().date()

        if current_date != self.last_reset_date:
            self.logger.info(f"üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å: —Å–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            self.logger.info(f"   –í—á–µ—Ä–∞—à–Ω–∏–π P&L: {self.daily_pnl:.4f}")
            self.logger.info(
                f"   –°–¥–µ–ª–æ–∫ –≤—á–µ—Ä–∞: {len([t for t in self.trades_today if datetime.fromtimestamp(t['timestamp']).date() == self.last_reset_date])}")

            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            yesterday_trades = [t for t in self.trades_today if
                                datetime.fromtimestamp(t['timestamp']).date() == self.last_reset_date]
            if yesterday_trades:
                self._log_daily_summary(yesterday_trades, self.daily_pnl)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            self.daily_pnl = 0.0
            self.last_reset_date = current_date

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–¥–µ–ª–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = datetime.now() - timedelta(days=7)
            self.trades_today = deque([
                t for t in self.trades_today
                if datetime.fromtimestamp(t['timestamp']) > week_ago
            ], maxlen=100)

    def _log_daily_summary(self, trades: List, pnl: float):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not trades:
            return

        buy_trades = [t for t in trades if t.get('type') == 'buy']
        sell_trades = [t for t in trades if t.get('type') == 'sell']
        profitable = [t for t in trades if t.get('pnl', 0) > 0]

        self.logger.info(f"üìä –î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê:")
        self.logger.info(f"   üí∞ P&L: {pnl:.4f}")
        self.logger.info(f"   üìà –°–¥–µ–ª–æ–∫: {len(trades)} (–ø–æ–∫—É–ø–æ–∫: {len(buy_trades)}, –ø—Ä–æ–¥–∞–∂: {len(sell_trades)})")
        self.logger.info(
            f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable)}/{len(trades)} ({len(profitable) / len(trades) * 100:.1f}%)")

    def calculate_volatility(self, prices: List[float]) -> float:
        """üìä –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω"""
        if len(prices) < 2:
            return 0.0

        returns = []
        for i in range(1, len(prices)):
            if prices[i - 1] > 0:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                returns.append((prices[i] - prices[i - 1]) / prices[i - 1])

        return statistics.stdev(returns) if len(returns) > 1 else 0.0

    def calculate_dynamic_spread(self, volatility: float) -> float:
        """üìà –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–µ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        base_spread = self.config.BASE_PROFIT_MARKUP
        volatility_multiplier = min(3.0, max(1.0, volatility * 100))

        dynamic_spread = base_spread * volatility_multiplier
        return max(self.config.MIN_SPREAD, dynamic_spread)

    def can_open_position(self, position_size: float, balance: float) -> bool:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.maybe_reset_daily_pnl()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        max_position_value = balance * self.config.MAX_POSITION_SIZE
        if position_size > max_position_value:
            self.logger.warning(f"‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size:.2f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_position_value:.2f}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
        daily_loss_limit = balance * self.config.MAX_DAILY_LOSS
        if self.daily_pnl < -daily_loss_limit:
            self.logger.warning(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å: {self.daily_pnl:.4f} < -{daily_loss_limit:.4f}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ –¥–µ–Ω—å
        today_trades = [
            t for t in self.trades_today
            if datetime.fromtimestamp(t['timestamp']).date() == datetime.now().date()
        ]

        if hasattr(self.config, 'MAX_TRADES_PER_DAY'):
            if len(today_trades) >= self.config.MAX_TRADES_PER_DAY:
                self.logger.warning(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: {len(today_trades)}")
                return False

        return True

    def set_stop_loss(self, currency: str, entry_price: float, quantity: float, order_type: str):
        """üõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        stop_price = self.calculate_stop_loss(entry_price, order_type)

        self.active_stop_losses[currency] = {
            'price': stop_price,
            'quantity': quantity,
            'entry_price': entry_price,
            'order_type': order_type,
            'created': time.time()
        }

        loss_percent = self.config.STOP_LOSS_PERCENT * 100
        self.logger.info(f"üõë –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {currency}:")
        self.logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.8f}")
        self.logger.info(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_price:.8f} (-{loss_percent:.1f}%)")
        self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")

    def check_stop_losses(self, current_price: float, currency: str) -> Tuple[bool, str]:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤"""
        if currency not in self.active_stop_losses:
            return False, ""

        stop_info = self.active_stop_losses[currency]
        stop_price = stop_info['price']
        entry_price = stop_info['entry_price']
        order_type = stop_info['order_type']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        should_trigger = False

        if order_type == 'buy':  # –î–ª—è –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if current_price <= stop_price:
                should_trigger = True
        else:  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç)
            if current_price >= stop_price:
                should_trigger = True

        if should_trigger:
            loss_percent = abs((current_price - entry_price) / entry_price * 100)
            reason = f"–°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª: —Ü–µ–Ω–∞ {current_price:.8f} <= {stop_price:.8f} (—É–±—ã—Ç–æ–∫ {loss_percent:.2f}%)"

            # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            del self.active_stop_losses[currency]

            self.logger.warning(f"üö® {reason}")
            return True, reason

        return False, ""

    def calculate_stop_loss(self, entry_price: float, order_type: str) -> float:
        """üõë –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        if order_type == 'buy':
            return entry_price * (1 - self.config.STOP_LOSS_PERCENT)
        else:
            return entry_price * (1 + self.config.STOP_LOSS_PERCENT)

    def update_daily_pnl(self, pnl: float, trade_info: dict = None):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ P&L"""
        self.maybe_reset_daily_pnl()

        self.daily_pnl += pnl
        self.total_profit += pnl
        self.total_trades += 1

        if pnl > 0:
            self.profitable_trades += 1

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        trade_record = {
            'pnl': pnl,
            'timestamp': time.time(),
            'type': trade_info.get('type') if trade_info else 'unknown'
        }

        if trade_info:
            trade_record.update(trade_info)

        self.trades_today.append(trade_record)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        if hasattr(self, 'current_balance'):
            if self.current_balance > self.peak_balance:
                self.peak_balance = self.current_balance

            drawdown = (self.peak_balance - self.current_balance) / self.peak_balance
            if drawdown > self.max_drawdown:
                self.max_drawdown = drawdown

        self.logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω P&L: {pnl:+.4f}, –¥–Ω–µ–≤–Ω–æ–π –∏—Ç–æ–≥: {self.daily_pnl:+.4f}")

    def get_risk_metrics(self) -> dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        success_rate = (self.profitable_trades / max(1, self.total_trades)) * 100

        today_trades = [
            t for t in self.trades_today
            if datetime.fromtimestamp(t['timestamp']).date() == datetime.now().date()
        ]

        return {
            'daily_pnl': self.daily_pnl,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'success_rate': success_rate,
            'total_profit': self.total_profit,
            'max_drawdown': self.max_drawdown * 100,
            'trades_today': len(today_trades),
            'active_stop_losses': len(self.active_stop_losses)
        }

    def log_risk_summary(self):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∏—Å–∫–∞–º"""
        metrics = self.get_risk_metrics()

        self.logger.info("üìä –°–í–û–î–ö–ê –ü–û –†–ò–°–ö–ê–ú:")
        self.logger.info(f"   üí∞ –î–Ω–µ–≤–Ω–æ–π P&L: {metrics['daily_pnl']:+.4f}")
        self.logger.info(f"   üìà –°–¥–µ–ª–æ–∫ –≤—Å–µ–≥–æ: {metrics['total_trades']}")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metrics['success_rate']:.1f}%")
        self.logger.info(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown']:.2f}%")
        self.logger.info(f"   üõë –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤: {metrics['active_stop_losses']}")

    def should_reduce_risk(self) -> Tuple[bool, str]:
        """‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤"""
        reasons = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
        if self.daily_pnl < -0.01:  # –ë–æ–ª—å—à–µ 1% –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
            reasons.append(f"–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ {self.daily_pnl * 100:.1f}%")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤
        recent_trades = list(self.trades_today)[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        if len(recent_trades) >= 3:
            losses = [t for t in recent_trades if t.get('pnl', 0) < 0]
            if len(losses) >= 3:
                reasons.append(f"—Å–µ—Ä–∏—è –∏–∑ {len(losses)} —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        if self.max_drawdown > 0.05:  # –ë–æ–ª—å—à–µ 5% –ø—Ä–æ—Å–∞–¥–∫–∏
            reasons.append(f"–ø—Ä–æ—Å–∞–¥–∫–∞ {self.max_drawdown * 100:.1f}%")

        if reasons:
            return True, f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫–∏: {', '.join(reasons)}"

        return False, ""

    def emergency_stop_check(self, current_balance: float) -> Tuple[bool, str]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.current_balance = current_balance

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–µ—Ä–∏ –∑–∞ –¥–µ–Ω—å
        if self.daily_pnl < -current_balance * 0.1:  # –ë–æ–ª—å—à–µ 10% –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
            return True, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {self.daily_pnl * 100:.1f}%"

        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        if self.max_drawdown > 0.15:  # –ë–æ–ª—å—à–µ 15% –ø—Ä–æ—Å–∞–¥–∫–∏
            return True, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ø—Ä–æ—Å–∞–¥–∫–∞: {self.max_drawdown * 100:.1f}%"

        return False, ""

    def cleanup_old_stop_losses(self, max_age_hours: int = 24):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤"""
        current_time = time.time()
        expired = []

        for currency, stop_info in self.active_stop_losses.items():
            age_hours = (current_time - stop_info['created']) / 3600
            if age_hours > max_age_hours:
                expired.append(currency)

        for currency in expired:
            del self.active_stop_losses[currency]
            self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {currency}")

    def calculate_position_risk(self, entry_price: float, current_price: float, quantity: float) -> dict:
        """üìä –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        unrealized_pnl = (current_price - entry_price) * quantity
        unrealized_percent = (current_price - entry_price) / entry_price * 100

        risk_to_stop_loss = entry_price * self.config.STOP_LOSS_PERCENT * quantity

        return {
            'unrealized_pnl': unrealized_pnl,
            'unrealized_percent': unrealized_percent,
            'risk_to_stop_loss': risk_to_stop_loss,
            'risk_percent': self.config.STOP_LOSS_PERCENT * 100
        }