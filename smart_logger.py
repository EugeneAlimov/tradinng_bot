"""
üîá –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞
–ü–æ–¥–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∞–º
"""

import logging
import time
import re
from typing import Dict
from datetime import datetime

class SmartLogger:
    """üß† –£–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Å–ø–∞–º–∞"""

    def __init__(self, logger_name: str):
        self.logger = logging.getLogger(logger_name)
        self.last_logged = {}
        self.message_counts = {}
        self.last_aggregation = time.time()

    def info_if_changed(self, key: str, message: str, threshold: float = 0.01):
        """üìä –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"""
        current_time = time.time()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            numbers = re.findall(r'-?\\d+\\.?\\d*', message)
            if numbers:
                current_value = float(numbers[-1])

                if key in self.last_logged:
                    last_value = self.last_logged[key]['value']
                    if abs(current_value - last_value) < threshold:
                        return  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ

                self.last_logged[key] = {
                    'value': current_value,
                    'time': current_time
                }
        except:
            pass

        self.logger.info(message)

    def count_message(self, message_type: str):
        """üìä –ü–æ–¥—Å—á–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_counts[message_type] = self.message_counts.get(message_type, 0) + 1

        # –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if time.time() - self.last_aggregation > 300:
            self._log_aggregated_counts()
            self.last_aggregation = time.time()

    def _log_aggregated_counts(self):
        """üìã –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å"""
        if not self.message_counts:
            return

        total = sum(self.message_counts.values())
        if total > 20:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π
            self.logger.info(f"üìä –ó–∞ 5 –º–∏–Ω: {total} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ
            for msg_type, count in sorted(self.message_counts.items(),
                                        key=lambda x: x[1], reverse=True)[:3]:
                if count > 10:
                    self.logger.info(f"   ‚Ä¢ {msg_type}: {count}")

        self.message_counts.clear()

    def debug_throttled(self, message: str, throttle_seconds: int = 60):
        """üêõ Debug —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã"""
        message_hash = hash(message)
        current_time = time.time()

        if message_hash in self.last_logged:
            if current_time - self.last_logged[message_hash]['time'] < throttle_seconds:
                return

        self.last_logged[message_hash] = {'time': current_time}
        self.logger.debug(message)

class QuietRateLimiter:
    """üîá –¢–∏—Ö–∏–π rate limiter"""

    def __init__(self, original_rate_limiter):
        self.rate_limiter = original_rate_limiter
        self.smart_logger = SmartLogger("rate_limiter")
        self.wait_counts = {}
        self.last_report = time.time()

    def wait_if_needed(self, request_type: str) -> float:
        """‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        wait_time = self.rate_limiter.wait_if_needed(request_type)

        if wait_time > 0:
            self.wait_counts[request_type] = self.wait_counts.get(request_type, 0) + 1

            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            if wait_time > 2.0:
                self.smart_logger.logger.warning(
                    f"‚è≥ –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {request_type}: {wait_time:.1f}—Å"
                )

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        if time.time() - self.last_report > 300:
            self._report_wait_stats()
            self.last_report = time.time()

        return wait_time

    def _report_wait_stats(self):
        """üìä –û—Ç—á–µ—Ç –ø–æ –æ–∂–∏–¥–∞–Ω–∏—è–º"""
        if not self.wait_counts:
            return

        total_waits = sum(self.wait_counts.values())
        if total_waits > 50:
            self.smart_logger.logger.info(
                f"‚è≥ Rate limit –∑–∞ 5 –º–∏–Ω: {total_waits} –æ–∂–∏–¥–∞–Ω–∏–π"
            )
            self.wait_counts.clear()

def setup_optimized_logging():
    """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import logging.handlers

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    main_handler = logging.handlers.RotatingFileHandler(
        'trading_bot.log',
        maxBytes=10*1024*1024,  # 10MB
        backupCount=3
    )
    main_handler.setLevel(logging.INFO)

    # Debug –ª–æ–≥ –Ω–∞ 1 –¥–µ–Ω—å
    debug_handler = logging.handlers.TimedRotatingFileHandler(
        'debug.log',
        when='D',
        interval=1,
        backupCount=1
    )
    debug_handler.setLevel(logging.DEBUG)

    # Console handler –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.WARNING)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    main_handler.setFormatter(formatter)
    debug_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ root –ª–æ–≥–≥–µ—Ä—É
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.handlers.clear()
    root_logger.addHandler(main_handler)
    root_logger.addHandler(debug_handler)
    root_logger.addHandler(console_handler)

    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

# –ü–∞—Ç—á–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∞—Å—Å–æ–≤
def patch_existing_logger(bot_instance):
    """üîß –ü–∞—Ç—á —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –±–æ—Ç–∞"""

    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ª–æ–≥–≥–µ—Ä –Ω–∞ —É–º–Ω—ã–π
    if hasattr(bot_instance, 'logger'):
        bot_instance.smart_logger = SmartLogger(bot_instance.__class__.__name__)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        original_info = bot_instance.logger.info
        original_debug = bot_instance.logger.debug

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        def smart_info(message, *args, **kwargs):
            if "Rate limit" in str(message):
                bot_instance.smart_logger.count_message("rate_limit")
                return
            elif "P&L:" in str(message):
                bot_instance.smart_logger.info_if_changed("pnl", str(message), 0.01)
                return
            elif "–¶–µ–Ω–∞:" in str(message):
                bot_instance.smart_logger.info_if_changed("price", str(message), 0.005)
                return

            original_info(message, *args, **kwargs)

        def smart_debug(message, *args, **kwargs):
            bot_instance.smart_logger.debug_throttled(str(message))

        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã
        bot_instance.logger.info = smart_info
        bot_instance.logger.debug = smart_debug

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_optimized_logging()

    smart_logger = SmartLogger("test")

    print("üß™ –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    for i in range(10):
        smart_logger.info_if_changed("price", f"–¶–µ–Ω–∞: 0.189{i%2}")  # –¢–æ–ª—å–∫–æ 2 –ª–æ–≥–∞
        smart_logger.count_message("rate_limit")  # –ë—É–¥–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ

    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
