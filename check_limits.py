import json
from api_client import ExmoAPIClient
from config import TradingConfig


def analyze_all_pairs():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –∏ –∏—Ö –ª–∏–º–∏—Ç–æ–≤"""
    config = TradingConfig()
    api = ExmoAPIClient(config)

    try:
        print("üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä...")
        pair_settings = api.get_pair_settings()

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {len(pair_settings)}")
        print("=" * 80)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –≤–∞–ª—é—Ç–∞–º
        eur_pairs = []
        usd_pairs = []
        btc_pairs = []
        eth_pairs = []
        usdt_pairs = []
        other_pairs = []

        for pair_name, settings in pair_settings.items():
            if '_EUR' in pair_name:
                eur_pairs.append((pair_name, settings))
            elif '_USD' in pair_name:
                usd_pairs.append((pair_name, settings))
            elif '_BTC' in pair_name:
                btc_pairs.append((pair_name, settings))
            elif '_ETH' in pair_name:
                eth_pairs.append((pair_name, settings))
            elif '_USDT' in pair_name or 'USDT_' in pair_name:
                usdt_pairs.append((pair_name, settings))
            else:
                other_pairs.append((pair_name, settings))

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        print("üá™üá∫ EUR –ü–ê–†–´:")
        analyze_currency_pairs(eur_pairs, "EUR")

        print("\nüá∫üá∏ USD –ü–ê–†–´:")
        analyze_currency_pairs(usd_pairs, "USD")

        print("\n‚Çø BTC –ü–ê–†–´:")
        analyze_currency_pairs(btc_pairs, "BTC")

        print("\n‚ü† ETH –ü–ê–†–´:")
        analyze_currency_pairs(eth_pairs, "ETH")

        print("\nüí∞ USDT –ü–ê–†–´:")
        analyze_currency_pairs(usdt_pairs, "USDT")

        print("\nüîÑ –í–û–ó–ú–û–ñ–ù–´–ï –ê–†–ë–ò–¢–†–ê–ñ–ù–´–ï –¶–ï–ü–û–ß–ö–ò:")
        find_arbitrage_chains(pair_settings)

        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø 20 EUR:")
        recommendations_for_small_amount(pair_settings)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def analyze_currency_pairs(pairs, currency):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    if not pairs:
        print(f"   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä —Å {currency}")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ min_amount –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    pairs.sort(key=lambda x: float(x[1].get('min_amount', '999999')))

    for pair_name, settings in pairs:
        min_qty = settings.get('min_quantity', 'N/A')
        min_amount = settings.get('min_amount', 'N/A')
        max_amount = settings.get('max_amount', 'N/A')
        commission = settings.get('commission_taker_percent', 'N/A')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è 20 EUR
        affordable = "‚úÖ" if is_affordable(settings, 20.0) else "‚ùå"

        print(f"   {affordable} {pair_name:12} | "
              f"–ú–∏–Ω.—Å—É–º–º–∞: {min_amount:>8} | "
              f"–ú–∏–Ω.–∫–æ–ª-–≤–æ: {min_qty:>12} | "
              f"–ö–æ–º–∏—Å—Å–∏—è: {commission}%")


def is_affordable(settings, amount_eur):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        min_amount = float(settings.get('min_amount', '999999'))
        return amount_eur >= min_amount
    except:
        return False


def find_arbitrage_chains(pair_settings):
    """–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫"""

    # –ò—â–µ–º –ø–∞—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫
    available_pairs = set(pair_settings.keys())

    print("   üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Ü–∏–∫–ª—ã...")

    # –ë–∞–∑–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    base_currencies = ['EUR', 'USD', 'BTC', 'ETH', 'USDT']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∏
    triangular_chains = []

    for base1 in base_currencies:
        for base2 in base_currencies:
            for base3 in base_currencies:
                if base1 != base2 != base3 != base1:
                    # –ò—â–µ–º —Ü–µ–ø–æ—á–∫—É A->B->C->A
                    pair1 = f"{base1}_{base2}"
                    pair2 = f"{base2}_{base3}"
                    pair3 = f"{base3}_{base1}"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã —Ç–æ–∂–µ
                    pair1_rev = f"{base2}_{base1}"
                    pair2_rev = f"{base3}_{base2}"
                    pair3_rev = f"{base1}_{base3}"

                    # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                    if (pair1 in available_pairs and
                            pair2 in available_pairs and
                            pair3 in available_pairs):

                        chain = f"{base1} ‚Üí {base2} ‚Üí {base3} ‚Üí {base1}"
                        chain_pairs = [pair1, pair2, pair3]

                        if is_chain_affordable(chain_pairs, pair_settings, 20.0):
                            affordable = "‚úÖ"
                        else:
                            affordable = "‚ùå"

                        triangular_chains.append((affordable, chain, chain_pairs))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
    if triangular_chains:
        print("   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∏:")
        for affordable, chain, pairs in triangular_chains[:10]:  # –ü–µ—Ä–≤—ã–µ 10
            print(f"      {affordable} {chain}")
            for pair in pairs:
                settings = pair_settings.get(pair, {})
                min_amount = settings.get('min_amount', 'N/A')
                print(f"         ‚îî‚îÄ {pair}: –º–∏–Ω.—Å—É–º–º–∞ {min_amount}")
    else:
        print("   ‚ùå –¢—Ä–µ—É–≥–æ–ª—å–Ω—ã–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    # –ò—â–µ–º —Ü–µ–ø–æ—á–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è DOGE
    print("\n   üêï –¶–µ–ø–æ—á–∫–∏ –¥–ª—è DOGE EUR ‚Üî USD:")
    doge_chains = find_doge_conversion_chains(pair_settings)

    for chain_info in doge_chains[:5]:  # –ü–µ—Ä–≤—ã–µ 5
        affordable, description, pairs, total_commission = chain_info
        print(f"      {affordable} {description}")
        print(f"         –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ~{total_commission:.2f}%")
        for pair in pairs:
            settings = pair_settings.get(pair, {})
            min_amount = settings.get('min_amount', 'N/A')
            commission = settings.get('commission_taker_percent', 'N/A')
            print(f"         ‚îî‚îÄ {pair}: –º–∏–Ω.—Å—É–º–º–∞ {min_amount}, –∫–æ–º–∏—Å—Å–∏—è {commission}%")


def find_doge_conversion_chains(pair_settings):
    """–ü–æ–∏—Å–∫ —Ü–µ–ø–æ—á–µ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ DOGE EUR ‚Üî USD"""
    chains = []
    available_pairs = set(pair_settings.keys())

    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    intermediate = ['BTC', 'ETH', 'USDT', 'LTC']

    for bridge in intermediate:
        # –¶–µ–ø–æ—á–∫–∞: DOGE_EUR ‚Üí BRIDGE_EUR ‚Üí BRIDGE_USD ‚Üí DOGE_USD
        chain_pairs = [
            f"DOGE_EUR",
            f"{bridge}_EUR",
            f"{bridge}_USD",
            f"DOGE_USD"
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–∞—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if all(pair in available_pairs for pair in chain_pairs):
            total_commission = calculate_chain_commission(chain_pairs, pair_settings)
            affordable = "‚úÖ" if is_chain_affordable(chain_pairs, pair_settings, 20.0) else "‚ùå"

            description = f"DOGE_EUR ‚Üí {bridge}_EUR ‚Üí {bridge}_USD ‚Üí DOGE_USD"
            chains.append((affordable, description, chain_pairs, total_commission))

    return sorted(chains, key=lambda x: x[3])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∏—Å—Å–∏–∏


def is_chain_affordable(chain_pairs, pair_settings, amount_eur):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã"""
    for pair in chain_pairs:
        settings = pair_settings.get(pair, {})
        if not is_affordable(settings, amount_eur * 0.25):  # 25% –æ—Ç —Å—É–º–º—ã –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
            return False
    return True


def calculate_chain_commission(chain_pairs, pair_settings):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ü–µ–ø–æ—á–∫–∏"""
    total_commission = 0
    for pair in chain_pairs:
        settings = pair_settings.get(pair, {})
        commission = float(settings.get('commission_taker_percent', '0.3'))
        total_commission += commission
    return total_commission


def recommendations_for_small_amount(pair_settings):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º–æ–π"""

    print("   üí° –î–ª—è —Å—É–º–º—ã ~20 EUR:")

    # –ò—â–µ–º —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã
    affordable_pairs = []

    for pair_name, settings in pair_settings.items():
        if is_affordable(settings, 20.0):
            min_amount = float(settings.get('min_amount', '999999'))
            commission = float(settings.get('commission_taker_percent', '0.3'))

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
            priority = 0
            if 'DOGE' in pair_name:
                priority += 10
            if 'EUR' in pair_name:
                priority += 5
            if 'BTC' in pair_name or 'ETH' in pair_name:
                priority += 3
            if 'USDT' in pair_name:
                priority += 2

            affordable_pairs.append((priority, pair_name, min_amount, commission))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ
    affordable_pairs.sort(key=lambda x: (-x[0], x[2]))

    print("   üìä –¢–æ–ø –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä:")
    for priority, pair, min_amount, commission in affordable_pairs[:15]:
        print(f"      ‚úÖ {pair:12} | –ú–∏–Ω: {min_amount:>6.2f} | –ö–æ–º–∏—Å—Å–∏—è: {commission}% | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")

    print("\n   üéØ –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("      1. –ù–∞—á–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ DOGE_EUR")
    print("      2. –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö DOGE –ø–∞—Ä")
    print("      3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å ETH –∏–ª–∏ BTC –ø–∞—Ä—ã –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("      4. –ò–∑–±–µ–≥–∞—Ç—å —Ü–µ–ø–æ—á–µ–∫ —Å –∫–æ–º–∏—Å—Å–∏–µ–π >2%")
    print("      5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–Ω–∏—Ü–µ >1%")


if __name__ == "__main__":
    print("üöÄ –ê–ù–ê–õ–ò–ó –õ–ò–ú–ò–¢–û–í EXMO")
    print("=" * 50)
    analyze_all_pairs()
    print("=" * 50)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")