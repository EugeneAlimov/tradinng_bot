#!/usr/bin/env python3
"""üèóÔ∏è –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - Core —Å–ª–æ–π"""

from dataclasses import dataclass, field
from datetime import datetime
from decimal import Decimal
from typing import Optional, Dict, Any, List
from enum import Enum
import uuid


# ================= –ë–ê–ó–û–í–´–ï ENUMS =================

class OrderType(Enum):
    """–¢–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    BUY = "buy"
    SELL = "sell"


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤"""
    PENDING = "pending"
    FILLED = "filled"
    PARTIALLY_FILLED = "partially_filled"
    CANCELLED = "cancelled"
    FAILED = "failed"


class StrategySignalType(Enum):
    """–¢–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    BUY = "buy"
    SELL = "sell"
    HOLD = "hold"
    EMERGENCY_EXIT = "emergency_exit"


class RiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class EventType(Enum):
    """–¢–∏–ø—ã –¥–æ–º–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    TRADE_EXECUTED = "trade_executed"
    POSITION_OPENED = "position_opened"
    POSITION_CLOSED = "position_closed"
    POSITION_UPDATED = "position_updated"
    SIGNAL_GENERATED = "signal_generated"
    RISK_LIMIT_EXCEEDED = "risk_limit_exceeded"
    EMERGENCY_STOP_TRIGGERED = "emergency_stop_triggered"
    BALANCE_UPDATED = "balance_updated"


# ================= VALUE OBJECTS =================

@dataclass(frozen=True)
class TradingPair:
    """üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (Value Object)"""
    base: str
    quote: str
    
    def __post_init__(self):
        if not self.base or not self.quote:
            raise ValueError("Base and quote currencies cannot be empty")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        object.__setattr__(self, 'base', self.base.upper())
        object.__setattr__(self, 'quote', self.quote.upper())
    
    def __str__(self) -> str:
        return f"{self.base}_{self.quote}"
    
    @classmethod
    def from_string(cls, pair_str: str) -> 'TradingPair':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ 'BTC_USD'"""
        try:
            base, quote = pair_str.split('_')
            return cls(base=base, quote=quote)
        except ValueError:
            raise ValueError(f"Invalid trading pair format: {pair_str}")
    
    @property
    def symbol(self) -> str:
        """–°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        return f"{self.base}{self.quote}"


@dataclass(frozen=True)
class Money:
    """üí∞ –î–µ–Ω–µ–∂–Ω–∞—è —Å—É–º–º–∞ (Value Object)"""
    amount: Decimal
    currency: str
    
    def __post_init__(self):
        if self.amount < 0:
            raise ValueError("Amount cannot be negative")
        if not self.currency:
            raise ValueError("Currency cannot be empty")
        
        object.__setattr__(self, 'currency', self.currency.upper())
    
    def __str__(self) -> str:
        return f"{self.amount} {self.currency}"
    
    def __add__(self, other: 'Money') -> 'Money':
        if self.currency != other.currency:
            raise ValueError(f"Cannot add different currencies: {self.currency} and {other.currency}")
        return Money(self.amount + other.amount, self.currency)
    
    def __sub__(self, other: 'Money') -> 'Money':
        if self.currency != other.currency:
            raise ValueError(f"Cannot subtract different currencies: {self.currency} and {other.currency}")
        return Money(self.amount - other.amount, self.currency)
    
    def __mul__(self, multiplier: Decimal) -> 'Money':
        return Money(self.amount * multiplier, self.currency)
    
    def __truediv__(self, divisor: Decimal) -> 'Money':
        return Money(self.amount / divisor, self.currency)
    
    @property
    def is_zero(self) -> bool:
        return self.amount == Decimal('0')
    
    @property
    def is_positive(self) -> bool:
        return self.amount > Decimal('0')


@dataclass(frozen=True)
class Price:
    """üí± –¶–µ–Ω–∞ (Value Object)"""
    value: Decimal
    pair: TradingPair
    timestamp: datetime = field(default_factory=datetime.now)
    
    def __post_init__(self):
        if self.value <= 0:
            raise ValueError("Price value must be positive")
    
    def __str__(self) -> str:
        return f"{self.value} {self.pair}"
    
    def calculate_value(self, quantity: Decimal) -> Money:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        total_value = self.value * quantity
        return Money(total_value, self.pair.quote)
    
    @property
    def age_seconds(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç —Ü–µ–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return (datetime.now() - self.timestamp).total_seconds()
    
    def is_stale(self, max_age_seconds: int = 60) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–æ—Å—Ç–∏ —Ü–µ–Ω—ã"""
        return self.age_seconds > max_age_seconds


# ================= ENTITIES =================

@dataclass
class Position:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (Entity)"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    currency: str = ""
    quantity: Decimal = Decimal('0')
    avg_price: Decimal = Decimal('0')
    total_cost: Decimal = Decimal('0')
    created_at: datetime = field(default_factory=datetime.now)
    updated_at: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        if self.currency:
            self.currency = self.currency.upper()
    
    @property
    def current_value(self) -> Decimal:
        """–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ"""
        return self.quantity * self.avg_price
    
    @property
    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        return self.quantity == Decimal('0')
    
    def calculate_profit_loss(self, current_price: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞"""
        if self.is_empty:
            return Decimal('0')
        
        current_value = self.quantity * current_price
        return current_value - self.total_cost
    
    def calculate_profit_loss_percentage(self, current_price: Decimal) -> Decimal:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.total_cost == 0:
            return Decimal('0')
        
        profit_loss = self.calculate_profit_loss(current_price)
        return (profit_loss / self.total_cost) * Decimal('100')
    
    def update_with_trade(self, quantity: Decimal, price: Decimal, trade_type: OrderType) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if trade_type == OrderType.BUY:
            # –ü–æ–∫—É–ø–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            new_total_cost = self.total_cost + (quantity * price)
            new_quantity = self.quantity + quantity
            
            if new_quantity > 0:
                self.avg_price = new_total_cost / new_quantity
            
            self.quantity = new_quantity
            self.total_cost = new_total_cost
            
        elif trade_type == OrderType.SELL:
            # –ü—Ä–æ–¥–∞–∂–∞ - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if quantity > self.quantity:
                raise ValueError(f"Cannot sell {quantity}, only {self.quantity} available")
            
            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cost_reduction = (quantity / self.quantity) * self.total_cost
            self.quantity -= quantity
            self.total_cost -= cost_reduction
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
        
        self.updated_at = datetime.now()
    
    def close(self, exit_price: Decimal) -> Decimal:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if self.is_empty:
            return Decimal('0')
        
        profit_loss = self.calculate_profit_loss(exit_price)
        self.quantity = Decimal('0')
        self.total_cost = Decimal('0')
        self.updated_at = datetime.now()
        
        return profit_loss


@dataclass
class TradeSignal:
    """üìà –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª (Entity)"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    signal_type: StrategySignalType = StrategySignalType.HOLD
    pair: Optional[TradingPair] = None
    quantity: Decimal = Decimal('0')
    price: Optional[Decimal] = None
    confidence: float = 0.0
    strategy_name: str = ""
    reason: str = ""
    risk_level: RiskLevel = RiskLevel.MEDIUM
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    def __post_init__(self):
        if self.confidence < 0 or self.confidence > 1:
            raise ValueError("Confidence must be between 0 and 1")
    
    @property
    def is_actionable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ —Å–∏–≥–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π"""
        return self.signal_type in [StrategySignalType.BUY, StrategySignalType.SELL, StrategySignalType.EMERGENCY_EXIT]
    
    @property
    def age_seconds(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return (datetime.now() - self.timestamp).total_seconds()
    
    def is_stale(self, max_age_seconds: int = 300) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)"""
        return self.age_seconds > max_age_seconds
    
    def estimate_trade_value(self) -> Optional[Money]:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.pair or not self.price or self.quantity <= 0:
            return None
        
        total_value = self.quantity * self.price
        return Money(total_value, self.pair.quote)


@dataclass
class MarketData:
    """üìä –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Entity)"""
    pair: TradingPair
    price: Price
    volume_24h: Decimal = Decimal('0')
    high_24h: Optional[Decimal] = None
    low_24h: Optional[Decimal] = None
    change_24h: Optional[Decimal] = None
    change_24h_percent: Optional[Decimal] = None
    bid: Optional[Decimal] = None
    ask: Optional[Decimal] = None
    spread: Optional[Decimal] = None
    timestamp: datetime = field(default_factory=datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def current_price(self) -> Decimal:
        """–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"""
        return self.price.value
    
    @property
    def mid_price(self) -> Optional[Decimal]:
        """–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –º–µ–∂–¥—É bid –∏ ask"""
        if self.bid and self.ask:
            return (self.bid + self.ask) / Decimal('2')
        return None
    
    @property
    def spread_percentage(self) -> Optional[Decimal]:
        """–°–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if self.bid and self.ask and self.ask > 0:
            return ((self.ask - self.bid) / self.ask) * Decimal('100')
        return None
    
    def is_stale(self, max_age_seconds: int = 60) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        age = (datetime.now() - self.timestamp).total_seconds()
        return age > max_age_seconds


@dataclass
class OrderResult:
    """üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (Entity)"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    order_id: str = ""
    pair: Optional[TradingPair] = None
    order_type: Optional[OrderType] = None
    status: OrderStatus = OrderStatus.PENDING
    requested_quantity: Decimal = Decimal('0')
    executed_quantity: Decimal = Decimal('0')
    requested_price: Optional[Decimal] = None
    executed_price: Optional[Decimal] = None
    commission: Decimal = Decimal('0')
    commission_currency: str = ""
    total_cost: Decimal = Decimal('0')
    created_at: datetime = field(default_factory=datetime.now)
    executed_at: Optional[datetime] = None
    error_message: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def is_successful(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞"""
        return self.status == OrderStatus.FILLED
    
    @property
    def is_failed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–∏ –æ—Ä–¥–µ—Ä–∞"""
        return self.status in [OrderStatus.FAILED, OrderStatus.CANCELLED]
    
    @property
    def is_partially_filled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return self.status == OrderStatus.PARTIALLY_FILLED
    
    @property
    def fill_percentage(self) -> Decimal:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        if self.requested_quantity == 0:
            return Decimal('0')
        return (self.executed_quantity / self.requested_quantity) * Decimal('100')
    
    def calculate_effective_price(self) -> Optional[Decimal]:
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏"""
        if self.executed_quantity == 0:
            return None
        
        if self.order_type == OrderType.BUY:
            # –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–æ–º–∏—Å—Å–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å
            return (self.total_cost + self.commission) / self.executed_quantity
        else:
            # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫–æ–º–∏—Å—Å–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç –≤—ã—Ä—É—á–∫—É
            return (self.total_cost - self.commission) / self.executed_quantity


# ================= –î–û–ú–ï–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø =================

@dataclass
class DomainEvent:
    """üì° –ë–∞–∑–æ–≤–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    event_type: EventType = EventType.TRADE_EXECUTED
    timestamp: datetime = field(default_factory=datetime.now)
    data: Dict[str, Any] = field(default_factory=dict)
    source: str = ""
    correlation_id: Optional[str] = None
    
    @property
    def age_seconds(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        return (datetime.now() - self.timestamp).total_seconds()


@dataclass
class TradeExecutedEvent(DomainEvent):
    """üìà –°–æ–±—ã—Ç–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    order_result: OrderResult = field(default_factory=OrderResult)
    signal_id: Optional[str] = None
    position_before: Optional[Position] = None
    position_after: Optional[Position] = None
    
    def __post_init__(self):
        self.event_type = EventType.TRADE_EXECUTED
        self.data.update({
            'order_id': self.order_result.order_id,
            'pair': str(self.order_result.pair) if self.order_result.pair else None,
            'quantity': str(self.order_result.executed_quantity),
            'price': str(self.order_result.executed_price) if self.order_result.executed_price else None,
            'total_cost': str(self.order_result.total_cost)
        })


@dataclass
class PositionUpdatedEvent(DomainEvent):
    """üìä –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    position: Position = field(default_factory=Position)
    previous_quantity: Decimal = Decimal('0')
    change_reason: str = ""
    
    def __post_init__(self):
        self.event_type = EventType.POSITION_UPDATED
        self.data.update({
            'position_id': self.position.id,
            'currency': self.position.currency,
            'new_quantity': str(self.position.quantity),
            'previous_quantity': str(self.previous_quantity),
            'avg_price': str(self.position.avg_price),
            'reason': self.change_reason
        })


@dataclass
class SignalGeneratedEvent(DomainEvent):
    """üìà –°–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    signal: TradeSignal = field(default_factory=TradeSignal)
    
    def __post_init__(self):
        self.event_type = EventType.SIGNAL_GENERATED
        self.data.update({
            'signal_id': self.signal.id,
            'signal_type': self.signal.signal_type.value,
            'strategy_name': self.signal.strategy_name,
            'pair': str(self.signal.pair) if self.signal.pair else None,
            'quantity': str(self.signal.quantity),
            'confidence': self.signal.confidence,
            'reason': self.signal.reason
        })


@dataclass
class RiskLimitExceededEvent(DomainEvent):
    """üö® –°–æ–±—ã—Ç–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–∏—Å–∫–∞"""
    risk_type: str = ""
    current_value: Decimal = Decimal('0')
    limit_value: Decimal = Decimal('0')
    affected_positions: List[str] = field(default_factory=list)
    
    def __post_init__(self):
        self.event_type = EventType.RISK_LIMIT_EXCEEDED
        self.data.update({
            'risk_type': self.risk_type,
            'current_value': str(self.current_value),
            'limit_value': str(self.limit_value),
            'affected_positions': self.affected_positions,
            'severity': 'high'
        })


# ================= –ê–ì–†–ï–ì–ê–¢–´ =================

@dataclass
class TradingSession:
    """üìä –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è (Aggregate Root)"""
    id: str = field(default_factory=lambda: str(uuid.uuid4()))
    start_time: datetime = field(default_factory=datetime.now)
    end_time: Optional[datetime] = None
    initial_balance: Dict[str, Decimal] = field(default_factory=dict)
    current_balance: Dict[str, Decimal] = field(default_factory=dict)
    positions: List[Position] = field(default_factory=list)
    executed_trades: List[OrderResult] = field(default_factory=list)
    generated_signals: List[TradeSignal] = field(default_factory=list)
    total_profit_loss: Decimal = Decimal('0')
    total_commission_paid: Decimal = Decimal('0')
    metadata: Dict[str, Any] = field(default_factory=dict)
    
    @property
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        return self.end_time is None
    
    @property
    def duration_seconds(self) -> float:
        """–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        end_time = self.end_time or datetime.now()
        return (end_time - self.start_time).total_seconds()
    
    @property
    def successful_trades_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
        return sum(1 for trade in self.executed_trades if trade.is_successful)
    
    @property
    def failed_trades_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
        return sum(1 for trade in self.executed_trades if trade.is_failed)
    
    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤"""
        total_trades = len(self.executed_trades)
        if total_trades == 0:
            return 0.0
        return (self.successful_trades_count / total_trades) * 100
    
    def add_trade(self, order_result: OrderResult) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.executed_trades.append(order_result)
        
        if order_result.is_successful:
            self.total_commission_paid += order_result.commission
            # –û–±–Ω–æ–≤–ª—è–µ–º P&L
            if order_result.order_type == OrderType.SELL:
                profit = order_result.total_cost - order_result.commission
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
                # —Å —É—á–µ—Ç–æ–º —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
    
    def add_signal(self, signal: TradeSignal) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        self.generated_signals.append(signal)
    
    def get_position(self, currency: str) -> Optional[Position]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–µ"""
        for position in self.positions:
            if position.currency.upper() == currency.upper():
                return position
        return None
    
    def update_balance(self, currency: str, new_balance: Decimal) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        self.current_balance[currency.upper()] = new_balance
    
    def close_session(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.is_active:
            return
        
        self.end_time = datetime.now()
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ P&L
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π


# ================= –ó–ê–í–û–î–°–ö–ò–ï –ú–ï–¢–û–î–´ =================

class ModelFactory:
    """üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    
    @staticmethod
    def create_trading_pair(pair_string: str) -> TradingPair:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        return TradingPair.from_string(pair_string)
    
    @staticmethod
    def create_money(amount: str, currency: str) -> Money:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã"""
        return Money(Decimal(amount), currency)
    
    @staticmethod
    def create_price(value: str, pair: TradingPair, timestamp: Optional[datetime] = None) -> Price:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
        return Price(
            value=Decimal(value),
            pair=pair,
            timestamp=timestamp or datetime.now()
        )
    
    @staticmethod
    def create_buy_signal(pair: TradingPair, quantity: Decimal, price: Optional[Decimal] = None,
                         confidence: float = 0.5, strategy_name: str = "", reason: str = "") -> TradeSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
        return TradeSignal(
            signal_type=StrategySignalType.BUY,
            pair=pair,
            quantity=quantity,
            price=price,
            confidence=confidence,
            strategy_name=strategy_name,
            reason=reason
        )
    
    @staticmethod
    def create_sell_signal(pair: TradingPair, quantity: Decimal, price: Optional[Decimal] = None,
                          confidence: float = 0.5, strategy_name: str = "", reason: str = "") -> TradeSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        return TradeSignal(
            signal_type=StrategySignalType.SELL,
            pair=pair,
            quantity=quantity,
            price=price,
            confidence=confidence,
            strategy_name=strategy_name,
            reason=reason
        )
    
    @staticmethod
    def create_hold_signal(strategy_name: str = "", reason: str = "No action needed") -> TradeSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        return TradeSignal(
            signal_type=StrategySignalType.HOLD,
            confidence=0.0,
            strategy_name=strategy_name,
            reason=reason
        )
    
    @staticmethod
    def create_position(currency: str, quantity: Decimal = Decimal('0'), 
                       avg_price: Decimal = Decimal('0')) -> Position:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        return Position(
            currency=currency.upper(),
            quantity=quantity,
            avg_price=avg_price,
            total_cost=quantity * avg_price
        )
    
    @staticmethod
    def create_market_data(pair: TradingPair, price: Decimal, 
                          volume_24h: Decimal = Decimal('0'),
                          **kwargs) -> MarketData:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        price_obj = Price(value=price, pair=pair)
        return MarketData(
            pair=pair,
            price=price_obj,
            volume_24h=volume_24h,
            **kwargs
        )


# ================= –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =================

class TradingConstants:
    """üéØ –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"""
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    MIN_ORDER_SIZE = Decimal("5.0")  # EUR
    MIN_QUANTITY = Decimal("0.000001")
    MIN_PRICE = Decimal("0.00000001")
    
    # –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    PRICE_PRECISION = 8
    QUANTITY_PRECISION = 6
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    MAX_SIGNAL_AGE_SECONDS = 300  # 5 –º–∏–Ω—É—Ç
    MAX_PRICE_AGE_SECONDS = 60    # 1 –º–∏–Ω—É—Ç–∞
    MAX_MARKET_DATA_AGE_SECONDS = 60  # 1 –º–∏–Ω—É—Ç–∞
    
    # –ö–æ–º–∏—Å—Å–∏–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–ª—è EXMO)
    TAKER_FEE = Decimal("0.003")  # 0.3%
    MAKER_FEE = Decimal("0.002")  # 0.2%
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_TRADING_PAIRS = [
        "DOGE_EUR", "DOGE_USD", "BTC_EUR", "ETH_EUR"
    ]