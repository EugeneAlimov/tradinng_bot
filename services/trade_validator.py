from typing import Tuple
import logging
from config import TradingConfig


class TradeValidator:
    """‚úÖ –ï–¥–∏–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""

    def __init__(self, config: TradingConfig):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.commission_rate = config.AUTO_COMMISSION_RATE

    def validate_profitability(self, order_type: str, price: float,
                             quantity: float, position_price: float = None) -> Tuple[bool, str]:
        """üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏"""

        total_commission = self.commission_rate * 2  # –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ

        if order_type == 'buy':
            # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–∞—Ç—å —Å –ø—Ä–∏–±—ã–ª—å—é
            min_sell_price = price * (1 + self.config.MIN_PROFIT_TO_SELL + total_commission)

            self.logger.debug(f"üí° –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—É–ø–∫–∏:")
            self.logger.debug(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {price:.8f}")
            self.logger.debug(f"   –ú–∏–Ω. —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {min_sell_price:.8f}")
            self.logger.debug(f"   –¢—Ä–µ–±—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")

            return True, "–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞"

        elif order_type == 'sell' and position_price:
            # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã–ª–∏
            profit_percent = (price - position_price) / position_price
            profit_after_commission = profit_percent - total_commission

            self.logger.info(f"üí° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏:")
            self.logger.info(f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {position_price:.8f}")
            self.logger.info(f"   –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {price:.8f}")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å –¥–æ –∫–æ–º–∏—Å—Å–∏–π: {profit_percent * 100:.2f}%")
            self.logger.info(f"   –ü—Ä–∏–±—ã–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: {profit_after_commission * 100:.2f}%")
            self.logger.info(f"   –¢—Ä–µ–±—É–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å: {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%")

            if profit_percent < self.config.MIN_PROFIT_TO_SELL:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent * 100:.2f}% < {self.config.MIN_PROFIT_TO_SELL * 100:.1f}%"

            if profit_after_commission < 0:
                return False, f"–£–±—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: {profit_after_commission * 100:.2f}%"

            return True, f"–ü—Ä–∏–±—ã–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {profit_after_commission * 100:.2f}%"

        return True, "OK"

    def validate_position_size(self, position_size: float, balance: float) -> Tuple[bool, str]:
        """üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        max_position_value = balance * self.config.MAX_POSITION_SIZE

        if position_size > max_position_value:
            return False, f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size:.2f} > –ª–∏–º–∏—Ç–∞ {max_position_value:.2f}"

        return True, "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ"

    def validate_order_limits(self, pair: str, quantity: float, price: float,
                            pair_settings: dict) -> Tuple[bool, str]:
        """üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        pair_info = pair_settings.get(pair, {})

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        min_quantity = float(pair_info.get('min_quantity', 0))
        if quantity < min_quantity:
            return False, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity:.6f} < –º–∏–Ω–∏–º—É–º–∞ {min_quantity:.6f}"

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        min_amount = float(pair_info.get('min_amount', 0))
        order_amount = quantity * price
        if order_amount < min_amount:
            return False, f"–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {order_amount:.4f} < –º–∏–Ω–∏–º—É–º–∞ {min_amount:.4f}"

        return True, "–õ–∏–º–∏—Ç—ã –æ—Ä–¥–µ—Ä–∞ —Å–æ–±–ª—é–¥–µ–Ω—ã"
