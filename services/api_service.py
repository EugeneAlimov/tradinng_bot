import time
import logging
from typing import Dict, Any, Optional, Tuple
from config import TradingConfig


class APIService:
    """üåê –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö API –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(self, api_client, config: TradingConfig):
        self.api = api_client
        self.config = config
        self.logger = logging.getLogger(__name__)

        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._balance_cache = {}
        self._price_cache = {}
        self._pair_settings_cache = None
        self._cache_timeout = 5  # 5 —Å–µ–∫—É–Ω–¥

    def get_balance(self, currency: str) -> float:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"balance_{currency}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self._is_cache_valid(cache_key):
            return self._balance_cache[cache_key]['value']

        try:
            user_info = self.api.get_user_info()
            balance = float(user_info.get('balances', {}).get(currency, 0))

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._balance_cache[cache_key] = {
                'value': balance,
                'timestamp': time.time()
            }

            self.logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å {currency}: {balance}")
            return balance

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {currency}: {e}")
            return 0.0

    def get_balances(self) -> Dict[str, float]:
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        try:
            user_info = self.api.get_user_info()
            balances = user_info.get('balances', {})

            # –ö—ç—à–∏—Ä—É–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
            current_time = time.time()
            for currency, balance in balances.items():
                cache_key = f"balance_{currency}"
                self._balance_cache[cache_key] = {
                    'value': float(balance),
                    'timestamp': current_time
                }

            return {k: float(v) for k, v in balances.items()}

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}

    def get_current_price(self, pair: str) -> float:
        """üí± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"price_{pair}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ü–µ–Ω - 2 —Å–µ–∫—É–Ω–¥—ã)
        if self._is_cache_valid(cache_key, timeout=2):
            return self._price_cache[cache_key]['value']

        try:
            trades = self.api.get_trades(pair)
            if pair in trades and trades[pair]:
                price = float(trades[pair][0]['price'])

                # –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—É
                self._price_cache[cache_key] = {
                    'value': price,
                    'timestamp': time.time()
                }

                return price
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {pair}: {e}")

        return 0.0

    def create_order_safe(self, pair: str, quantity: float,
                          price: float, order_type: str) -> Dict[str, Any]:
        """üìù –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –µ–¥–∏–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""

        # –ï–¥–∏–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not self._validate_order_params(pair, quantity, price, order_type):
            return {'result': False, 'error': 'Invalid order parameters'}

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            pair_settings = self.get_pair_settings()
            pair_info = pair_settings.get(pair, {})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            min_quantity = float(pair_info.get('min_quantity', 5.0))
            if quantity < min_quantity:
                self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity:.6f} < –º–∏–Ω–∏–º—É–º–∞ {min_quantity:.6f}, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º")
                quantity = min_quantity

            # –ï–¥–∏–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
            precision = int(pair_info.get('price_precision', 8))
            price_rounded = round(price, precision)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            min_amount = float(pair_info.get('min_amount', 10.0))
            order_amount = quantity * price_rounded

            if order_amount < min_amount:
                return {
                    'result': False,
                    'error': f'Order amount {order_amount:.4f} < minimum {min_amount}'
                }

            # –ï–¥–∏–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {order_type.upper()} {quantity:.6f} {pair} –ø–æ {price_rounded:.8f}")

            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            result = self.api.create_order(pair, quantity, price_rounded, order_type)

            if result.get('result'):
                self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ID {result.get('order_id', 'N/A')}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                self._invalidate_balance_cache()
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result}")

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {'result': False, 'error': str(e)}

    def get_pair_settings(self) -> Dict[str, Any]:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä –Ω–∞ 1 —á–∞—Å (–æ–Ω–∏ —Ä–µ–¥–∫–æ –º–µ–Ω—è—é—Ç—Å—è)
        if (self._pair_settings_cache and
                time.time() - self._pair_settings_cache['timestamp'] < 3600):
            return self._pair_settings_cache['data']

        try:
            settings = self.api.get_pair_settings()
            self._pair_settings_cache = {
                'data': settings,
                'timestamp': time.time()
            }
            return settings

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä: {e}")
            return {}

    def get_open_orders(self):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        return self.api.get_open_orders()

    def cancel_order(self, order_id: int):
        """‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        result = self.api.cancel_order(order_id)
        if result.get('result'):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
            self._invalidate_balance_cache()
        return result

    def get_user_trades(self, pair: str, limit: int = 100):
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        return self.api.get_user_trades(pair, limit)

    def get_order_trades(self, order_id: int):
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –æ—Ä–¥–µ—Ä—É (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        return self.api.get_order_trades(order_id)

    def get_user_info(self):
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        return self.api.get_user_info()

    def create_order(self, pair: str, quantity: float, price: float, order_type: str):
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç create_order_safe)"""
        return self.create_order_safe(pair, quantity, price, order_type)

    def check_connection(self) -> bool:
        """üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ API)"""
        return self.api.check_connection()

    def _validate_order_params(self, pair: str, quantity: float,
                               price: float, order_type: str) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞"""
        if not pair or not isinstance(pair, str):
            self.logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞—Ä–∞")
            return False

        if quantity <= 0:
            self.logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
            return False

        if price <= 0:
            self.logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞: {price}")
            return False

        if order_type not in ['buy', 'sell']:
            self.logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}")
            return False

        return True

    def _is_cache_valid(self, cache_key: str, timeout: int = None) -> bool:
        """‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        if timeout is None:
            timeout = self._cache_timeout

        cache_dict = None
        if cache_key.startswith('balance_'):
            cache_dict = self._balance_cache
        elif cache_key.startswith('price_'):
            cache_dict = self._price_cache

        if not cache_dict or cache_key not in cache_dict:
            return False

        age = time.time() - cache_dict[cache_key]['timestamp']
        return age < timeout

    def _invalidate_balance_cache(self):
        """üóëÔ∏è –°–±—Ä–æ—Å –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        self._balance_cache.clear()
        self.logger.debug("üóëÔ∏è –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω")

    def get_cache_stats(self) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        return {
            'balance_cache_size': len(self._balance_cache),
            'price_cache_size': len(self._price_cache),
            'pair_settings_cached': self._pair_settings_cache is not None
        }