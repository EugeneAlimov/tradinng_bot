#!/usr/bin/env python3
"""üöÄ –ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —ç—Ç–∞–ø–∞ 1: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""

import sys
import os
import time
from pathlib import Path
from typing import Dict, Any
import json


class Stage1Runner:
    """üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 1"""
    
    def __init__(self):
        self.root_path = Path(".")
        self.results = {}
        self.start_time = time.time()
        
        print("üîç –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        print("=" * 50)
        print("üìã –ó–∞–¥–∞—á–∏ —ç—Ç–∞–ø–∞:")
        print("  1.1 üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("  1.2 üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ") 
        print("  1.3 üîó –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("  1.4 üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("=" * 50)
    
    def run_complete_stage1(self) -> bool:
        """üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ 1"""
        
        success = True
        
        try:
            # 1.1 –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print("\nüìä –®–∞–≥ 1.1: –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            inventory_result = self._run_component_inventory()
            success = success and inventory_result
            
            # 1.2 –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            print("\nüèóÔ∏è –®–∞–≥ 1.2: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            architecture_result = self._run_architecture_planning()
            success = success and architecture_result
            
            # 1.3 –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            print("\nüîó –®–∞–≥ 1.3: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            dependency_result = self._run_dependency_analysis()
            success = success and dependency_result
            
            # 1.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            print("\nüîç –®–∞–≥ 1.4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
            readiness_result = self._run_integration_check()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self._generate_stage1_summary()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            overall_success = (inventory_result and architecture_result and 
                             dependency_result and readiness_result)
            
            self._print_final_results(overall_success)
            
            return overall_success
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç—Ç–∞–ø–∞ 1: {e}")
            return False
    
    def _run_component_inventory(self) -> bool:
        """üìä –ó–∞–ø—É—Å–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
            inventory_file = self.root_path / "component_inventory.py"
            if not inventory_file.exists():
                print("‚ùå –§–∞–π–ª component_inventory.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
            sys.path.insert(0, str(self.root_path))
            
            from component_inventory import ComponentInventory
            
            inventory = ComponentInventory()
            report = inventory.analyze_project()
            
            self.results['inventory'] = {
                'success': True,
                'metrics': report['metrics'],
                'issues_count': sum(len(issues) for issues in report['issues'].values()),
                'critical_path_length': len(report['critical_path']),
                'recommendations_count': len(report['migration_recommendations'])
            }
            
            print(f"‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {report['metrics']['total_components']}")
            print(f"   üìú Legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {report['metrics']['legacy_components']}")
            print(f"   üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {report['metrics']['critical_components']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.results['inventory'] = {'success': False, 'error': str(e)}
            return False
    
    def _run_architecture_planning(self) -> bool:
        """üèóÔ∏è –ó–∞–ø—É—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            architecture_file = self.root_path / "architecture_planner.py"
            if not architecture_file.exists():
                print("‚ùå –§–∞–π–ª architecture_planner.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            from architecture_planner import ArchitecturePlanner
            
            planner = ArchitecturePlanner()
            plan = planner.create_clean_architecture_plan()
            timeline = planner.generate_migration_timeline()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Å–ª–æ—è–º
            all_components = []
            seen = set()
            for context in plan.contexts.values():
                for comp in context.components:
                    if comp.name not in seen:
                        all_components.append(comp)
                        seen.add(comp.name)
            
            layer_stats = {}
            for comp in all_components:
                layer = comp.layer.value
                layer_stats[layer] = layer_stats.get(layer, 0) + 1
            
            self.results['architecture'] = {
                'success': True,
                'contexts_count': len(plan.contexts),
                'total_components': len(all_components),
                'layer_distribution': layer_stats,
                'estimated_days': timeline['total_estimate']['days'],
                'estimated_lines': timeline['total_estimate']['total_lines_estimate']
            }
            
            print(f"‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            print(f"   üóÇÔ∏è Bounded contexts: {len(plan.contexts)}")
            print(f"   üèóÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(all_components)}")
            print(f"   ‚è±Ô∏è –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {timeline['total_estimate']['days']} –¥–Ω–µ–π")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.results['architecture'] = {'success': False, 'error': str(e)}
            return False
    
    def _run_dependency_analysis(self) -> bool:
        """üîó –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            dependency_file = self.root_path / "dependency_analyzer.py"
            if not dependency_file.exists():
                print("‚ùå –§–∞–π–ª dependency_analyzer.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            from dependency_analyzer import DependencyAnalyzer
            
            analyzer = DependencyAnalyzer()
            analysis = analyzer.analyze_dependencies()
            
            self.results['dependencies'] = {
                'success': True,
                'components_count': analysis['metrics']['total_components'],
                'dependencies_count': analysis['metrics']['total_dependencies'],
                'cycles_count': len(analysis['cycles']),
                'critical_path_length': len(analysis['critical_path']),
                'coupling_ratio': analysis['metrics']['coupling_ratio'],
                'migration_batches': len(analysis['migration_order'])
            }
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω:")
            print(f"   üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {analysis['metrics']['total_dependencies']}")
            print(f"   üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(analysis['cycles'])}")
            print(f"   üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {analysis['metrics']['coupling_ratio']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.results['dependencies'] = {'success': False, 'error': str(e)}
            return False
    
    def _run_integration_check(self) -> bool:
        """üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            integration_file = self.root_path / "integration_checker.py"
            if not integration_file.exists():
                print("‚ùå –§–∞–π–ª integration_checker.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            from integration_checker import IntegrationChecker
            
            checker = IntegrationChecker()
            report = checker.run_comprehensive_check()
            
            summary = report['summary']
            issues = report['issues']
            
            self.results['integration'] = {
                'success': True,
                'readiness_score': summary['readiness_score'],
                'readiness_level': summary['readiness_level'],
                'total_checks': summary['total_checks'],
                'passed_checks': summary['passed_checks'],
                'critical_issues': issues['critical'],
                'warnings': issues['warnings']
            }
            
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            print(f"   üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {summary['readiness_score']}%")
            print(f"   üö® –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {issues['critical']}")
            print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {issues['warnings']}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å > 60% –∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            return (summary['readiness_score'] >= 60 and issues['critical'] == 0)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
            self.results['integration'] = {'success': False, 'error': str(e)}
            return False
    
    def _generate_stage1_summary(self) -> None:
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —ç—Ç–∞–ø–∞ 1"""
        
        elapsed_time = time.time() - self.start_time
        
        summary = {
            'stage': 1,
            'name': '–ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'execution_time_minutes': round(elapsed_time / 60, 2),
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'results': self.results,
            'overall_success': all(
                result.get('success', False) 
                for result in self.results.values()
            ),
            'next_steps': self._generate_next_steps(),
            'critical_findings': self._extract_critical_findings(),
            'recommendations': self._generate_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        output_file = "stage1_analysis_summary.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        print(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —ç—Ç–∞–ø–∞ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        
        self.results['summary'] = summary
    
    def _generate_next_steps(self) -> list:
        """üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        next_steps = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        if not self.results.get('integration', {}).get('success', False):
            next_steps.append("üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        cycles_count = self.results.get('dependencies', {}).get('cycles_count', 0)
        if cycles_count > 3:
            next_steps.append("üîÑ –í–ê–ñ–ù–û: –†–∞–∑—Ä–µ—à–∏—Ç–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
        readiness_score = self.results.get('integration', {}).get('readiness_score', 0)
        if readiness_score < 80:
            next_steps.append("‚ö†Ô∏è –ü–æ–≤—ã—Å—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –¥–æ 80%+")
        
        # –û–±—â–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps.extend([
            "üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "üéØ –ù–∞—á–Ω–∏—Ç–µ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞ (Core —Å–ª–æ–π)",
            "üèóÔ∏è –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏",
            "üíâ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Dependency Injection",
            "üß™ –î–æ–±–∞–≤—å—Ç–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        ])
        
        return next_steps
    
    def _extract_critical_findings(self) -> list:
        """üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ö–æ–¥–æ–∫"""
        findings = []
        
        # –ò–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
        inventory = self.results.get('inventory', {})
        if inventory.get('success'):
            issues_count = inventory.get('issues_count', 0)
            if issues_count > 10:
                findings.append(f"üìä –ù–∞–π–¥–µ–Ω–æ {issues_count} –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")
        
        # –ò–∑ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        dependencies = self.results.get('dependencies', {})
        if dependencies.get('success'):
            cycles = dependencies.get('cycles_count', 0)
            coupling = dependencies.get('coupling_ratio', 0)
            
            if cycles > 0:
                findings.append(f"üîÑ {cycles} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ç—Ä–µ–±—É—é—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞")
            if coupling > 3:
                findings.append(f"üîó –í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {coupling})")
        
        # –ò–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        integration = self.results.get('integration', {})
        if integration.get('success'):
            critical_issues = integration.get('critical_issues', 0)
            if critical_issues > 0:
                findings.append(f"üö® {critical_issues} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        return findings
    
    def _generate_recommendations(self) -> list:
        """üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        coupling_ratio = self.results.get('dependencies', {}).get('coupling_ratio', 0)
        if coupling_ratio > 2:
            recommendations.append("üîó –†–∞–∑–±–µ–π—Ç–µ –≤—ã—Å–æ–∫–æ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –º–æ–¥—É–ª–∏")
        
        cycles_count = self.results.get('dependencies', {}).get('cycles_count', 0)
        if cycles_count > 0:
            recommendations.append("üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω Dependency Inversion –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Ü–∏–∫–ª–æ–≤")
        
        legacy_percentage = 70  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if legacy_percentage > 60:
            recommendations.append("üìú –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ legacy –∫–æ–¥–∞")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations.extend([
            "üèóÔ∏è –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Core —Å–ª–æ—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –º–æ–¥–µ–ª–∏)",
            "üíâ –í–Ω–µ–¥—Ä–∏—Ç–µ Dependency Injection –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏",
            "üß™ –î–æ–±–∞–≤—å—Ç–µ unit —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º",
            "üìö –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "üîç –ü—Ä–æ–≤–æ–¥–∏—Ç–µ code review –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
        ])
        
        return recommendations
    
    def _print_final_results(self, overall_success: bool) -> None:
        """üìä –ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        elapsed_time = time.time() - self.start_time
        
        print("\n" + "="*60)
        print("üìã –ò–¢–û–ì–ò –≠–¢–ê–ü–ê 1: –ê–ù–ê–õ–ò–ó –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï")
        print("="*60)
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if overall_success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —à–∞–≥–∞–º
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –®–ê–ì–ê–ú:")
        steps = [
            ("1.1 –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", "inventory"),
            ("1.2 –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "architecture"), 
            ("1.3 –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "dependencies"),
            ("1.4 –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", "integration")
        ]
        
        for step_name, step_key in steps:
            result = self.results.get(step_key, {})
            status = "‚úÖ" if result.get('success', False) else "‚ùå"
            print(f"  {status} {step_name}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        findings = self._extract_critical_findings()
        if findings:
            print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
            for finding in findings[:5]:
                print(f"  ‚Ä¢ {finding}")
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps = self._generate_next_steps()
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        for i, step in enumerate(next_steps[:5], 1):
            print(f"  {i}. {step}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if overall_success:
            print(f"\nüéâ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –≠–¢–ê–ü–£ 2:")
            print(f"  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            print(f"  ‚úÖ –ü–ª–∞–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω")
            print(f"  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            print(f"  ‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 2: –°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞")
        else:
            print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê:")
            print(f"  üî¥ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print(f"  üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print(f"  üìã –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ >= 80%")
        
        print("="*60)


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≠—Ç–∞–ø 1)")
    print("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 5-10 –º–∏–Ω—É—Ç")
    
    try:
        runner = Stage1Runner()
        success = runner.run_complete_stage1()
        
        if success:
            print(f"\nüéâ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìã –ò–∑—É—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:")
            print(f"  ‚Ä¢ component_inventory_report.json")
            print(f"  ‚Ä¢ architecture_plan.json")
            print(f"  ‚Ä¢ dependency_analysis.json")
            print(f"  ‚Ä¢ integration_readiness_report.json")
            print(f"  ‚Ä¢ stage1_analysis_summary.json")
            print(f"\nüöÄ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —è–¥—Ä–∞")
            return True
        else:
            print(f"\n‚ö†Ô∏è –≠–¢–ê–ü 1 –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
            print(f"üîç –ò–∑—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞")
            return False
    
    except KeyboardInterrupt:
        print(f"\n‚å®Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
        return False


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)