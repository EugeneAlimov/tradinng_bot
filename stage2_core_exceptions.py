#!/usr/bin/env python3
"""üö® –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - Core —Å–ª–æ–π"""

from typing import Optional, Dict, Any, List, Callable
from decimal import Decimal
from datetime import datetime
import functools
import time


# ================= –ë–ê–ó–û–í–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class TradingSystemError(Exception):
    """üö® –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self, message: str, error_code: Optional[str] = None,
                 context: Optional[Dict[str, Any]] = None):
        super().__init__(message)
        self.message = message
        self.error_code = error_code or self.__class__.__name__
        self.context = context or {}
        self.timestamp = datetime.now()

    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'error_type': self.__class__.__name__,
            'error_code': self.error_code,
            'message': self.message,
            'context': self.context,
            'timestamp': self.timestamp.isoformat()
        }

    def __str__(self) -> str:
        if self.context:
            context_str = ", ".join(f"{k}={v}" for k, v in self.context.items())
            return f"{self.message} (Context: {context_str})"
        return self.message


class ValidationError(TradingSystemError):
    """‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    def __init__(self, message: str, field: Optional[str] = None,
                 value: Optional[Any] = None, **kwargs):
        context = kwargs.get('context', {})
        if field:
            context['field'] = field
        if value is not None:
            context['value'] = str(value)

        super().__init__(message, context=context, **kwargs)
        self.field = field
        self.value = value


class ConfigurationError(TradingSystemError):
    """‚öôÔ∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self, message: str, config_key: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        if config_key:
            context['config_key'] = config_key

        super().__init__(message, context=context, **kwargs)
        self.config_key = config_key


# ================= API –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class APIError(TradingSystemError):
    """üåê –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ API"""

    def __init__(self, message: str, status_code: Optional[int] = None,
                 response_data: Optional[Dict[str, Any]] = None, **kwargs):
        context = kwargs.get('context', {})
        if status_code:
            context['status_code'] = status_code
        if response_data:
            context['response_data'] = response_data

        super().__init__(message, context=context, **kwargs)
        self.status_code = status_code
        self.response_data = response_data


class APIConnectionError(APIError):
    """üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""

    def __init__(self, message: str = "Failed to connect to exchange API", **kwargs):
        super().__init__(message, **kwargs)


class APITimeoutError(APIError):
    """‚è∞ –¢–∞–π–º–∞—É—Ç API –∑–∞–ø—Ä–æ—Å–∞"""

    def __init__(self, message: str = "API request timeout",
                 timeout_seconds: Optional[float] = None, **kwargs):
        context = kwargs.get('context', {})
        if timeout_seconds:
            context['timeout_seconds'] = timeout_seconds

        super().__init__(message, context=context, **kwargs)
        self.timeout_seconds = timeout_seconds


class APIRateLimitError(APIError):
    """‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ API"""

    def __init__(self, message: str = "API rate limit exceeded",
                 retry_after: Optional[int] = None, **kwargs):
        context = kwargs.get('context', {})
        if retry_after:
            context['retry_after_seconds'] = retry_after

        super().__init__(message, context=context, **kwargs)
        self.retry_after = retry_after


class APIAuthenticationError(APIError):
    """üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API"""

    def __init__(self, message: str = "API authentication failed", **kwargs):
        super().__init__(message, error_code="API_AUTH_FAILED", **kwargs)


class APIInvalidResponseError(APIError):
    """üìÑ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"""

    def __init__(self, message: str = "Invalid API response format",
                 expected_format: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        if expected_format:
            context['expected_format'] = expected_format

        super().__init__(message, context=context, **kwargs)
        self.expected_format = expected_format


# ================= –¢–û–†–ì–û–í–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class TradingError(TradingSystemError):
    """üìà –ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –æ—à–∏–±–∫–∞"""
    pass


class InsufficientBalanceError(TradingError):
    """üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å"""

    def __init__(self, message: str, currency: str, required_amount: Decimal,
                 available_amount: Decimal, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'currency': currency,
            'required_amount': str(required_amount),
            'available_amount': str(available_amount),
            'deficit': str(required_amount - available_amount)
        })

        super().__init__(message, context=context, **kwargs)
        self.currency = currency
        self.required_amount = required_amount
        self.available_amount = available_amount


class InvalidOrderParametersError(TradingError):
    """üìã –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞"""

    def __init__(self, message: str, pair: Optional[str] = None,
                 quantity: Optional[Decimal] = None, price: Optional[Decimal] = None, **kwargs):
        context = kwargs.get('context', {})
        if pair:
            context['trading_pair'] = pair
        if quantity is not None:
            context['quantity'] = str(quantity)
        if price is not None:
            context['price'] = str(price)

        super().__init__(message, context=context, **kwargs)
        self.pair = pair
        self.quantity = quantity
        self.price = price


class OrderExecutionError(TradingError):
    """‚ö° –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""

    def __init__(self, message: str, order_id: Optional[str] = None,
                 exchange_error: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        if order_id:
            context['order_id'] = order_id
        if exchange_error:
            context['exchange_error'] = exchange_error

        super().__init__(message, context=context, **kwargs)
        self.order_id = order_id
        self.exchange_error = exchange_error


class OrderNotFoundError(TradingError):
    """üîç –û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"""

    def __init__(self, message: str, order_id: str, **kwargs):
        context = kwargs.get('context', {})
        context['order_id'] = order_id

        super().__init__(message, context=context, **kwargs)
        self.order_id = order_id


class PositionNotFoundError(TradingError):
    """üìä –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"""

    def __init__(self, message: str, currency: str, **kwargs):
        context = kwargs.get('context', {})
        context['currency'] = currency

        super().__init__(message, context=context, **kwargs)
        self.currency = currency


class InvalidTradingPairError(TradingError):
    """üí± –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"""

    def __init__(self, message: str, pair: str, **kwargs):
        context = kwargs.get('context', {})
        context['trading_pair'] = pair

        super().__init__(message, context=context, **kwargs)
        self.pair = pair


# ================= –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class StrategyError(TradingSystemError):
    """üéØ –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    pass


class StrategyNotFoundError(StrategyError):
    """üîç –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"""

    def __init__(self, message: str, strategy_name: str, **kwargs):
        context = kwargs.get('context', {})
        context['strategy_name'] = strategy_name

        super().__init__(message, context=context, **kwargs)
        self.strategy_name = strategy_name


class StrategyExecutionError(StrategyError):
    """‚ö° –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""

    def __init__(self, message: str, strategy_name: str,
                 execution_step: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['strategy_name'] = strategy_name
        if execution_step:
            context['execution_step'] = execution_step

        super().__init__(message, context=context, **kwargs)
        self.strategy_name = strategy_name
        self.execution_step = execution_step


class InvalidSignalError(StrategyError):
    """üìà –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""

    def __init__(self, message: str, signal_data: Optional[Dict[str, Any]] = None, **kwargs):
        context = kwargs.get('context', {})
        if signal_data:
            context['signal_data'] = signal_data

        super().__init__(message, context=context, **kwargs)
        self.signal_data = signal_data


class StaleSignalError(StrategyError):
    """‚è∞ –£—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""

    def __init__(self, message: str, signal_age_seconds: float,
                 max_age_seconds: float, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'signal_age_seconds': signal_age_seconds,
            'max_age_seconds': max_age_seconds
        })

        super().__init__(message, context=context, **kwargs)
        self.signal_age_seconds = signal_age_seconds
        self.max_age_seconds = max_age_seconds


# ================= –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class RiskManagementError(TradingSystemError):
    """üõ°Ô∏è –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    pass


class RiskLimitExceededError(RiskManagementError):
    """üö® –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–∏—Å–∫–∞"""

    def __init__(self, message: str, risk_type: str, current_value: Decimal,
                 limit_value: Decimal, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'risk_type': risk_type,
            'current_value': str(current_value),
            'limit_value': str(limit_value),
            'excess_amount': str(current_value - limit_value)
        })

        super().__init__(message, context=context, **kwargs)
        self.risk_type = risk_type
        self.current_value = current_value
        self.limit_value = limit_value


class MaxDrawdownExceededError(RiskManagementError):
    """üìâ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""

    def __init__(self, message: str, current_drawdown: Decimal,
                 max_drawdown: Decimal, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'current_drawdown_percent': str(current_drawdown),
            'max_drawdown_percent': str(max_drawdown)
        })

        super().__init__(message, context=context, **kwargs)
        self.current_drawdown = current_drawdown
        self.max_drawdown = max_drawdown


class EmergencyStopTriggeredError(RiskManagementError):
    """üö® –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""

    def __init__(self, message: str, trigger_reason: str, **kwargs):
        context = kwargs.get('context', {})
        context['trigger_reason'] = trigger_reason

        super().__init__(message, context=context, **kwargs)
        self.trigger_reason = trigger_reason


# ================= DEPENDENCY INJECTION –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class DependencyInjectionError(TradingSystemError):
    """üíâ –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ DI"""
    pass


class ServiceNotRegisteredError(DependencyInjectionError):
    """üìã –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"""

    def __init__(self, message: str, service_type: str, **kwargs):
        context = kwargs.get('context', {})
        context['service_type'] = service_type

        super().__init__(message, context=context, **kwargs)
        self.service_type = service_type


class CircularDependencyError(DependencyInjectionError):
    """üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"""

    def __init__(self, message: str, dependency_chain: List[str], **kwargs):
        context = kwargs.get('context', {})
        context['dependency_chain'] = dependency_chain

        super().__init__(message, context=context, **kwargs)
        self.dependency_chain = dependency_chain


class ServiceCreationError(DependencyInjectionError):
    """üè≠ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""

    def __init__(self, message: str, service_type: str,
                 creation_error: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['service_type'] = service_type
        if creation_error:
            context['creation_error'] = creation_error

        super().__init__(message, context=context, **kwargs)
        self.service_type = service_type
        self.creation_error = creation_error


# ================= –°–û–ë–´–¢–ò–ô–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class EventError(TradingSystemError):
    """üì° –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
    pass


class EventHandlerError(EventError):
    """üéØ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, message: str, event_type: str, handler_name: str, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'event_type': event_type,
            'handler_name': handler_name
        })

        super().__init__(message, context=context, **kwargs)
        self.event_type = event_type
        self.handler_name = handler_name


class EventBusError(EventError):
    """üì° –û—à–∏–±–∫–∞ —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π"""

    def __init__(self, message: str, bus_operation: str, **kwargs):
        context = kwargs.get('context', {})
        context['bus_operation'] = bus_operation

        super().__init__(message, context=context, **kwargs)
        self.bus_operation = bus_operation


# ================= –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò =================

class PersistenceError(TradingSystemError):
    """üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, message: str, operation: str, entity_type: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['operation'] = operation
        if entity_type:
            context['entity_type'] = entity_type

        super().__init__(message, context=context, **kwargs)
        self.operation = operation
        self.entity_type = entity_type


class DataIntegrityError(PersistenceError):
    """üîç –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, message: str, constraint: str, **kwargs):
        context = kwargs.get('context', {})
        context['constraint'] = constraint

        super().__init__(message, "integrity_check", context=context, **kwargs)
        self.constraint = constraint


# ================= –°–ò–°–¢–ï–ú–ù–´–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø =================

class SystemNotReadyError(TradingSystemError):
    """üö¶ –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"""

    def __init__(self, message: str, component: str, reason: str, **kwargs):
        context = kwargs.get('context', {})
        context.update({
            'component': component,
            'reason': reason
        })

        super().__init__(message, context=context, **kwargs)
        self.component = component
        self.reason = reason


class CircuitBreakerOpenError(TradingSystemError):
    """üîå Circuit breaker –æ—Ç–∫—Ä—ã—Ç"""

    def __init__(self, message: str, service: str, retry_after: Optional[int] = None, **kwargs):
        context = kwargs.get('context', {})
        context['service'] = service
        if retry_after:
            context['retry_after_seconds'] = retry_after

        super().__init__(message, context=context, **kwargs)
        self.service = service
        self.retry_after = retry_after


class ResourceExhaustionError(TradingSystemError):
    """üíæ –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""

    def __init__(self, message: str, resource_type: str,
                 current_usage: Optional[str] = None, **kwargs):
        context = kwargs.get('context', {})
        context['resource_type'] = resource_type
        if current_usage:
            context['current_usage'] = current_usage

        super().__init__(message, context=context, **kwargs)
        self.resource_type = resource_type
        self.current_usage = current_usage


# ================= –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô =================

class ExceptionHandler:
    """üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

    @staticmethod
    def log_exception(exception: Exception, logger=None) -> None:
        """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è"""
        if logger is None:
            import logging
            logger = logging.getLogger(__name__)

        if isinstance(exception, TradingSystemError):
            logger.error(f"TradingSystemError: {exception.to_dict()}")
        else:
            logger.error(f"Unexpected error: {type(exception).__name__}: {str(exception)}")

    @staticmethod
    def handle_api_error(func):
        """üõ°Ô∏è –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –æ—à–∏–±–æ–∫"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except APIError:
                raise  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ API –æ—à–∏–±–∫–∏
            except Exception as e:
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ API –æ—à–∏–±–∫—É
                raise APIError(f"Unexpected API error: {str(e)}") from e
        return wrapper

    @staticmethod
    def handle_trading_error(func):
        """üõ°Ô∏è –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except TradingError:
                raise  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            except Exception as e:
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ç–æ—Ä–≥–æ–≤—É—é –æ—à–∏–±–∫—É
                raise TradingError(f"Unexpected trading error: {str(e)}") from e
        return wrapper

    @staticmethod
    def with_retry(max_attempts: int = 3, delay_seconds: float = 1.0,
                   exceptions: tuple = (APITimeoutError, APIConnectionError)):
        """üîÑ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                last_exception = None
                for attempt in range(max_attempts):
                    try:
                        return func(*args, **kwargs)
                    except exceptions as e:
                        last_exception = e
                        if attempt < max_attempts - 1:
                            time.sleep(delay_seconds * (attempt + 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        continue
                    except Exception as e:
                        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                        raise e

                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                raise last_exception
            return wrapper
        return decorator

    @staticmethod
    def is_retryable_error(exception: Exception) -> bool:
        """üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        retryable_types = (
            APITimeoutError,
            APIConnectionError,
            APIRateLimitError,
            ResourceExhaustionError
        )
        return isinstance(exception, retryable_types)

    @staticmethod
    def get_retry_delay(exception: Exception, attempt: int) -> float:
        """‚è±Ô∏è –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
        base_delay = 1.0

        if isinstance(exception, APIRateLimitError) and exception.retry_after:
            return float(exception.retry_after)
        elif isinstance(exception, APITimeoutError):
            return base_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        elif isinstance(exception, APIConnectionError):
            return base_delay * attempt  # –õ–∏–Ω–µ–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        return base_delay


# ================= –§–ê–ë–†–ò–ö–ê –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô =================

class ExceptionFactory:
    """üè≠ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

    @staticmethod
    def create_api_error(status_code: int, message: str,
                        response_data: Optional[Dict[str, Any]] = None) -> APIError:
        """üåê –°–æ–∑–¥–∞–Ω–∏–µ API –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É —Å—Ç–∞—Ç—É—Å–∞"""
        if status_code == 401:
            return APIAuthenticationError(message, response_data=response_data)
        elif status_code == 429:
            retry_after = None
            if response_data and 'retry_after' in response_data:
                retry_after = response_data['retry_after']
            return APIRateLimitError(message, retry_after=retry_after)
        elif status_code >= 500:
            return APIConnectionError(f"Server error: {message}")
        elif status_code == 408:
            return APITimeoutError(message)
        else:
            return APIError(message, status_code=status_code, response_data=response_data)

    @staticmethod
    def create_trading_error(error_type: str, message: str, **kwargs) -> TradingError:
        """üìà –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É"""
        if error_type == "insufficient_balance":
            return InsufficientBalanceError(message, **kwargs)
        elif error_type == "invalid_order":
            return InvalidOrderParametersError(message, **kwargs)
        elif error_type == "order_execution":
            return OrderExecutionError(message, **kwargs)
        elif error_type == "order_not_found":
            return OrderNotFoundError(message, **kwargs)
        elif error_type == "position_not_found":
            return PositionNotFoundError(message, **kwargs)
        elif error_type == "invalid_pair":
            return InvalidTradingPairError(message, **kwargs)
        else:
            return TradingError(message, **kwargs)

    @staticmethod
    def create_validation_error(field: str, value: Any, rule: str) -> ValidationError:
        """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        message = f"Field '{field}' with value '{value}' violates rule: {rule}"
        return ValidationError(message, field=field, value=value)


# ================= –í–ê–õ–ò–î–ê–¢–û–†–´ –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô =================

class ExceptionValidator:
    """‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

    @staticmethod
    def validate_error_context(context: Dict[str, Any]) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not isinstance(context, dict):
            errors.append("Context must be a dictionary")
            return errors

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in context.items():
            if value is None:
                errors.append(f"Context key '{key}' cannot be None")
            elif isinstance(value, str) and not value.strip():
                errors.append(f"Context key '{key}' cannot be empty string")

        return errors

    @staticmethod
    def is_critical_error(exception: Exception) -> bool:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"""
        critical_types = (
            APIAuthenticationError,
            EmergencyStopTriggeredError,
            MaxDrawdownExceededError,
            SystemNotReadyError,
            CircularDependencyError
        )
        return isinstance(exception, critical_types)

    @staticmethod
    def should_stop_trading(exception: Exception) -> bool:
        """üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        stop_trading_types = (
            APIAuthenticationError,
            EmergencyStopTriggeredError,
            MaxDrawdownExceededError,
            RiskLimitExceededError
        )
        return isinstance(exception, stop_trading_types)


# ================= –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö =================

_global_exception_handler: Optional[ExceptionHandler] = None


def set_global_exception_handler(handler: ExceptionHandler) -> None:
    """üåç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    global _global_exception_handler
    _global_exception_handler = handler


def get_global_exception_handler() -> ExceptionHandler:
    """üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    global _global_exception_handler
    if _global_exception_handler is None:
        _global_exception_handler = ExceptionHandler()
    return _global_exception_handler


def log_error(exception: Exception) -> None:
    """üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    handler = get_global_exception_handler()
    handler.log_exception(exception)


# ================= –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =================

def format_exception_for_user(exception: Exception) -> str:
    """üë§ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if isinstance(exception, APIAuthenticationError):
        return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞."
    elif isinstance(exception, APIRateLimitError):
        retry_msg = f" –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {exception.retry_after}—Å." if exception.retry_after else ""
        return f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.{retry_msg}"
    elif isinstance(exception, InsufficientBalanceError):
        return f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {exception.required_amount} {exception.currency}, –¥–æ—Å—Ç—É–ø–Ω–æ {exception.available_amount}"
    elif isinstance(exception, RiskLimitExceededError):
        return f"üö® –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∏—Å–∫–∞: {exception.risk_type} ({exception.current_value} > {exception.limit_value})"
    elif isinstance(exception, TradingSystemError):
        return f"‚ö†Ô∏è {exception.message}"
    else:
        return f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exception)}"


def create_error_response(exception: Exception) -> Dict[str, Any]:
    """üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
    if isinstance(exception, TradingSystemError):
        return {
            'success': False,
            'error': {
                'type': exception.__class__.__name__,
                'code': exception.error_code,
                'message': exception.message,
                'context': exception.context,
                'timestamp': exception.timestamp.isoformat(),
                'user_message': format_exception_for_user(exception),
                'is_critical': ExceptionValidator.is_critical_error(exception),
                'should_stop_trading': ExceptionValidator.should_stop_trading(exception)
            }
        }
    else:
        return {
            'success': False,
            'error': {
                'type': type(exception).__name__,
                'code': 'UNKNOWN_ERROR',
                'message': str(exception),
                'context': {},
                'timestamp': datetime.now().isoformat(),
                'user_message': format_exception_for_user(exception),
                'is_critical': False,
                'should_stop_trading': False
            }
        }


# ================= –ö–û–ù–°–¢–ê–ù–¢–´ –û–®–ò–ë–û–ö =================

class ErrorCodes:
    """üìã –ö–æ–¥—ã –æ—à–∏–±–æ–∫"""

    # API –æ—à–∏–±–∫–∏
    API_CONNECTION_FAILED = "API_001"
    API_TIMEOUT = "API_002"
    API_RATE_LIMIT = "API_003"
    API_AUTH_FAILED = "API_004"
    API_INVALID_RESPONSE = "API_005"

    # –¢–æ—Ä–≥–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    INSUFFICIENT_BALANCE = "TRADE_001"
    INVALID_ORDER_PARAMS = "TRADE_002"
    ORDER_EXECUTION_FAILED = "TRADE_003"
    ORDER_NOT_FOUND = "TRADE_004"
    POSITION_NOT_FOUND = "TRADE_005"
    INVALID_TRADING_PAIR = "TRADE_006"

    # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    STRATEGY_NOT_FOUND = "STRATEGY_001"
    STRATEGY_EXECUTION_FAILED = "STRATEGY_002"
