import json
import time
import os
from datetime import datetime
from typing import Dict, Any
import logging

class HybridAnalytics:
    """üìä –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    def __init__(self, data_dir: str = 'data'):
        self.data_dir = data_dir
        self.analytics_dir = os.path.join(data_dir, 'analytics')
        self.logger = logging.getLogger(__name__)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.analytics_dir, exist_ok=True)

        # –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.session_stats = {
            'start_time': time.time(),
            'cycles_completed': 0,
            'trades_executed': 0,
            'profitable_trades': 0,
            'total_pnl': 0.0,
            'max_balance': 0.0,
            'max_drawdown': 0.0,
            'emergency_exits': 0,
            'dca_blocks': 0,
            'trend_blocks': 0
        }

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.advanced_analytics = None
        self._try_initialize_advanced()

        self.logger.info("üìä HybridAnalytics –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _try_initialize_advanced(self):
        """üîß –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            from analytics_system import TradingAnalytics
            self.advanced_analytics = TradingAnalytics()
            self.logger.info("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except ImportError:
            self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

    def record_trade(self, trade_type: str, quantity: float, price: float, 
                    pair: str, strategy: str, profit_loss: float = 0.0) -> None:
        """üìä –ó–∞–ø–∏—Å—å —Å–¥–µ–ª–∫–∏"""

        self.session_stats['trades_executed'] += 1
        self.session_stats['total_pnl'] += profit_loss

        if profit_loss > 0:
            self.session_stats['profitable_trades'] += 1

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if self.advanced_analytics:
            try:
                self.advanced_analytics.record_trade(
                    trade_type, quantity, price, pair, strategy, profit_loss
                )
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

        self.logger.info(f"üìä –°–¥–µ–ª–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {trade_type} {quantity:.6f} {pair}")

    def update_balance(self, current_balance: float) -> None:
        """üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""

        if current_balance > self.session_stats['max_balance']:
            self.session_stats['max_balance'] = current_balance

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
        if self.session_stats['max_balance'] > 0:
            drawdown = (self.session_stats['max_balance'] - current_balance) / self.session_stats['max_balance']
            self.session_stats['max_drawdown'] = max(self.session_stats['max_drawdown'], drawdown)

    def update_cycle_stats(self, cycle_result: Dict[str, Any]) -> None:
        """üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞"""

        self.session_stats['cycles_completed'] += 1

        if cycle_result.get('emergency_exit'):
            self.session_stats['emergency_exits'] += 1

        if cycle_result.get('dca_blocked'):
            self.session_stats['dca_blocks'] += 1

        if cycle_result.get('trend_blocked'):
            self.session_stats['trend_blocks'] += 1

    def get_session_summary(self) -> Dict[str, Any]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""

        uptime_hours = (time.time() - self.session_stats['start_time']) / 3600
        trades = self.session_stats['trades_executed']
        profitable = self.session_stats['profitable_trades']
        success_rate = (profitable / trades * 100) if trades > 0 else 0

        return {
            'uptime_hours': round(uptime_hours, 2),
            'cycles_completed': self.session_stats['cycles_completed'],
            'trades_executed': trades,
            'profitable_trades': profitable,
            'success_rate_percent': round(success_rate, 1),
            'total_pnl': round(self.session_stats['total_pnl'], 4),
            'max_drawdown_percent': round(self.session_stats['max_drawdown'] * 100, 2),
            'emergency_exits': self.session_stats['emergency_exits'],
            'dca_blocks': self.session_stats['dca_blocks'],
            'trend_blocks': self.session_stats['trend_blocks']
        }

    def log_performance_summary(self) -> None:
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

        summary = self.get_session_summary()

        self.logger.info("üìä –ì–ò–ë–†–ò–î–ù–ê–Ø –°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {summary['uptime_hours']} —á–∞—Å–æ–≤")
        self.logger.info(f"   üîÑ –¶–∏–∫–ª–æ–≤: {summary['cycles_completed']}")
        self.logger.info(f"   üìà –°–¥–µ–ª–æ–∫: {summary['trades_executed']}")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {summary['profitable_trades']}")
        self.logger.info(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate_percent']}%")
        self.logger.info(f"   üí∞ P&L: {summary['total_pnl']} EUR")
        self.logger.info(f"   üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ –≤—ã—Ö–æ–¥—ã: {summary['emergency_exits']}")
        self.logger.info(f"   üõ°Ô∏è DCA –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {summary['dca_blocks']}")
        self.logger.info(f"   üß† Trend –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {summary['trend_blocks']}")

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
SimpleAnalytics = HybridAnalytics

if __name__ == "__main__":
    analytics = HybridAnalytics()
    print("üìä –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
