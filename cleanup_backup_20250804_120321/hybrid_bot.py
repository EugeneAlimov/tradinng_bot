import logging
import signal
import sys
import time
from datetime import datetime

# –ì–∏–±—Ä–∏–¥–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    from hybrid_config import HybridTradingConfig as TradingConfig
except ImportError:
    from config import TradingConfig

from api_client import ExmoAPIClient
from api_service import APIService
from position_manager import PositionManager
from risk_management import RiskManager

# –ì–∏–±—Ä–∏–¥–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
try:
    from hybrid_strategies import HybridStrategyManager
    HYBRID_STRATEGIES_AVAILABLE = True
except ImportError:
    from strategies import StrategyManager as HybridStrategyManager
    HYBRID_STRATEGIES_AVAILABLE = False

try:
    from hybrid_analytics import HybridAnalytics
    HYBRID_ANALYTICS_AVAILABLE = True
except ImportError:
    try:
        from simple_analytics import SimpleAnalytics as HybridAnalytics
        HYBRID_ANALYTICS_AVAILABLE = False
    except ImportError:
        HybridAnalytics = None
        HYBRID_ANALYTICS_AVAILABLE = False

from rate_limiter import RateLimitedAPIClient

class HybridTradingBot:
    """ü§ñ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç"""

    def __init__(self):
        self.config = TradingConfig()
        self.setup_logging()

        try:
            self.config.print_summary()
        except ValueError as e:
            self.logger.error(str(e))
            sys.exit(1)

        self.initialize_components()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = time.time()
        self.cycle_count = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.running = False

        # Graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        self.logger.info("üöÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self._log_system_capabilities()

    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import os
        os.makedirs('logs', exist_ok=True)

        logging.basicConfig(
            level=getattr(logging, self.config.LOG_LEVEL),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.config.LOG_FILE, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def initialize_components(self):
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

        # API –∫–ª–∏–µ–Ω—Ç —Å rate limiting
        api_client = ExmoAPIClient(self.config.API_KEY, self.config.API_SECRET)

        if getattr(self.config, 'RATE_LIMITER_ENABLED', True):
            from rate_limiter import RateLimiter
            rate_limiter = RateLimiter(
                getattr(self.config, 'API_CALLS_PER_MINUTE', 25),
                getattr(self.config, 'API_CALLS_PER_HOUR', 250)
            )
            self.api_client = RateLimitedAPIClient(api_client, rate_limiter)
        else:
            self.api_client = api_client

        # API —Å–µ—Ä–≤–∏—Å
        self.api_service = APIService(self.api_client, self.config)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.position_manager = PositionManager(self.config, self.api_service)
        self.risk_manager = RiskManager(self.config)

        # –ì–∏–±—Ä–∏–¥–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_manager = HybridStrategyManager(
            self.config, self.api_service, self.position_manager
        )

        # –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if HybridAnalytics:
            self.analytics = HybridAnalytics()
        else:
            self.analytics = None

    def _log_system_capabilities(self):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã"""

        self.logger.info("üîß –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ì–ò–ë–†–ò–î–ù–û–ô –°–ò–°–¢–ï–ú–´:")
        self.logger.info(f"   üéØ –ì–∏–±—Ä–∏–¥–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {'‚úÖ' if HYBRID_STRATEGIES_AVAILABLE else '‚ùå'}")
        self.logger.info(f"   üìä –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: {'‚úÖ' if HYBRID_ANALYTICS_AVAILABLE else '‚ùå'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safety_systems = []

        if hasattr(self.strategy_manager, 'emergency_exit') and self.strategy_manager.emergency_exit:
            safety_systems.append("üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥")

        if hasattr(self.strategy_manager, 'dca_limiter') and self.strategy_manager.dca_limiter:
            safety_systems.append("üõ°Ô∏è DCA –ª–∏–º–∏—Ç–µ—Ä")

        if safety_systems:
            self.logger.info("üõ°Ô∏è –ê–ö–¢–ò–í–ù–´–ï –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
            for system in safety_systems:
                self.logger.info(f"   {system}")
        else:
            self.logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    def run(self):
        """üèÉ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""

        self.running = True
        self.logger.info("üöÄ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        while self.running:
            try:
                self.cycle_count += 1
                cycle_start = time.time()

                # –°–æ–±–∏—Ä–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = self._collect_market_data()
                if not market_data:
                    time.sleep(self.config.UPDATE_INTERVAL)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                if not self._check_basic_safety(market_data):
                    time.sleep(self.config.UPDATE_INTERVAL)
                    continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                if HYBRID_STRATEGIES_AVAILABLE:
                    result = self.strategy_manager.execute_hybrid_cycle(market_data)
                else:
                    result = self.strategy_manager.execute_cycle(market_data)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._process_result(result, market_data)

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 50-–π —Ü–∏–∫–ª
                if self.cycle_count % 50 == 0:
                    self._log_statistics()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                cycle_time = time.time() - cycle_start
                sleep_time = max(0, self.config.UPDATE_INTERVAL - cycle_time)
                if sleep_time > 0:
                    time.sleep(sleep_time)

            except KeyboardInterrupt:
                self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")
                time.sleep(self.config.UPDATE_INTERVAL * 2)

        self.shutdown()

    def _collect_market_data(self) -> dict:
        """üìä –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_price = self.api_service.get_current_price(self.config.get_pair())
            balance_eur = self.api_service.get_balance(self.config.CURRENCY_2)

            if current_price <= 0 or balance_eur < 0:
                return None

            return {
                'current_price': current_price,
                'balance': balance_eur,
                'timestamp': time.time()
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def _check_basic_safety(self, market_data: dict) -> bool:
        """üõ°Ô∏è –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            emergency_stop, reason = self.risk_manager.emergency_stop_check(market_data['balance'])
            if emergency_stop:
                self.logger.error(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {reason}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            current_price = market_data['current_price']
            if current_price < 0.05 or current_price > 2.0:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ DOGE: {current_price}")
                return False

            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False

    def _process_result(self, result: dict, market_data: dict):
        """üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result.get('success'):
            self.failed_trades += 1
            return

        action = result.get('action', 'hold')
        reason = result.get('reason', '')

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        action_emojis = {
            'pyramid_sell': 'üèóÔ∏è',
            'dca_buy': 'üõí', 
            'emergency_exit': 'üö®',
            'hold': 'üíé'
        }

        emoji = action_emojis.get(action, 'üîÑ')
        self.logger.info(f"{emoji} {action}: {reason}")

        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if result.get('trade_executed'):
            self.successful_trades += 1

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            if self.analytics:
                trade_type = 'buy' if 'buy' in action else 'sell'
                strategy = action.split('_')[0] if '_' in action else 'unknown'

                self.analytics.record_trade(
                    trade_type=trade_type,
                    quantity=result.get('quantity', 0),
                    price=result.get('price', 0),
                    pair=self.config.get_pair(),
                    strategy=strategy
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if self.analytics:
            self.analytics.update_cycle_stats(result)
            self.analytics.update_balance(market_data['balance'])

    def _log_statistics(self):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = time.time() - self.start_time
        success_rate = (self.successful_trades / max(1, self.successful_trades + self.failed_trades)) * 100

        self.logger.info(f"üìä –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Ü–∏–∫–ª #{self.cycle_count}):")
        self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime/3600:.1f} —á–∞—Å–æ–≤")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {self.successful_trades}")
        self.logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ü–∏–∫–ª—ã: {self.failed_trades}")
        self.logger.info(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

    def _signal_handler(self, signum, frame):
        """‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        self.running = False

    def shutdown(self):
        """üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            uptime = time.time() - self.start_time

            self.logger.info("üîö –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ì–ò–ë–†–ò–î–ù–û–ì–û –ë–û–¢–ê")
            self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime/3600:.1f} —á–∞—Å–æ–≤")
            self.logger.info(f"   üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.successful_trades}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.position_manager.save_positions_to_file()

            self.logger.info("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –ì–ò–ë–†–ò–î–ù–´–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢ DOGE")
    print("=" * 50)
    bot = HybridTradingBot()
    bot.run()
