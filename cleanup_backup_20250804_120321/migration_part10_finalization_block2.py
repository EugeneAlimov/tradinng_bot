#!/usr/bin/env python3
"""üéØ –ú–∏–≥—Ä–∞—Ü–∏—è Part 10B - –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã"""
import logging
from pathlib import Path

class Migration:
    """üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.logger = logging.getLogger(__name__)
    
    def execute(self) -> bool:
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            self._setup_development_environment()
            
            # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
            self._create_automation_scripts()
            
            self.logger.info("‚úÖ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–µ–¥—ã: {e}")
            return False
    
    def _setup_development_environment(self):
        """üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        # requirements-dev.txt
        dev_requirements_content = '''# üõ†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
pytest>=7.0.0
pytest-asyncio>=0.21.0
pytest-cov>=4.0.0
pytest-mock>=3.10.0
pytest-benchmark>=4.0.0

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ª–∏–Ω—Ç–∏–Ω–≥
black>=23.0.0
isort>=5.12.0
flake8>=6.0.0
mypy>=1.0.0
pre-commit>=3.0.0

# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
sphinx>=6.0.0
sphinx-rtd-theme>=1.2.0

# –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
memory-profiler>=0.60.0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
watchdog>=3.0.0  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤
rich>=13.0.0     # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
'''
        
        dev_requirements_file = self.project_root / "requirements-dev.txt"
        dev_requirements_file.write_text(dev_requirements_content)
        
        # pre-commit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        precommit_content = '''# Pre-commit hooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files

  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
'''
        
        precommit_file = self.project_root / ".pre-commit-config.yaml"
        precommit_file.write_text(precommit_content)
        
        # VS Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        vscode_dir = self.project_root / ".vscode"
        vscode_dir.mkdir(exist_ok=True)
        
        vscode_settings = '''{
    "python.defaultInterpreterPath": "./venv/bin/python",
    "python.formatting.provider": "black",
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.testing.pytestEnabled": true,
    "python.testing.pytestArgs": ["tests"],
    "editor.formatOnSave": true,
    "editor.rulers": [88],
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        ".pytest_cache": true,
        ".coverage": true,
        "htmlcov": true
    }
}'''
        
        vscode_settings_file = vscode_dir / "settings.json"
        vscode_settings_file.write_text(vscode_settings)
    
    def _create_automation_scripts(self):
        """üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        scripts_dir = self.project_root / "scripts"
        scripts_dir.mkdir(exist_ok=True)
        
        # –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostic_script = '''#!/usr/bin/env python3
"""üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
import sys
import subprocess
from pathlib import Path
import json
from datetime import datetime

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    print(f"üêç Python: {version.major}.{version.minor}.{version.micro}")
    
    if version < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        with open("requirements.txt", "r") as f:
            requirements = f.read().splitlines()
        
        missing = []
        for req in requirements:
            if req.strip() and not req.startswith("#"):
                try:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
                    package_name = req.split(">=")[0].split("==")[0]
                    if package_name in ["requests", "pandas", "numpy"]:
                        __import__(package_name)
                except ImportError:
                    missing.append(req)
        
        if missing:
            print(f"‚ùå –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
            return False
        else:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return True
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with open(env_file, "r") as f:
        content = f.read()
    
    required_vars = ["EXMO_API_KEY", "EXMO_API_SECRET", "TRADING_PROFILE"]
    missing_vars = []
    
    for var in required_vars:
        if var not in content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    return True

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    required_dirs = ["src", "tests", "logs", "data"]
    missing_dirs = []
    
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            try:
                dir_path.mkdir(exist_ok=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
            except:
                missing_dirs.append(dir_name)
    
    if missing_dirs:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

def run_quick_tests():
    """–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    try:
        result = subprocess.run(
            ["python", "-m", "pytest", "tests/unit/", "-v", "--tb=short", "-x"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    checks = {
        "python_version": check_python_version(),
        "dependencies": check_dependencies(), 
        "config": check_config(),
        "directories": check_directories(),
        "tests": run_quick_tests()
    }
    
    passed_checks = sum(1 for check in checks.values() if check)
    total_checks = len(checks)
    
    print(f"\\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "checks": checks,
        "success_rate": passed_checks / total_checks
    }
    
    with open("diagnostic_report.json", "w") as f:
        json.dump(report, f, indent=2)
    
    if passed_checks == total_checks:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return 0
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ")
        return 1

if __name__ == "__main__":
    sys.exit(generate_report())
'''
        
        diagnostic_file = scripts_dir / "diagnostic.py"
        diagnostic_file.write_text(diagnostic_script)
        diagnostic_file.chmod(0o755)
        
        # –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_script = '''#!/usr/bin/env python3
"""üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
import json
from pathlib import Path
from datetime import datetime, timedelta
from decimal import Decimal
import argparse

def load_trading_data(days=30):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    data_dir = Path("data")
    trades_file = data_dir / "trades.json"
    
    if not trades_file.exists():
        print("‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        sample_trades = generate_sample_trades(days)
        return sample_trades
    
    with open(trades_file, "r") as f:
        trades = json.load(f)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    cutoff_date = datetime.now() - timedelta(days=days)
    filtered_trades = [
        trade for trade in trades
        if datetime.fromisoformat(trade["timestamp"]) >= cutoff_date
    ]
    
    return filtered_trades

def generate_sample_trades(days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    import random
    trades = []
    
    for i in range(days * 2):  # 2 —Å–¥–µ–ª–∫–∏ –≤ –¥–µ–Ω—å –≤ —Å—Ä–µ–¥–Ω–µ–º
        trade_time = datetime.now() - timedelta(days=days-i//2, hours=random.randint(0, 23))
        trades.append({
            "trade_id": f"sample_{i}",
            "pair": "DOGE_EUR",
            "type": "buy" if i % 2 == 0 else "sell",
            "amount": float(Decimal(str(100 + random.randint(-20, 50)))),
            "price": float(Decimal("0.18") + Decimal(str(random.uniform(-0.02, 0.02)))),
            "pnl": random.uniform(-5, 8),
            "timestamp": trade_time.isoformat()
        })
    
    return trades

def calculate_statistics(trades):
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not trades:
        return {}
    
    total_trades = len(trades)
    profitable_trades = len([t for t in trades if float(t.get("pnl", 0)) > 0])
    win_rate = profitable_trades / total_trades if total_trades > 0 else 0
    
    # PnL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    pnls = [float(t.get("pnl", 0)) for t in trades]
    total_pnl = sum(pnls)
    avg_pnl = total_pnl / len(pnls) if pnls else 0
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    max_profit = max(pnls) if pnls else 0
    max_loss = min(pnls) if pnls else 0
    
    return {
        "total_trades": total_trades,
        "profitable_trades": profitable_trades,
        "win_rate": win_rate,
        "total_pnl": total_pnl,
        "avg_pnl": avg_pnl,
        "max_profit": max_profit,
        "max_loss": max_loss
    }

def generate_report(stats, days):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    report = f"""
üìä –û–¢–ß–ï–¢ –ü–û –¢–û–†–ì–û–í–õ–ï (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π)
{'='*50}

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}
  ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['profitable_trades']}
  ‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1%}

üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
  ‚Ä¢ –û–±—â–∏–π PnL: {stats['total_pnl']:.2f} EUR
  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π PnL –∑–∞ —Å–¥–µ–ª–∫—É: {stats['avg_pnl']:.2f} EUR
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['max_profit']:.2f} EUR
  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {stats['max_loss']:.2f} EUR

üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏
    if stats['win_rate'] >= 0.6:
        report += "  ‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç (>60%)\\n"
    elif stats['win_rate'] >= 0.5:
        report += "  ‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º—ã–π –≤–∏–Ω—Ä–µ–π—Ç (50-60%)\\n"
    else:
        report += "  ‚ùå –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç (<50%)\\n"
    
    if stats['total_pnl'] > 0:
        report += "  ‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\\n"
    else:
        report += "  ‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\\n"
    
    return report

def main():
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    parser.add_argument("--days", type=int, default=30, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--output", default="reports", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    args = parser.parse_args()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    trades = load_trading_data(args.days)
    if not trades:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = calculate_statistics(trades)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_report(stats, args.days)
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    output_dir = Path(args.output)
    output_dir.mkdir(exist_ok=True)
    
    with open(output_dir / f"trading_report_{datetime.now().strftime('%Y%m%d')}.txt", "w") as f:
        f.write(report)
    
    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())
'''
        
        stats_file = scripts_dir / "analyze_trading_stats.py"
        stats_file.write_text(stats_script)
        stats_file.chmod(0o755)

if __name__ == "__main__":
    import sys
    migration = Migration(Path("."))
    success = migration.execute()
    sys.exit(0 if success else 1)