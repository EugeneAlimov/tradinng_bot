# hybrid_bot_enhanced.py
#!/usr/bin/env python3
"""ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from infrastructure.adapter import get_infrastructure


class EnhancedHybridBot:
    """ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –±–æ—Ç"""

    def __init__(self):
        self.setup_logging()
        self.infrastructure = None
        self.running = False

        # –°—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        self.config = None
        self.api_client = None
        self.position_manager = None
        self.risk_manager = None

        # –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.monitoring_enabled = True
        self.dashboard_enabled = False

    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/enhanced_bot.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    async def initialize(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")

            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.infrastructure = await get_infrastructure()

            # 2. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await self._load_legacy_components()

            # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
            if self.dashboard_enabled:
                await self._setup_dashboard()

            self.logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def _load_legacy_components(self):
        """üìú –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                from config import TradingConfig
                self.config = TradingConfig()
                self.logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            try:
                from position_manager import PositionManager
                self.position_manager = PositionManager()
                self.logger.info("‚úÖ PositionManager –∑–∞–≥—Ä—É–∂–µ–Ω")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è PositionManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            try:
                from risk_management import RiskManager
                self.risk_manager = RiskManager(self.config)
                self.logger.info("‚úÖ RiskManager –∑–∞–≥—Ä—É–∂–µ–Ω")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è RiskManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏: {e}")

    async def _setup_dashboard(self):
        """üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            if self.infrastructure and self.infrastructure.monitoring:
                from infrastructure.monitoring.service import SimpleWebDashboard

                dashboard = SimpleWebDashboard(self.infrastructure.monitoring, 8080)
                await dashboard.start()

                self.logger.info("üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")

    async def run(self):
        """üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        self.running = True
        cycle_count = 0

        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

        try:
            while self.running:
                cycle_count += 1
                cycle_start = asyncio.get_event_loop().time()

                self.logger.info(f"üìä –¶–∏–∫–ª {cycle_count}")

                try:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                    result = await self._execute_trading_cycle()

                    cycle_duration = asyncio.get_event_loop().time() - cycle_start

                    self.logger.info(f"‚úÖ –¶–∏–∫–ª {cycle_count} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f}—Å: {result.get('reason', 'OK')}")

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    if self.infrastructure and self.infrastructure.monitoring:
                        self.infrastructure.monitoring.collector.record_timer("trading_cycle_duration", cycle_duration)
                        self.infrastructure.monitoring.collector.increment_counter("trading_cycles_completed")

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {cycle_count}: {e}")

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    if self.infrastructure and self.infrastructure.monitoring:
                        self.infrastructure.monitoring.collector.increment_counter("trading_cycle_errors")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥

        except KeyboardInterrupt:
            self.logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.shutdown()

    async def _execute_trading_cycle(self) -> Dict[str, Any]:
        """üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            # 1. –°–æ–±–∏—Ä–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self._collect_market_data()

            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
            position_data = await self._get_position_data()

            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
            if position_data.get('has_position'):
                return await self._handle_existing_position(market_data, position_data)
            else:
                return await self._handle_no_position(market_data)

        except Exception as e:
            return {"success": False, "reason": f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}"}

    async def _collect_market_data(self) -> Dict[str, Any]:
        """üìä –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            pair = "DOGE_EUR"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if self.infrastructure:
                current_price = await self.infrastructure.get_current_price(pair)
                eur_balance = await self.infrastructure.get_balance("EUR")
                doge_balance = await self.infrastructure.get_balance("DOGE")
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã
                current_price = 0.18  # –ó–∞–≥–ª—É—à–∫–∞
                eur_balance = 1000.0
                doge_balance = 0.0

            return {
                "pair": pair,
                "current_price": current_price,
                "eur_balance": eur_balance,
                "doge_balance": doge_balance,
                "timestamp": asyncio.get_event_loop().time()
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                "pair": "DOGE_EUR",
                "current_price": 0.0,
                "eur_balance": 0.0,
                "doge_balance": 0.0,
                "error": str(e)
            }

    async def _get_position_data(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π position_manager
            if self.position_manager:
                position = self.position_manager.get_position("DOGE")
                if position:
                    return {
                        "has_position": True,
                        "quantity": position.get("quantity", 0),
                        "avg_price": position.get("avg_price", 0),
                        "total_cost": position.get("total_cost", 0)
                    }

            # Fallback - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å DOGE
            doge_balance = 0.0
            if self.infrastructure:
                doge_balance = await self.infrastructure.get_balance("DOGE")

            return {
                "has_position": doge_balance > 0,
                "quantity": doge_balance,
                "avg_price": 0.18,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                "total_cost": doge_balance * 0.18
            }

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"has_position": False, "error": str(e)}

    async def _handle_existing_position(self, market_data: Dict, position_data: Dict) -> Dict[str, Any]:
        """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        current_price = market_data.get("current_price", 0)
        avg_price = position_data.get("avg_price", 0)

        if current_price == 0 or avg_price == 0:
            return {"success": False, "reason": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö"}

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        profit_percent = ((current_price - avg_price) / avg_price) * 100

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ > 2%
        if profit_percent > 2.0:
            quantity = position_data.get("quantity", 0)

            if quantity > 0 and self.infrastructure:
                result = await self.infrastructure.create_order(
                    "DOGE_EUR", quantity, current_price, "sell"
                )

                if result.get("success"):
                    return {
                        "success": True,
                        "action": "sell",
                        "reason": f"–ü—Ä–æ–¥–∞–∂–∞ —Å –ø—Ä–∏–±—ã–ª—å—é {profit_percent:.2f}%",
                        "quantity": quantity,
                        "price": current_price
                    }

        return {
            "success": True,
            "action": "hold",
            "reason": f"–£–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%"
        }

    async def _handle_no_position(self, market_data: Dict) -> Dict[str, Any]:
        """üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        current_price = market_data.get("current_price", 0)
        eur_balance = market_data.get("eur_balance", 0)

        if current_price == 0 or eur_balance < 50:
            return {"success": False, "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤"}

        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        purchase_amount = min(eur_balance * 0.1, 100)  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –º–∞–∫—Å–∏–º—É–º 100 EUR
        quantity = purchase_amount / current_price

        if self.infrastructure:
            result = await self.infrastructure.create_order(
                "DOGE_EUR", quantity, current_price, "buy"
            )

            if result.get("success"):
                return {
                    "success": True,
                    "action": "buy",
                    "reason": "–ü–æ–∫—É–ø–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                    "quantity": quantity,
                    "price": current_price
                }

        return {
            "success": True,
            "action": "wait",
            "reason": "–û–∂–∏–¥–∞–Ω–∏–µ –ª—É—á—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        }

    async def shutdown(self):
        """üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self.running = False

        try:
            if self.infrastructure:
                await self.infrastructure.shutdown()

            self.logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = EnhancedHybridBot()

    try:
        await bot.initialize()
        await bot.run()
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
