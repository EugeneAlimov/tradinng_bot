#!/usr/bin/env python3
"""üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫ - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"""

import os
import sys
import subprocess
import glob
from datetime import datetime


class TradesManager:
    """üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self):
        self.data_dir = 'data'
        self.scripts = {
            'fetcher': 'trades_history_fetcher.py',
            'analyzer': 'trades_analyzer.py'
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(self.data_dir, exist_ok=True)
        os.makedirs('logs', exist_ok=True)
    
    def show_menu(self):
        """üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüéØ –ú–ï–ù–ï–î–ñ–ï–† –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö EXMO")
        print("=" * 50)
        print("1. üìä –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ —Å –±–∏—Ä–∂–∏")
        print("2. üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
        print("3. üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("4. üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print("5. ‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("=" * 50)
    
    def fetch_trades(self):
        """üìä –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        print("\nüìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö")
        print("-" * 30)
        
        if not os.path.exists(self.scripts['fetcher']):
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç {self.scripts['fetcher']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._check_config():
                return
            
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫...")
            result = subprocess.run([sys.executable, self.scripts['fetcher']], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–æ–¥: {result.returncode})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def analyze_trades(self):
        """üìà –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫"""
        print("\nüìà –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö")
        print("-" * 30)
        
        if not os.path.exists(self.scripts['analyzer']):
            print(f"‚ùå –°–∫—Ä–∏–ø—Ç {self.scripts['analyzer']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        trade_files = self._find_trade_files()
        
        if not trade_files:
            print("‚ùå –§–∞–π–ª—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–æ–ø—Ü–∏—è 1)")
            return
        
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫...")
            result = subprocess.run([sys.executable, self.scripts['analyzer']], 
                                  capture_output=False, text=True)
            
            if result.returncode == 0:
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–¥: {result.returncode})")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def show_files(self):
        """üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("\nüìÇ –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´")
        print("-" * 30)
        
        # –§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        trade_files = self._find_trade_files()
        print(f"üìä –§–∞–π–ª—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ ({len(trade_files)}):")
        
        if trade_files:
            for i, file in enumerate(trade_files, 1):
                file_size = os.path.getsize(file) / 1024  # KB
                mod_time = datetime.fromtimestamp(os.path.getmtime(file))
                print(f"   {i}. {os.path.basename(file)}")
                print(f"      –†–∞–∑–º–µ—Ä: {file_size:.1f} KB, –∏–∑–º–µ–Ω–µ–Ω: {mod_time.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("   –ù–µ—Ç —Ñ–∞–π–ª–æ–≤")
        
        # –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_files = self._find_analysis_files()
        print(f"\nüìà –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞ ({len(analysis_files)}):")
        
        if analysis_files:
            for i, file in enumerate(analysis_files, 1):
                file_size = os.path.getsize(file) / 1024  # KB
                mod_time = datetime.fromtimestamp(os.path.getmtime(file))
                print(f"   {i}. {os.path.basename(file)}")
                print(f"      –†–∞–∑–º–µ—Ä: {file_size:.1f} KB, –∏–∑–º–µ–Ω–µ–Ω: {mod_time.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("   –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
        
        # CSV —Ñ–∞–π–ª—ã
        csv_files = glob.glob(os.path.join(self.data_dir, '*.csv'))
        if csv_files:
            print(f"\nüìä CSV —Ñ–∞–π–ª—ã ({len(csv_files)}):")
            for i, file in enumerate(csv_files, 1):
                file_size = os.path.getsize(file) / 1024  # KB
                print(f"   {i}. {os.path.basename(file)} ({file_size:.1f} KB)")
    
    def cleanup_files(self):
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –§–ê–ô–õ–û–í")
        print("-" * 30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
        all_files = []
        all_files.extend(self._find_trade_files())
        all_files.extend(self._find_analysis_files())
        all_files.extend(glob.glob(os.path.join(self.data_dir, '*.csv')))
        
        if not all_files:
            print("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        now = datetime.now()
        old_files = []  # > 30 –¥–Ω–µ–π
        recent_files = []  # <= 30 –¥–Ω–µ–π
        
        for file in all_files:
            mod_time = datetime.fromtimestamp(os.path.getmtime(file))
            age_days = (now - mod_time).days
            
            if age_days > 30:
                old_files.append((file, age_days))
            else:
                recent_files.append((file, age_days))
        
        print(f"üìÖ –°–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã (‚â§30 –¥–Ω–µ–π): {len(recent_files)}")
        print(f"üóÇÔ∏è –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (>30 –¥–Ω–µ–π): {len(old_files)}")
        
        if old_files:
            print("\nüóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
            for file, age in old_files:
                file_size = os.path.getsize(file) / 1024
                print(f"   - {os.path.basename(file)} ({age} –¥–Ω–µ–π, {file_size:.1f} KB)")
            
            confirm = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {len(old_files)} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤? (y/N): ").lower()
            
            if confirm == 'y':
                deleted = 0
                total_size = 0
                
                for file, age in old_files:
                    try:
                        file_size = os.path.getsize(file)
                        os.remove(file)
                        deleted += 1
                        total_size += file_size
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {os.path.basename(file)}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
                
                print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {total_size/1024:.1f} KB")
            else:
                print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def show_system_info(self):
        """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\n‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        print("üìÑ –°–∫—Ä–∏–ø—Ç—ã:")
        for name, script in self.scripts.items():
            status = "‚úÖ" if os.path.exists(script) else "‚ùå"
            print(f"   {status} {script}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("\n‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        config_status = "‚úÖ" if self._check_config_exists() else "‚ùå"
        print(f"   {config_status} config.py")
        
        env_status = "‚úÖ" if os.path.exists('.env') else "‚ùå"
        print(f"   {env_status} .env —Ñ–∞–π–ª")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        print("\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
        data_status = "‚úÖ" if os.path.exists(self.data_dir) else "‚ùå"
        print(f"   {data_status} {self.data_dir}/")
        
        logs_status = "‚úÖ" if os.path.exists('logs') else "‚ùå"
        print(f"   {logs_status} logs/")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        trade_files = len(self._find_trade_files())
        analysis_files = len(self._find_analysis_files())
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –§–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏: {trade_files}")
        print(f"   –§–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_files}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print(f"\nüêç Python –º–æ–¥—É–ª–∏:")
        modules = ['requests', 'json', 'datetime', 'logging']
        
        for module in modules:
            try:
                __import__(module)
                print(f"   ‚úÖ {module}")
            except ImportError:
                print(f"   ‚ùå {module}")
    
    def _find_trade_files(self):
        """üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        pattern = os.path.join(self.data_dir, 'trades_history_*.json')
        files = glob.glob(pattern)
        return sorted(files, key=os.path.getmtime, reverse=True)
    
    def _find_analysis_files(self):
        """üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        pattern = os.path.join(self.data_dir, 'trades_analysis_*.json')
        files = glob.glob(pattern)
        return sorted(files, key=os.path.getmtime, reverse=True)
    
    def _check_config_exists(self):
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return os.path.exists('config.py')
    
    def _check_config(self):
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self._check_config_exists():
            print("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            from config import TradingConfig
            config = TradingConfig()
            
            if not config.API_KEY or not config.API_SECRET:
                print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ config.py")
                return False
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def run(self):
        """üöÄ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫!")
        
        while True:
            try:
                self.show_menu()
                choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
                
                if choice == '0':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == '1':
                    self.fetch_trades()
                elif choice == '2':
                    self.analyze_trades()
                elif choice == '3':
                    self.show_files()
                elif choice == '4':
                    self.cleanup_files()
                elif choice == '5':
                    self.show_system_info()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 0-5")
                
                input("\nüì± –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print("\n\n‚å®Ô∏è –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
                break
            except Exception as e:
                print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                input("üì± –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = TradesManager()
    manager.run()


if __name__ == "__main__":
    main()