#!/usr/bin/env python3
"""üìä –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""

import os
import json
import time
from datetime import datetime
from typing import Dict, Any, Optional

def load_position_data() -> Dict[str, Any]:
    """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    positions_file = 'data/positions.json'
    
    if not os.path.exists(positions_file):
        print("‚ùå –§–∞–π–ª –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}
    
    try:
        with open(positions_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get('positions', {})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        return {}

def get_current_market_price() -> float:
    """üí± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
        from api_client import ExmoAPIClient
        from config import TradingConfig
        
        config = TradingConfig()
        api = ExmoAPIClient(config.API_KEY, config.API_SECRET)
        
        ticker_data = api.get_ticker()
        pair = f"{config.CURRENCY_1}_{config.CURRENCY_2}"
        
        if ticker_data and pair in ticker_data:
            return float(ticker_data[pair]['last_trade'])
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API")
        return 0.0
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return 0.0

def get_current_balance() -> Dict[str, float]:
    """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""
    
    try:
        from api_client import ExmoAPIClient
        from config import TradingConfig
        
        config = TradingConfig()
        api = ExmoAPIClient(config.API_KEY, config.API_SECRET)
        
        user_info = api.get_user_info()
        
        if user_info and 'balances' in user_info:
            balances = user_info['balances']
            return {
                'DOGE': float(balances.get('DOGE', 0)),
                'EUR': float(balances.get('EUR', 0))
            }
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        return {'DOGE': 0.0, 'EUR': 0.0}
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        return {'DOGE': 0.0, 'EUR': 0.0}

def analyze_position_status():
    """üìä –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
    
    print("üìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò")
    print("=" * 60)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏...")
    positions = load_position_data()
    
    if not positions:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    
    doge_position = positions.get('DOGE', {})
    
    if not doge_position or doge_position.get('quantity', 0) == 0:
        print("üìä –ü–æ–∑–∏—Ü–∏—è –ø–æ DOGE –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
    print("üí± –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã...")
    current_price = get_current_market_price()
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤...")
    balances = get_current_balance()
    
    # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ò:")
    print("-" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ–∑–∏—Ü–∏–π
    calculated_quantity = doge_position.get('quantity', 0)
    avg_price = doge_position.get('avg_price', 0)
    total_cost = doge_position.get('total_cost', 0)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    real_doge_balance = balances['DOGE']
    real_eur_balance = balances['EUR']
    
    print(f"üíº –†–ê–°–°–ß–ò–¢–ê–ù–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DOGE: {calculated_quantity:.6f}")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.8f} EUR")
    print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.4f} EUR")
    
    print(f"\nüí∞ –†–ï–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:")
    print(f"   DOGE –±–∞–ª–∞–Ω—Å: {real_doge_balance:.6f}")
    print(f"   EUR –±–∞–ª–∞–Ω—Å: {real_eur_balance:.4f}")
    
    print(f"\nüí± –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:")
    if current_price > 0:
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f} EUR")
    else:
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å")
        current_price = avg_price  # Fallback
    
    # 5. –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
    if avg_price > 0 and current_price > 0:
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–ò/–£–ë–´–¢–ö–ê:")
        print("-" * 40)
        
        # –ü–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        calculated_value = calculated_quantity * current_price
        calculated_pnl = calculated_value - total_cost
        calculated_pnl_percent = (calculated_pnl / total_cost) * 100 if total_cost > 0 else 0
        
        print(f"üìä –ü–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calculated_value:.4f} EUR")
        print(f"   P&L: {calculated_pnl:+.4f} EUR ({calculated_pnl_percent:+.2f}%)")
        
        # –ü–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
        real_value = real_doge_balance * current_price
        
        print(f"\nüí∞ –ü–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É:")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å DOGE: {real_value:.4f} EUR")
        print(f"   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {real_eur_balance + real_value:.4f} EUR")
        
        # –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        balance_diff = abs(calculated_quantity - real_doge_balance)
        if balance_diff > 0.001:  # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.001 DOGE
            print(f"\n‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {balance_diff:.6f} DOGE")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤ EUR: {balance_diff * current_price:.4f} EUR")
        else:
            print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ < 0.001 DOGE)")
    
    # 6. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
    trades_history = doge_position.get('trades', [])
    if trades_history:
        print(f"\nüìã –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö:")
        print("-" * 40)
        print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades_history)}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        recent_trades = trades_history[-5:]
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
        
        for i, trade in enumerate(recent_trades[-3:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            trade_type = trade.get('type', 'unknown')
            quantity = trade.get('quantity', 0)
            price = trade.get('price', 0)
            timestamp = trade.get('timestamp', 0)
            
            if timestamp:
                date_str = datetime.fromtimestamp(timestamp).strftime('%d.%m %H:%M')
            else:
                date_str = 'N/A'
            
            emoji = 'üõí' if trade_type == 'buy' else 'üíé'
            print(f"   {emoji} {date_str}: {trade_type.upper()} {quantity:.6f} –ø–æ {price:.8f}")
    
    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)
    
    if current_price > 0 and avg_price > 0:
        profit_percent = (current_price - avg_price) / avg_price * 100
        
        if profit_percent > 2:
            print(f"üéØ –•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å {profit_percent:+.1f}% - –º–æ–∂–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å")
        elif profit_percent > 0:
            print(f"üìä –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–∏–±—ã–ª—å {profit_percent:+.1f}% - –∂–¥–∞—Ç—å –ª—É—á—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π")
        elif profit_percent > -5:
            print(f"‚öñÔ∏è –ù–µ–±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫ {profit_percent:+.1f}% - –∂–¥–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        else:
            print(f"‚ö†Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ {profit_percent:+.1f}% - —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º")
    
    if balance_diff > 0.001:
        print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")

def create_position_summary_json():
    """üíæ –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ —Å —Å–≤–æ–¥–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    
    try:
        positions = load_position_data()
        balances = get_current_balance()
        current_price = get_current_market_price()
        
        doge_position = positions.get('DOGE', {})
        
        summary = {
            'timestamp': datetime.now().isoformat(),
            'position_data': {
                'calculated_quantity': doge_position.get('quantity', 0),
                'avg_price': doge_position.get('avg_price', 0),
                'total_cost': doge_position.get('total_cost', 0)
            },
            'real_balances': balances,
            'market_data': {
                'current_price': current_price,
                'last_updated': datetime.now().isoformat()
            },
            'analysis': {
                'balance_discrepancy': abs(doge_position.get('quantity', 0) - balances['DOGE']),
                'current_value': balances['DOGE'] * current_price if current_price > 0 else 0,
                'total_portfolio_value': balances['EUR'] + (balances['DOGE'] * current_price) if current_price > 0 else balances['EUR']
            }
        }
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if current_price > 0 and doge_position.get('total_cost', 0) > 0:
            current_value = doge_position.get('quantity', 0) * current_price
            pnl = current_value - doge_position.get('total_cost', 0)
            pnl_percent = (pnl / doge_position.get('total_cost', 0)) * 100
            
            summary['analysis']['pnl_eur'] = pnl
            summary['analysis']['pnl_percent'] = pnl_percent
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É
        summary_file = f"position_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {summary_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

if __name__ == "__main__":
    print("üìä –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
    print()
    
    try:
        analyze_position_status()
        
        print("\nüíæ –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é JSON —Å–≤–æ–¥–∫—É? (y/n): ", end="")
        response = input().lower().strip()
        
        if response in ['y', 'yes', '–¥–∞']:
            create_position_summary_json()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
