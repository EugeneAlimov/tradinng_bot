#!/usr/bin/env python3
"""üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–±–µ–∑ pytest)"""

import asyncio
import sys
import os
import traceback
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
src_path = Path(__file__).parent / "src"
if src_path.exists():
    sys.path.insert(0, str(src_path))

print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
print("=" * 50)


def test_imports():
    """üì¶ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    results = {}

    # –¢–µ—Å—Ç core –∏–º–ø–æ—Ä—Ç–æ–≤
    try:
        sys.path.append('src')
        from core.interfaces import IExchangeAPI, ICacheService, IMonitoringService
        results['core_interfaces'] = True
        print("‚úÖ Core –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã")
    except Exception as e:
        results['core_interfaces'] = False
        print(f"‚ùå Core –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {e}")

    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        from config.settings import get_settings
        settings = get_settings()
        results['config'] = True
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    except Exception as e:
        results['config'] = False
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")

    # –¢–µ—Å—Ç legacy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    legacy_found = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    old_files = ['bot.py', 'config.py', 'api_client.py', 'hybrid_bot.py']
    for file_name in old_files:
        if Path(file_name).exists():
            legacy_found.append(file_name)

    results['legacy_files'] = len(legacy_found) > 0
    if legacy_found:
        print(f"‚úÖ Legacy —Ñ–∞–π–ª—ã: {', '.join(legacy_found)}")
    else:
        print("‚ö†Ô∏è Legacy —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return results


def test_environment():
    """üåç –¢–µ—Å—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    results = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    python_version = sys.version_info
    results['python_version'] = python_version >= (3, 8)
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}" if results['python_version']
          else f"‚ùå Python {python_version.major}.{python_version.minor} (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 3.8)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    required_modules = ['requests', 'json', 'asyncio', 'logging', 'pathlib']
    missing_modules = []

    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)

    results['dependencies'] = len(missing_modules) == 0
    if results['dependencies']:
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    else:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ['src', 'logs', 'data']
    existing_dirs = []

    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            existing_dirs.append(dir_name)
        else:
            try:
                dir_path.mkdir(exist_ok=True)
                existing_dirs.append(dir_name)
            except:
                pass

    results['directories'] = len(existing_dirs) >= 2  # –•–æ—Ç—è –±—ã 2 –∏–∑ 3
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(existing_dirs)}" if results['directories']
          else f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏
    try:
        test_file = Path("test_write.tmp")
        test_file.write_text("test")
        test_file.unlink()
        results['write_permissions'] = True
        print("‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏")
    except Exception as e:
        results['write_permissions'] = False
        print(f"‚ùå –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: {e}")

    return results


async def test_basic_infrastructure():
    """üèóÔ∏è –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("\nüèóÔ∏è –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    results = {}

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—ç—à–∞
    try:
        cache_data = {}

        # –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à
        def set_cache(key, value):
            cache_data[key] = value

        def get_cache(key):
            return cache_data.get(key)

        set_cache("test_key", "test_value")
        cached_value = get_cache("test_key")

        results['simple_cache'] = cached_value == "test_value"
        print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à" if results['simple_cache'] else "‚ùå –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à")

    except Exception as e:
        results['simple_cache'] = False
        print(f"‚ùå –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à: {e}")

    # –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    try:
        async def async_operation():
            await asyncio.sleep(0.1)
            return "async_result"

        result = await async_operation()
        results['async_support'] = result == "async_result"
        print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å" if results['async_support'] else "‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å")

    except Exception as e:
        results['async_support'] = False
        print(f"‚ùå –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å: {e}")

    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        import logging

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        logger = logging.getLogger("test_logger")
        logger.setLevel(logging.INFO)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        logger.info("Test log message")

        results['logging'] = True
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    except Exception as e:
        results['logging'] = False
        print(f"‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")

    # –¢–µ—Å—Ç JSON –æ–ø–µ—Ä–∞—Ü–∏–π
    try:
        import json

        test_data = {"test": "data", "number": 123}
        json_str = json.dumps(test_data)
        parsed_data = json.loads(json_str)

        results['json_support'] = parsed_data == test_data
        print("‚úÖ JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞" if results['json_support'] else "‚ùå JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞")

    except Exception as e:
        results['json_support'] = False
        print(f"‚ùå JSON –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {e}")

    return results


async def test_simple_bot_structure():
    """ü§ñ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞...")
    results = {}

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    try:
        class SimpleTradingBot:
            def __init__(self):
                self.config = {"api_key": "test", "pair": "DOGE_EUR"}
                self.running = False
                self.cycle_count = 0

            async def initialize(self):
                """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
                self.running = True
                return True

            async def execute_cycle(self):
                """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
                self.cycle_count += 1

                # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
                market_data = {
                    "current_price": 0.18,
                    "balance": 1000.0,
                    "timestamp": asyncio.get_event_loop().time()
                }

                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
                if market_data["current_price"] > 0:
                    return {
                        "success": True,
                        "action": "hold",
                        "reason": f"–¶–∏–∫–ª {self.cycle_count}: —Ü–µ–Ω–∞ {market_data['current_price']}"
                    }
                else:
                    return {
                        "success": False,
                        "reason": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ"
                    }

            async def shutdown(self):
                """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
                self.running = False

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
        bot = SimpleTradingBot()
        results['bot_creation'] = True
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞")

        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        init_result = await bot.initialize()
        results['bot_initialization'] = init_result and bot.running
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞" if results['bot_initialization'] else "‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")

        # –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
        cycle_result = await bot.execute_cycle()
        results['trading_cycle'] = cycle_result.get("success", False)
        print(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: {cycle_result.get('reason', 'OK')}" if results['trading_cycle']
              else f"‚ùå –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: {cycle_result}")

        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await bot.shutdown()
        results['bot_shutdown'] = not bot.running
        print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞" if results['bot_shutdown'] else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞")

    except Exception as e:
        results['bot_creation'] = False
        results['bot_initialization'] = False
        results['trading_cycle'] = False
        results['bot_shutdown'] = False
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        traceback.print_exc()

    return results


async def test_file_operations():
    """üìÅ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüìÅ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    results = {}

    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    try:
        test_file_path = Path("test_data.json")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "bot_name": "DOGE Trading Bot",
            "version": "4.1-refactored",
            "test_timestamp": asyncio.get_event_loop().time(),
            "settings": {
                "pair": "DOGE_EUR",
                "enabled": True
            }
        }

        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        import json
        with open(test_file_path, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2)

        # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open(test_file_path, 'r', encoding='utf-8') as f:
            loaded_data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        results['file_write_read'] = loaded_data == test_data
        print("‚úÖ –ó–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤" if results['file_write_read'] else "‚ùå –ó–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file_path.unlink()

    except Exception as e:
        results['file_write_read'] = False
        print(f"‚ùå –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    try:
        test_dir = Path("test_dir")
        test_dir.mkdir(exist_ok=True)

        results['directory_creation'] = test_dir.exists()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" if results['directory_creation'] else "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        test_dir.rmdir()

    except Exception as e:
        results['directory_creation'] = False
        print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

    return results


def test_configuration():
    """‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    results = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if env_file.exists():
        try:
            with open(env_file, 'r') as f:
                env_content = f.read()

            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            has_api_key = "EXMO_API_KEY" in env_content
            has_api_secret = "EXMO_API_SECRET" in env_content

            results['env_file'] = has_api_key and has_api_secret

            if results['env_file']:
                print("‚úÖ .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏")
            else:
                print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ—Ç API –∫–ª—é—á–µ–π")

        except Exception as e:
            results['env_file'] = False
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
    else:
        results['env_file'] = False
        print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        simple_config = {
            "bot_name": "DOGE Trading Bot",
            "version": "4.1-refactored",
            "trading": {
                "pair": "DOGE_EUR",
                "enabled": True,
                "test_mode": True
            },
            "monitoring": {
                "enabled": True,
                "port": 8080
            }
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        bot_name = simple_config.get("bot_name")
        trading_pair = simple_config.get("trading", {}).get("pair")

        results['simple_config'] = bool(bot_name and trading_pair)
        print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" if results['simple_config'] else "‚ùå –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

    except Exception as e:
        results['simple_config'] = False
        print(f"‚ùå –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")

    return results


async def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print(f"üìç –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print(f"üêç Python: {sys.version}")

    all_results = {}

    try:
        # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        import_results = test_imports()
        all_results.update(import_results)

        # 2. –¢–µ—Å—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_results = test_environment()
        all_results.update(env_results)

        # 3. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        infra_results = await test_basic_infrastructure()
        all_results.update(infra_results)

        # 4. –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
        bot_results = await test_simple_bot_structure()
        all_results.update(bot_results)

        # 5. –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        file_results = await test_file_operations()
        all_results.update(file_results)

        # 6. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_results = test_configuration()
        all_results.update(config_results)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        traceback.print_exc()
        return False

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 30)

    total_tests = len(all_results)
    passed_tests = sum(1 for result in all_results.values() if result)
    failed_tests = total_tests - passed_tests

    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0

    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ ({success_rate:.1f}%)")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests} —Ç–µ—Å—Ç–æ–≤")

    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for test_name, result in all_results.items():
        status_icon = "‚úÖ" if result else "‚ùå"
        print(f"  {status_icon} {test_name}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

    if success_rate >= 80:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
        print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ src/")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode enhanced")
        print("  3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:8080")

    elif success_rate >= 60:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        critical_tests = ['python_version', 'dependencies', 'write_permissions']
        critical_failed = [test for test in critical_tests if not all_results.get(test, True)]

        if critical_failed:
            print(f"üö® –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(critical_failed)}")

    else:
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failed_tests_list = [test for test, result in all_results.items() if not result]
        for failed_test in failed_tests_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  ‚ùå {failed_test}")

    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüìö –°–ü–†–ê–í–ö–ê:")
    print("  üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤: src/infrastructure/")
    print("  ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: .env —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏")
    print("  üêç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python 3.8+, –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏")
    print("  üìù –õ–æ–≥–∏: logs/enhanced_bot.log")

    return success_rate >= 60


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit_code = 0 if result else 1

        print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {exit_code}")
        sys.exit(exit_code)

    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)