#!/usr/bin/env python3
"""‚öôÔ∏è –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""

import os
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any, Union
from pathlib import Path
from decimal import Decimal

from ..core.models import ConfigProfile, TradingPair
from ..core.constants import (
    Trading, Risk, Timing, Strategies, 
    Analytics, Logging, Profiles, API
)
from ..core.exceptions import ConfigurationError

try:
    from dotenv import load_dotenv
    load_dotenv()
    DOTENV_AVAILABLE = True
except ImportError:
    DOTENV_AVAILABLE = False


@dataclass
class APISettings:
    """üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
    # EXMO API
    exmo_api_key: str = ""
    exmo_api_secret: str = ""
    exmo_base_url: str = API.EXMO_BASE_URL
    exmo_timeout: int = API.EXMO_TIMEOUT
    exmo_max_retries: int = API.EXMO_MAX_RETRIES
    
    # Rate Limiting
    calls_per_minute: int = API.DEFAULT_CALLS_PER_MINUTE
    calls_per_hour: int = API.DEFAULT_CALLS_PER_HOUR
    adaptive_rate_limiting: bool = True
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    cache_enabled: bool = True
    cache_default_ttl: int = Timing.CACHE_DEFAULT_TTL
    cache_price_ttl: int = Timing.CACHE_PRICE_TTL
    cache_balance_ttl: int = Timing.CACHE_BALANCE_TTL
    
    def __post_init__(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.exmo_api_key:
            self.exmo_api_key = os.getenv('EXMO_API_KEY', '')
        
        if not self.exmo_api_secret:
            self.exmo_api_secret = os.getenv('EXMO_API_SECRET', '')
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        if not self.exmo_api_key:
            raise ConfigurationError("EXMO API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if not self.exmo_api_secret:
            raise ConfigurationError("EXMO API —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if len(self.exmo_api_key) < 32:
            raise ConfigurationError("EXMO API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        
        if self.calls_per_minute <= 0 or self.calls_per_hour <= 0:
            raise ConfigurationError("–õ–∏–º–∏—Ç—ã API –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")


@dataclass
class TradingSettings:
    """üí± –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    primary_pair: TradingPair = field(default_factory=lambda: TradingPair.from_string(Trading.DEFAULT_PAIR))
    supported_pairs: List[str] = field(default_factory=lambda: Trading.SUPPORTED_PAIRS.copy())
    
    # –†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
    position_size_percent: float = Risk.DEFAULT_POSITION_SIZE
    min_order_size_eur: Decimal = Trading.MIN_ORDER_SIZE
    max_position_size_percent: float = 50.0
    
    # –ü—Ä–∏–±—ã–ª—å –∏ —É–±—ã—Ç–∫–∏
    min_profit_percent: float = Risk.DEFAULT_MIN_PROFIT
    stop_loss_percent: float = Risk.DEFAULT_STOP_LOSS
    
    # –ö–æ–º–∏—Å—Å–∏–∏
    taker_fee: Decimal = Trading.TAKER_FEE
    maker_fee: Decimal = Trading.MAKER_FEE
    
    # –¢–æ—á–Ω–æ—Å—Ç—å
    price_precision: int = Trading.PRICE_PRECISION
    quantity_precision: int = Trading.QUANTITY_PRECISION
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not 0.1 <= self.position_size_percent <= 100:
            raise ConfigurationError("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 100%")
        
        if not 0.1 <= self.min_profit_percent <= 50:
            raise ConfigurationError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 50%")
        
        if not 1 <= self.stop_loss_percent <= 50:
            raise ConfigurationError("–°—Ç–æ–ø-–ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 50%")


@dataclass
class DCASettings:
    """üõí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    enabled: bool = True
    drop_threshold_percent: float = Strategies.DCA_DEFAULT_DROP_THRESHOLD
    purchase_size_percent: float = Strategies.DCA_DEFAULT_PURCHASE_SIZE
    max_purchases: int = Strategies.DCA_DEFAULT_MAX_PURCHASES
    cooldown_minutes: int = Strategies.DCA_DEFAULT_COOLDOWN_MINUTES
    max_position_percent: float = Strategies.DCA_DEFAULT_MAX_POSITION
    
    # –õ–∏–º–∏—Ç—ã
    max_consecutive: int = Risk.DCA_MAX_CONSECUTIVE
    max_per_day: int = Risk.DCA_MAX_PER_DAY
    min_interval_minutes: int = Risk.DCA_MIN_INTERVAL_MINUTES
    loss_block_threshold_percent: float = Risk.DCA_LOSS_BLOCK_THRESHOLD
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è DCA –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.enabled:
            if not 0.5 <= self.drop_threshold_percent <= 10:
                raise ConfigurationError("–ü–æ—Ä–æ–≥ –ø–∞–¥–µ–Ω–∏—è DCA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.5% –¥–æ 10%")
            
            if not 1 <= self.purchase_size_percent <= 20:
                raise ConfigurationError("–†–∞–∑–º–µ—Ä DCA –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 20%")
            
            if not 1 <= self.max_purchases <= 10:
                raise ConfigurationError("–ú–∞–∫—Å–∏–º—É–º DCA –ø–æ–∫—É–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")


@dataclass
class PyramidSettings:
    """üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    enabled: bool = True
    levels: List[Dict[str, float]] = field(default_factory=lambda: Strategies.PYRAMID_DEFAULT_LEVELS.copy())
    
    # –ê–≤–∞—Ä–∏–π–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    emergency_levels: List[Dict[str, float]] = field(default_factory=lambda: [
        {"loss_pct": 8.0, "sell_pct": 30.0, "time_hours": 4},
        {"loss_pct": 12.0, "sell_pct": 50.0, "time_hours": 0},
        {"loss_pct": 15.0, "sell_pct": 100.0, "time_hours": 0},
    ])
    
    cooldown_minutes: int = 5
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.enabled:
            for i, level in enumerate(self.levels):
                if not all(key in level for key in ['profit_pct', 'sell_pct', 'min_eur']):
                    raise ConfigurationError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∏—Ä–∞–º–∏–¥—ã {i}")
                
                if not 0.1 <= level['profit_pct'] <= 50:
                    raise ConfigurationError(f"–ü—Ä–∏–±—ã–ª—å –ø–∏—Ä–∞–º–∏–¥—ã {i} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.1% –¥–æ 50%")


@dataclass
class RiskSettings:
    """üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    # –û–±—â–∏–µ –ª–∏–º–∏—Ç—ã
    max_daily_loss_percent: float = Risk.MAX_DAILY_LOSS
    max_trades_per_hour: int = Risk.MAX_TRADES_PER_HOUR
    max_trades_per_day: int = Risk.MAX_TRADES_PER_DAY
    max_api_errors_per_hour: int = Risk.MAX_API_ERRORS_PER_HOUR
    
    # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥
    emergency_exit_enabled: bool = True
    critical_loss_percent: float = Risk.EMERGENCY_CRITICAL_LOSS
    major_loss_percent: float = Risk.EMERGENCY_MAJOR_LOSS
    significant_loss_percent: float = Risk.EMERGENCY_SIGNIFICANT_LOSS
    time_limit_hours: int = Risk.EMERGENCY_TIME_LIMIT_HOURS
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    high_volatility_threshold_percent: float = Risk.HIGH_VOLATILITY_THRESHOLD
    btc_crash_threshold_percent: float = Risk.BTC_CRASH_THRESHOLD
    correlation_monitoring_enabled: bool = True
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not 0.5 <= self.max_daily_loss_percent <= 20:
            raise ConfigurationError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0.5% –¥–æ 20%")
        
        if self.emergency_exit_enabled:
            if not 5 <= self.critical_loss_percent <= 50:
                raise ConfigurationError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5% –¥–æ 50%")


@dataclass
class TimingSettings:
    """‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    default_update_interval: int = Timing.DEFAULT_UPDATE_INTERVAL
    fast_update_interval: int = Timing.FAST_UPDATE_INTERVAL
    slow_update_interval: int = Timing.SLOW_UPDATE_INTERVAL
    
    # –¢–∞–π–º–∞—É—Ç—ã
    api_timeout: int = Timing.API_TIMEOUT
    order_timeout: int = Timing.ORDER_TIMEOUT
    price_validity_seconds: int = Timing.PRICE_VALIDITY
    
    # –ü–µ—Ä–∏–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
    short_analysis_period_days: int = Timing.ANALYSIS_SHORT_PERIOD
    medium_analysis_period_days: int = Timing.ANALYSIS_MEDIUM_PERIOD
    long_analysis_period_days: int = Timing.ANALYSIS_LONG_PERIOD
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not 1 <= self.default_update_interval <= 60:
            raise ConfigurationError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥")
        
        if not 1 <= self.api_timeout <= 60:
            raise ConfigurationError("–¢–∞–π–º–∞—É—Ç API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 —Å–µ–∫—É–Ω–¥")


@dataclass
class LoggingSettings:
    """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level: str = Logging.DEFAULT_LEVEL
    console_enabled: bool = True
    file_enabled: bool = True
    
    # –§–∞–π–ª—ã
    file_path: str = "logs/trading_bot.log"
    max_file_size_mb: int = Logging.MAX_LOG_FILE_SIZE // (1024 * 1024)
    max_files: int = Logging.MAX_LOG_FILES
    
    # –§–æ—Ä–º–∞—Ç—ã
    console_format: str = Logging.CONSOLE_FORMAT
    file_format: str = Logging.FILE_FORMAT
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    trading_enabled: bool = True
    api_enabled: bool = True
    strategy_enabled: bool = True
    risk_enabled: bool = True
    analytics_enabled: bool = True
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.level not in Logging.LEVELS:
            raise ConfigurationError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {self.level}")
        
        if self.file_enabled:
            log_dir = Path(self.file_path).parent
            if not log_dir.exists():
                log_dir.mkdir(parents=True, exist_ok=True)


@dataclass
class AnalyticsSettings:
    """üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    enabled: bool = True
    
    # –û—Ç—á–µ—Ç—ã
    auto_reports_enabled: bool = True
    daily_report_enabled: bool = True
    weekly_report_enabled: bool = True
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    auto_export_enabled: bool = False
    export_format: str = "json"
    export_directory: str = "data/exports"
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    charts_enabled: bool = True
    chart_directory: str = "data/charts"
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    calculate_sharpe_ratio: bool = True
    risk_free_rate: float = Analytics.SHARPE_RATIO_RISK_FREE_RATE
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        if self.enabled:
            if self.export_format not in Analytics.SUPPORTED_EXPORT_FORMATS:
                raise ConfigurationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.export_format}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if self.auto_export_enabled:
                Path(self.export_directory).mkdir(parents=True, exist_ok=True)
            
            if self.charts_enabled:
                Path(self.chart_directory).mkdir(parents=True, exist_ok=True)


@dataclass
class NotificationSettings:
    """üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    enabled: bool = False
    
    # Telegram
    telegram_enabled: bool = False
    telegram_bot_token: str = ""
    telegram_chat_id: str = ""
    
    # Email
    email_enabled: bool = False
    email_smtp_server: str = ""
    email_smtp_port: int = 587
    email_username: str = ""
    email_password: str = ""
    email_to: str = ""
    
    # Webhook
    webhook_enabled: bool = False
    webhook_url: str = ""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    trade_notifications: bool = True
    emergency_notifications: bool = True
    daily_report_notifications: bool = True
    error_notifications: bool = True
    
    def __post_init__(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not self.telegram_bot_token:
            self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '')
        
        if not self.telegram_chat_id:
            self.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID', '')
    
    def validate(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.telegram_enabled:
            if not self.telegram_bot_token:
                raise ConfigurationError("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            if not self.telegram_chat_id:
                raise ConfigurationError("Telegram chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


@dataclass
class TradingSystemSettings:
    """üéØ –ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    profile_name: str = Profiles.BALANCED
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    api: APISettings = field(default_factory=APISettings)
    trading: TradingSettings = field(default_factory=TradingSettings)
    dca: DCASettings = field(default_factory=DCASettings)
    pyramid: PyramidSettings = field(default_factory=PyramidSettings)
    risk: RiskSettings = field(default_factory=RiskSettings)
    timing: TimingSettings = field(default_factory=TimingSettings)
    logging: LoggingSettings = field(default_factory=LoggingSettings)
    analytics: AnalyticsSettings = field(default_factory=AnalyticsSettings)
    notifications: NotificationSettings = field(default_factory=NotificationSettings)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    version: str = "4.1-refactored"
    created_at: str = field(default_factory=lambda: str(datetime.now()))
    
    @classmethod
    def from_profile(cls, profile_name: str) -> 'TradingSystemSettings':
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name not in Profiles.PROFILE_CONFIGS:
            raise ConfigurationError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
        
    @classmethod
    def from_profile(cls, profile_name: str) -> 'TradingSystemSettings':
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_name not in Profiles.PROFILE_CONFIGS:
            raise ConfigurationError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
        
        settings = cls(profile_name=profile_name)
        profile_config = Profiles.PROFILE_CONFIGS[profile_name]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        settings.trading.position_size_percent = profile_config["position_size_pct"]
        settings.trading.min_profit_percent = profile_config["min_profit_pct"]
        settings.trading.stop_loss_percent = profile_config["stop_loss_pct"]
        settings.dca.purchase_size_percent = profile_config["dca_purchase_size_pct"]
        settings.dca.max_purchases = profile_config["dca_max_purchases"]
        settings.timing.default_update_interval = profile_config["update_interval"]
        
        return settings
    
    @classmethod
    def from_env(cls) -> 'TradingSystemSettings':
        """üåç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        settings = cls()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        # (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ __post_init__ –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if profile := os.getenv('TRADING_PROFILE'):
            if profile in Profiles.PROFILE_CONFIGS:
                return cls.from_profile(profile)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if pos_size := os.getenv('POSITION_SIZE_PERCENT'):
            settings.trading.position_size_percent = float(pos_size)
        
        if min_profit := os.getenv('MIN_PROFIT_PERCENT'):
            settings.trading.min_profit_percent = float(min_profit)
        
        if update_interval := os.getenv('UPDATE_INTERVAL'):
            settings.timing.default_update_interval = int(update_interval)
        
        if log_level := os.getenv('LOG_LEVEL'):
            settings.logging.level = log_level.upper()
        
        return settings
    
    @classmethod
    def from_file(cls, file_path: str) -> 'TradingSystemSettings':
        """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        import json
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            settings = cls()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            if 'profile_name' in data:
                settings.profile_name = data['profile_name']
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            # –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–∏–ø–∞ marshmallow
            
            return settings
            
        except FileNotFoundError:
            raise ConfigurationError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        except json.JSONDecodeError as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {file_path}: {e}")
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ {file_path}: {e}")
    
    def validate_all(self) -> None:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.api.validate()
            self.trading.validate()
            self.dca.validate()
            self.pyramid.validate()
            self.risk.validate()
            self.timing.validate()
            self.logging.validate()
            self.analytics.validate()
            self.notifications.validate()
            
            # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            self._validate_cross_component()
            
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _validate_cross_component(self) -> None:
        """üîó –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å DCA –∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.dca.enabled:
            max_dca_position = self.dca.max_purchases * self.dca.purchase_size_percent
            if max_dca_position > self.trading.max_position_size_percent:
                raise ConfigurationError(
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è DCA –ø–æ–∑–∏—Ü–∏—è ({max_dca_position}%) –ø—Ä–µ–≤—ã—à–∞–µ—Ç "
                    f"–ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ ({self.trading.max_position_size_percent}%)"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∏—Å–∫-–Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.risk.emergency_exit_enabled:
            if self.risk.critical_loss_percent <= self.trading.stop_loss_percent:
                raise ConfigurationError(
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ª–∏–º–∏—Ç—ã vs —Ç–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
        max_trades_per_minute = self.risk.max_trades_per_hour / 60
        if max_trades_per_minute > self.api.calls_per_minute * 0.5:  # 50% –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
            raise ConfigurationError(
                "–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API"
            )
    
    def to_dict(self) -> Dict[str, Any]:
        """üìã –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        from dataclasses import asdict
        return asdict(self)
    
    def save_to_file(self, file_path: str) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        import json
        from pathlib import Path
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path(file_path).parent.mkdir(parents=True, exist_ok=True)
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(self.to_dict(), f, indent=2, ensure_ascii=False, default=str)
                
        except Exception as e:
            raise ConfigurationError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ {file_path}: {e}")
    
    def get_profile_config(self) -> ConfigProfile:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.profile_name == Profiles.CONSERVATIVE:
            return ConfigProfile.create_conservative()
        elif self.profile_name == Profiles.AGGRESSIVE:
            return ConfigProfile.create_aggressive()
        else:
            return ConfigProfile.create_balanced()
    
    def print_summary(self) -> None:
        """üìã –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print(f"‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ v{self.version}")
        print("=" * 60)
        print(f"üìä –ü—Ä–æ—Ñ–∏–ª—å: {self.profile_name}")
        print(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {self.trading.primary_pair}")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.trading.position_size_percent:.1f}%")
        print(f"üíé –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: {self.trading.min_profit_percent:.1f}%")
        print(f"üö® –°—Ç–æ–ø-–ª–æ—Å—Å: {self.trading.stop_loss_percent:.1f}%")
        print()
        
        print("üîß –ê–ö–¢–ò–í–ù–´–ï –°–ò–°–¢–ï–ú–´:")
        print(f"   üõí DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {'‚úÖ' if self.dca.enabled else '‚ùå'}")
        print(f"   üèóÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {'‚úÖ' if self.pyramid.enabled else '‚ùå'}")
        print(f"   üö® –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥: {'‚úÖ' if self.risk.emergency_exit_enabled else '‚ùå'}")
        print(f"   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {'‚úÖ' if self.analytics.enabled else '‚ùå'}")
        print(f"   üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if self.notifications.enabled else '‚ùå'}")
        print()
        
        print("‚è∞ –ò–ù–¢–ï–†–í–ê–õ–´:")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.timing.default_update_interval}—Å")
        print(f"   DCA –∫—É–ª–¥–∞—É–Ω: {self.dca.cooldown_minutes}–º–∏–Ω")
        print(f"   API —Ç–∞–π–º–∞—É—Ç: {self.timing.api_timeout}—Å")
        print()
        
        print("üõ°Ô∏è –õ–ò–ú–ò–¢–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {self.risk.max_daily_loss_percent:.1f}%")
        print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–±—ã—Ç–æ–∫: {self.risk.critical_loss_percent:.1f}%")
        print(f"   –°–¥–µ–ª–æ–∫ –≤ —á–∞—Å: {self.risk.max_trades_per_hour}")
        print(f"   API –≤—ã–∑–æ–≤–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {self.api.calls_per_minute}")


class ConfigurationManager:
    """üéõÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self._settings: Optional[TradingSystemSettings] = None
        self._config_file_path = "config/settings.json"
    
    @property
    def settings(self) -> TradingSystemSettings:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self._settings is None:
            self.load_default()
        return self._settings
    
    def load_default(self) -> None:
        """üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self._settings = TradingSystemSettings.from_env()
        self._settings.validate_all()
    
    def load_from_profile(self, profile_name: str) -> None:
        """üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
        self._settings = TradingSystemSettings.from_profile(profile_name)
        self._settings.validate_all()
    
    def load_from_file(self, file_path: Optional[str] = None) -> None:
        """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        path = file_path or self._config_file_path
        self._settings = TradingSystemSettings.from_file(path)
        self._settings.validate_all()
    
    def save_current(self, file_path: Optional[str] = None) -> None:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self._settings is None:
            raise ConfigurationError("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        
        path = file_path or self._config_file_path
        self._settings.save_to_file(path)
    
    def update_setting(self, path: str, value: Any) -> None:
        """üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self._settings is None:
            self.load_default()
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        parts = path.split('.')
        obj = self._settings
        
        for part in parts[:-1]:
            obj = getattr(obj, part)
        
        setattr(obj, parts[-1], value)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self._settings.validate_all()
    
    def get_setting(self, path: str) -> Any:
        """üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self._settings is None:
            self.load_default()
        
        parts = path.split('.')
        obj = self._settings
        
        for part in parts:
            obj = getattr(obj, part)
        
        return obj
    
    def reset_to_defaults(self) -> None:
        """üîÑ –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self._settings = None
        self.load_default()
    
    def validate_current(self) -> bool:
        """‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if self._settings:
                self._settings.validate_all()
            return True
        except ConfigurationError:
            return False
    
    def get_profiles_list(self) -> List[str]:
        """üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        return list(Profiles.PROFILE_CONFIGS.keys())
    
    def create_custom_profile(
        self, 
        name: str, 
        base_profile: str = Profiles.BALANCED,
        **overrides
    ) -> None:
        """üé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if base_profile not in Profiles.PROFILE_CONFIGS:
            raise ConfigurationError(f"–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {base_profile}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        new_profile = Profiles.PROFILE_CONFIGS[base_profile].copy()
        new_profile.update(overrides)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
        Profiles.PROFILE_CONFIGS[name] = new_profile


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigurationManager()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_settings() -> TradingSystemSettings:
    """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return config_manager.settings

def load_config(profile_name: Optional[str] = None, file_path: Optional[str] = None) -> TradingSystemSettings:
    """üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if file_path:
        config_manager.load_from_file(file_path)
    elif profile_name:
        config_manager.load_from_profile(profile_name)
    else:
        config_manager.load_default()
    
    return config_manager.settings

def save_config(file_path: Optional[str] = None) -> None:
    """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config_manager.save_current(file_path)

def update_config(path: str, value: Any) -> None:
    """üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    config_manager.update_setting(path, value)


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    settings = TradingSystemSettings.from_env()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
    try:
        settings.validate_all()
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    except ConfigurationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    settings.print_summary()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
    for profile_name in [Profiles.CONSERVATIVE, Profiles.BALANCED, Profiles.AGGRESSIVE]:
        try:
            profile_settings = TradingSystemSettings.from_profile(profile_name)
            profile_settings.validate_all()
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name}: OK")
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å {profile_name}: {e}")