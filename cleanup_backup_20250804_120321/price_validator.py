#!/usr/bin/env python3
"""üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ü–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""

import logging
from typing import Tuple

class PriceValidator:
    """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥aniem –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.min_profit_margin = 0.001  # –ú–∏–Ω–∏–º—É–º 0.1% –ø—Ä–∏–±—ã–ª–∏
        
    def validate_sell_price(self, sell_price: float, avg_buy_price: float, 
                          current_market_price: float) -> Tuple[bool, str, float]:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
        if sell_price <= avg_buy_price:
            safe_price = avg_buy_price * (1 + self.min_profit_margin)
            return False, f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ {sell_price:.8f} <= —Å—Ä–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ {avg_buy_price:.8f}", safe_price
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞  
        min_market_price = current_market_price * 0.995  # –ú–∞–∫—Å —Å–∫–∏–¥–∫–∞ 0.5%
        if sell_price < min_market_price:
            safe_price = current_market_price * 1.001
            return False, f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ {sell_price:.8f} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –¥–ª—è —Ä—ã–Ω–∫–∞ {current_market_price:.8f}", safe_price
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        profit_percent = (sell_price - avg_buy_price) / avg_buy_price
        if profit_percent < self.min_profit_margin:
            safe_price = avg_buy_price * (1 + self.min_profit_margin)
            return False, f"–ü—Ä–∏–±—ã–ª—å {profit_percent*100:.3f}% < –º–∏–Ω–∏–º—É–º–∞ {self.min_profit_margin*100:.1f}%", safe_price
        
        return True, "–¶–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", sell_price
    
    def validate_buy_price(self, buy_price: float, current_market_price: float) -> Tuple[bool, str, float]:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏"""
        
        # –ü–æ–∫—É–ø–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π
        max_market_price = current_market_price * 1.005  # –ú–∞–∫—Å –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ 0.5%
        if buy_price > max_market_price:
            safe_price = current_market_price * 0.999
            return False, f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ {buy_price:.8f} —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –¥–ª—è —Ä—ã–Ω–∫–∞ {current_market_price:.8f}", safe_price
        
        return True, "–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", buy_price

if __name__ == "__main__":
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    validator = PriceValidator()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
    is_valid, reason, safe_price = validator.validate_sell_price(0.180, 0.173, 0.179)
    print(f"–¢–µ—Å—Ç 1: {is_valid} - {reason} - {safe_price:.8f}")
    
    # –¢–µ—Å—Ç 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–Ω–∏–∂–µ –ø–æ–∫—É–ø–∫–∏)
    is_valid, reason, safe_price = validator.validate_sell_price(0.170, 0.173, 0.179) 
    print(f"–¢–µ—Å—Ç 2: {is_valid} - {reason} - {safe_price:.8f}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–¥–∞–∂–∞ —Å–ª–∏—à–∫–æ–º –¥–µ—à–µ–≤–∞—è –¥–ª—è —Ä—ã–Ω–∫–∞
    is_valid, reason, safe_price = validator.validate_sell_price(0.175, 0.173, 0.179)
    print(f"–¢–µ—Å—Ç 3: {is_valid} - {reason} - {safe_price:.8f}")
