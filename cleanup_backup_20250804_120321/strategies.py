import logging
import time
from abc import ABC, abstractmethod
from typing import Dict, Any, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime


@dataclass
class TradeSignal:
    """üìä –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
    action: str  # 'buy', 'sell', 'hold'
    quantity: float
    price: float
    confidence: float  # 0.0 - 1.0
    reason: str
    strategy: str
    timestamp: datetime


class BaseStrategy(ABC):
    """üèóÔ∏è –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    
    def __init__(self, config, name: str):
        self.config = config
        self.name = name
        self.logger = logging.getLogger(f"{__name__}.{name}")
        self.last_signal_time = 0
        self.min_signal_interval = 60  # 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
    
    @abstractmethod
    def analyze(self, market_data: Dict[str, Any], position_data: Dict[str, Any]) -> TradeSignal:
        """–ê–Ω–∞–ª–∏–∑ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        pass
    
    def can_generate_signal(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        return time.time() - self.last_signal_time > self.min_signal_interval
    
    def _create_signal(self, action: str, quantity: float, price: float, 
                      confidence: float, reason: str) -> TradeSignal:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        self.last_signal_time = time.time()
        
        return TradeSignal(
            action=action,
            quantity=quantity,
            price=price,
            confidence=confidence,
            reason=reason,
            strategy=self.name,
            timestamp=datetime.now()
        )


class PyramidStrategy(BaseStrategy):
    """üèóÔ∏è –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–∞–∂"""
    
    def __init__(self, config):
        super().__init__(config, "pyramid")
        self.last_sell_time = 0
        self.cooldown_seconds = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∂–∞–º–∏
        
    def analyze(self, market_data: Dict[str, Any], position_data: Dict[str, Any]) -> TradeSignal:
        """üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏"""
        
        if not position_data or position_data.get('quantity', 0) == 0:
            return self._create_signal('hold', 0, 0, 0, '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏')
        
        current_price = market_data['current_price']
        avg_price = position_data['avg_price']
        quantity = position_data['quantity']
        
        if avg_price <= 0:
            return self._create_signal('hold', 0, 0, 0, '–ù–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã')
        
        profit_percent = (current_price - avg_price) / avg_price
        
        # üö® –°—Ç–æ–ø-–ª–æ—Å—Å
        if profit_percent <= -self.config.STOP_LOSS_PERCENT:
            return self._create_signal(
                'sell', quantity, current_price * 1.001, 0.95,
                f'–°—Ç–æ–ø-–ª–æ—Å—Å: {profit_percent*100:.1f}%'
            )
        
        # üõ°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂ –≤ —É–±—ã—Ç–∫–µ
        if profit_percent < self.config.MIN_PROFIT_PERCENT:
            return self._create_signal(
                'hold', 0, 0, 0.3,
                f'–£–¥–µ—Ä–∂–∏–≤–∞–µ–º: –ø—Ä–∏–±—ã–ª—å {profit_percent*100:.2f}% < –ø–æ—Ä–æ–≥–∞ {self.config.MIN_PROFIT_PERCENT*100:.1f}%'
            )
        
        # ‚è∞ –ö—É–ª–¥–∞—É–Ω
        if time.time() - self.last_sell_time < self.cooldown_seconds:
            remaining = (self.cooldown_seconds - (time.time() - self.last_sell_time)) / 60
            return self._create_signal('hold', 0, 0, 0.2, f'–ö—É–ª–¥–∞—É–Ω: {remaining:.0f} –º–∏–Ω')
        
        # üèóÔ∏è –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–∏—Ä–∞–º–∏–¥—ã
        for level in self.config.PYRAMID_LEVELS:
            if profit_percent >= level['profit']:
                sell_quantity = quantity * level['sell_percent']
                profit_eur = sell_quantity * (current_price - avg_price)
                
                if profit_eur >= level['min_eur']:
                    self.last_sell_time = time.time()
                    return self._create_signal(
                        'sell', sell_quantity, current_price * 1.002, 0.8,
                        f'–ü–∏—Ä–∞–º–∏–¥–∞: –ø—Ä–∏–±—ã–ª—å {profit_percent*100:.1f}% = {profit_eur:.2f} EUR'
                    )
        
        return self._create_signal('hold', 0, 0, 0.4, f'–ñ–¥–µ–º –ª—É—á—à–µ–≥–æ —É—Ä–æ–≤–Ω—è: {profit_percent*100:.2f}%')

class DCAStrategy(BaseStrategy):
    """üõí DCA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"""
    
    def __init__(self, config):
        super().__init__(config, "dca")
        self.last_dca_time = 0
        self.dca_count = 0
        self.last_dca_date = datetime.now().date()
        
    def analyze(self, market_data: Dict[str, Any], position_data: Dict[str, Any]) -> TradeSignal:
        """üõí –ê–Ω–∞–ª–∏–∑ DCA"""
        
        current_price = market_data['current_price']
        balance = market_data['balance']

        # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ DCA –ª–∏–º–∏—Ç–æ–≤
        if hasattr(self, 'dca_limiter') and self.dca_limiter:
            can_dca, reason = self.dca_limiter.can_execute_dca(
                current_price, position_data, balance
            )
            
            if not can_dca:
                return self._create_signal('hold', 0, 0, 0.1, f'DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {reason}')
        
        if not position_data or position_data.get('quantity', 0) == 0:
            return self._create_signal('hold', 0, 0, 0.1, '–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è DCA')
        
        avg_price = position_data['avg_price']
        current_value = position_data['quantity'] * current_price
        
        if avg_price <= 0:
            return self._create_signal('hold', 0, 0, 0.1, '–ù–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        today = datetime.now().date()
        if today != self.last_dca_date:
            self.dca_count = 0
            self.last_dca_date = today
        
        if self.dca_count >= self.config.DCA_DAILY_LIMIT:
            return self._create_signal('hold', 0, 0, 0.1, f'DCA –ª–∏–º–∏—Ç: {self.dca_count}/{self.config.DCA_DAILY_LIMIT}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        cooldown_seconds = self.config.DCA_COOLDOWN_MINUTES * 60
        if time.time() - self.last_dca_time < cooldown_seconds:
            remaining = (cooldown_seconds - (time.time() - self.last_dca_time)) / 60
            return self._create_signal('hold', 0, 0, 0.2, f'DCA –∫—É–ª–¥–∞—É–Ω: {remaining:.0f} –º–∏–Ω')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ
        drop_percent = (avg_price - current_price) / avg_price
        if drop_percent < self.config.DCA_DROP_THRESHOLD:
            return self._create_signal(
                'hold', 0, 0, 0.3,
                f'–ú–∞–ª–æ–µ –ø–∞–¥–µ–Ω–∏–µ: {drop_percent*100:.1f}% < {self.config.DCA_DROP_THRESHOLD*100:.0f}%'
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏
        dca_amount = balance * self.config.DCA_PURCHASE_SIZE
        new_total_value = current_value + dca_amount
        new_position_percent = new_total_value / (balance + new_total_value)
        
        if new_position_percent > self.config.DCA_MAX_POSITION:
            return self._create_signal(
                'hold', 0, 0, 0.2,
                f'–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏: {new_position_percent*100:.0f}% > {self.config.DCA_MAX_POSITION*100:.0f}%'
            )
        
        # ‚úÖ DCA —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        if balance < dca_amount:
            return self._create_signal('hold', 0, 0, 0.1, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: {balance:.2f} < {dca_amount:.2f}')
        
        dca_quantity = dca_amount / current_price
        self.last_dca_time = time.time()
        self.dca_count += 1
        
        return self._create_signal(
            'buy', dca_quantity, current_price * 0.9995, 0.7,
            f'DCA: –ø–∞–¥–µ–Ω–∏–µ {drop_percent*100:.1f}%, —Ä–∞–∑–º–µ—Ä {self.config.DCA_PURCHASE_SIZE*100:.0f}%'
        )


class StrategyManager:
    """üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, config, api_service, position_manager):
        self.config = config
        self.api_service = api_service
        self.position_manager = position_manager
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.pyramid_strategy = PyramidStrategy(config)
        self.dca_strategy = DCAStrategy(config)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –≤–∞–∂–Ω–µ–µ)
        self.strategy_priorities = {
            'pyramid': 100,  # –ü—Ä–æ–¥–∞–∂–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
            'dca': 50        # DCA –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞
        }
        
    def execute_cycle(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """üîÑ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            position_data = self.position_manager.get_accurate_position_data(self.config.CURRENCY_1)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals = []
            
            pyramid_signal = self.pyramid_strategy.analyze(market_data, position_data)
            if pyramid_signal.action != 'hold':
                signals.append(pyramid_signal)
            
            dca_signal = self.dca_strategy.analyze(market_data, position_data)
            if dca_signal.action != 'hold':
                signals.append(dca_signal)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ - –¥–µ—Ä–∂–∏–º
            if not signals:
                return {
                    'action': 'hold',
                    'reason': '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
                    'success': True,
                    'trade_executed': False
                }
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            best_signal = max(signals, key=lambda s: self.strategy_priorities.get(s.strategy, 0))
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω —Å–∏–≥–Ω–∞–ª: {best_signal.strategy}")
            self.logger.info(f"   –î–µ–π—Å—Ç–≤–∏–µ: {best_signal.action}")
            self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {best_signal.reason}")
            self.logger.info(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {best_signal.confidence:.0%}")
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            if best_signal.action == 'buy':
                return self._execute_buy(best_signal)
            elif best_signal.action == 'sell':
                return self._execute_sell(best_signal)
            
            return {
                'action': 'hold',
                'reason': best_signal.reason,
                'success': True,
                'trade_executed': False
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return {
                'action': 'error',
                'reason': str(e),
                'success': False,
                'trade_executed': False
            }
    
    def _execute_buy(self, signal: TradeSignal) -> Dict[str, Any]:
        """üõí –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""
        try:
            result = self.api_service.create_order(
                self.config.get_pair(), signal.quantity, signal.price, 'buy'
            )
            
            if result.get('result'):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                trade_info = {
                    'type': 'buy',
                    'quantity': signal.quantity,
                    'price': signal.price,
                    'timestamp': int(time.time())
                }
                self.position_manager.update_position(self.config.CURRENCY_1, trade_info)
                
                self.logger.info(f"‚úÖ {signal.strategy} –ø–æ–∫—É–ø–∫–∞: {signal.quantity:.4f} –ø–æ {signal.price:.8f}")
                
                return {
                    'action': f'{signal.strategy}_buy',
                    'reason': signal.reason,
                    'success': True,
                    'trade_executed': True,
                    'quantity': signal.quantity,
                    'price': signal.price
                }
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {result}")
                return {
                    'action': 'buy_failed',
                    'reason': f'API –æ—à–∏–±–∫–∞: {result}',
                    'success': False,
                    'trade_executed': False
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
            return {
                'action': 'buy_error',
                'reason': str(e),
                'success': False,
                'trade_executed': False
            }
    
    def _execute_sell(self, signal: TradeSignal) -> Dict[str, Any]:
        """üíé –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            result = self.api_service.create_order(
                self.config.get_pair(), signal.quantity, signal.price, 'sell'
            )
            
            if result.get('result'):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                trade_info = {
                    'type': 'sell',
                    'quantity': signal.quantity,
                    'price': signal.price,
                    'timestamp': int(time.time())
                }
                self.position_manager.update_position(self.config.CURRENCY_1, trade_info)
                
                self.logger.info(f"‚úÖ {signal.strategy} –ø—Ä–æ–¥–∞–∂–∞: {signal.quantity:.4f} –ø–æ {signal.price:.8f}")
                
                return {
                    'action': f'{signal.strategy}_sell',
                    'reason': signal.reason,
                    'success': True,
                    'trade_executed': True,
                    'quantity': signal.quantity,
                    'price': signal.price
                }
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result}")
                return {
                    'action': 'sell_failed',
                    'reason': f'API –æ—à–∏–±–∫–∞: {result}',
                    'success': False,
                    'trade_executed': False
                }
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {e}")
            return {
                'action': 'sell_error',
                'reason': str(e),
                'success': False,
                'trade_executed': False
            }
