import logging
import signal
import sys
import time
from datetime import datetime

from config import TradingConfig
from api_client import ExmoAPIClient
from api_service import APIService
from position_manager import PositionManager
from risk_management import RiskManager
from strategies import StrategyManager
from emergency_exit_manager import EmergencyExitManager
from dca_limiter import DCALimiter
from rate_limiter import RateLimitedAPIClient
from simple_analytics import SimpleAnalytics


class TradingBot:
    """ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç"""

    def __init__(self):
        self.config = TradingConfig()
        self.setup_logging()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            self.config.print_summary()
        except ValueError as e:
            self.logger.error(str(e))
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.api_client = ExmoAPIClient(self.config.API_KEY, self.config.API_SECRET)
        self.api_service = APIService(self.api_client, self.config)
        self.position_manager = PositionManager(self.config, self.api_service)
        self.risk_manager = RiskManager(self.config)
        self.strategy_manager = StrategyManager(self.config, self.api_service, self.position_manager)

        # üö® –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if getattr(self.config, 'EMERGENCY_EXIT_ENABLED', False):
            self.emergency_exit = EmergencyExitManager(self.config, self.api_service, self.position_manager)
            self.logger.info("üö® EmergencyExitManager –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.emergency_exit = None
            
        if getattr(self.config, 'DCA_LIMITER_ENABLED', False):
            self.dca_limiter = DCALimiter(self.config)
            self.logger.info("üõ°Ô∏è DCALimiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.dca_limiter = None
        
        # üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if getattr(self.config, 'ANALYTICS_ENABLED', False):
            self.analytics = SimpleAnalytics()
            self.last_analytics_report = time.time()
            self.logger.info("üìä SimpleAnalytics –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            self.analytics = None
        
        # ‚ö° Rate Limiting –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞
        if getattr(self.config, 'RATE_LIMITER_ENABLED', False):
            from rate_limiter import RateLimiter
            rate_limiter = RateLimiter(
                getattr(self.config, 'API_CALLS_PER_MINUTE', 30),
                getattr(self.config, 'API_CALLS_PER_HOUR', 300)
            )
            self.api_client = RateLimitedAPIClient(self.api_client, rate_limiter)
            self.logger.info("‚ö° RateLimiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = time.time()
        self.cycle_count = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.running = False

        # Graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        self.logger.info("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import os
        os.makedirs('logs', exist_ok=True)

        logging.basicConfig(
            level=getattr(logging, self.config.LOG_LEVEL),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(self.config.LOG_FILE, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def initialize(self) -> bool:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
            user_info = self.api_client.get_user_info()
            if not user_info:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
            eur_balance = self.api_service.get_balance(self.config.CURRENCY_2)
            doge_balance = self.api_service.get_balance(self.config.CURRENCY_1)

            self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {eur_balance:.4f} {self.config.CURRENCY_2}, "
                           f"{doge_balance:.4f} {self.config.CURRENCY_1}")

            if eur_balance < 1.0 and doge_balance < 1.0:
                self.logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                return False

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π
            position_data = self.position_manager.get_accurate_position_data(self.config.CURRENCY_1)
            if position_data['quantity'] > 0:
                self.logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {position_data['quantity']:.4f} "
                               f"–ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ {position_data['avg_price']:.8f}")

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def run(self):
        """üèÉ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        if not self.initialize():
            self.logger.error("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            return

        self.running = True
        self.logger.info("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

        while self.running:
            try:
                self.cycle_count += 1
                cycle_start = time.time()

                # –°–æ–±–∏—Ä–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = self._collect_market_data()
                if not market_data:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    time.sleep(self.config.UPDATE_INTERVAL)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                if not self._check_safety(market_data):
                    self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                    time.sleep(self.config.UPDATE_INTERVAL)
                    continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
                
                # üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                if self.emergency_exit:
                    emergency_result = self.emergency_exit.check_emergency_conditions(
                        self.config.CURRENCY_1, market_data['current_price']
                    )
                    
                    if emergency_result.should_exit:
                        self.logger.critical(f"üö® –ê–í–ê–†–ò–ô–ù–´–ô –í–´–•–û–î: {emergency_result.reason}")
                        exit_result = self.emergency_exit.execute_emergency_exit(
                            self.config.CURRENCY_1, emergency_result
                        )
                        
                        if exit_result['success'] and self.analytics:
                            self.analytics.update_cycle_stats({'emergency_exit': True})
                        
                        time.sleep(self.config.UPDATE_INTERVAL * 2)
                        continue
                
                result = self.strategy_manager.execute_cycle(market_data)

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._process_result(result)

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 50-–π —Ü–∏–∫–ª
                if self.cycle_count % 50 == 0:
                    self._log_statistics()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                cycle_time = time.time() - cycle_start
                sleep_time = max(0, self.config.UPDATE_INTERVAL - cycle_time)

                if sleep_time > 0:
                    time.sleep(sleep_time)

            except KeyboardInterrupt:
                self.logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{self.cycle_count}: {e}")
                self.risk_manager.register_error()
                time.sleep(self.config.UPDATE_INTERVAL * 2)

        self.shutdown()

    def _collect_market_data(self) -> dict:
        """üìä –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_price = self.api_service.get_current_price(self.config.get_pair())
            balance_eur = self.api_service.get_balance(self.config.CURRENCY_2)

            if current_price <= 0 or balance_eur < 0:
                return None

            return {
                'current_price': current_price,
                'balance': balance_eur,
                'timestamp': time.time()
            }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def _check_safety(self, market_data: dict) -> bool:
        """üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            emergency_stop, reason = self.risk_manager.emergency_stop_check(market_data['balance'])
            if emergency_stop:
                self.logger.error(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê: {reason}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            current_price = market_data['current_price']
            if current_price < 0.05 or current_price > 2.0:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ DOGE: {current_price}")
                return False

            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False

    def _process_result(self, result: dict):
        """üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not result.get('success'):
            self.failed_trades += 1
            self.logger.warning(f"‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Ü–∏–∫–ª: {result.get('reason')}")
            return

        action = result.get('action', 'hold')
        reason = result.get('reason', '')

        # –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        action_emojis = {
            'pyramid_sell': 'üèóÔ∏è',
            'dca_buy': 'üõí', 
            'hold': 'üíé',
            'wait': '‚è∏Ô∏è'
        }

        emoji = action_emojis.get(action, 'üîÑ')
        self.logger.info(f"{emoji} {action}: {reason}")

        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if result.get('trade_executed'):
            self.successful_trades += 1
            self.risk_manager.reset_error_count()

    def _log_statistics(self):
        """üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = time.time() - self.start_time
        success_rate = (self.successful_trades / max(1, self.successful_trades + self.failed_trades)) * 100

        self.logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—Ü–∏–∫–ª #{self.cycle_count}):")
        self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime/3600:.1f} —á–∞—Å–æ–≤")
        self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {self.successful_trades}")
        self.logger.info(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ü–∏–∫–ª—ã: {self.failed_trades}")
        self.logger.info(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")

        # –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cache_stats = self.api_service.get_cache_stats()
        self.logger.info(f"   üåê –ö—ç—à –∑–∞–ø–∏—Å–µ–π: {cache_stats['total_entries']}")

    def _signal_handler(self, signum, frame):
        """‚å®Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        self.running = False

    def shutdown(self):
        """üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            uptime = time.time() - self.start_time

            self.logger.info("üîö –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ –ë–û–¢–ê")
            self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime/3600:.1f} —á–∞—Å–æ–≤")
            self.logger.info(f"   üîÑ –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {self.cycle_count}")
            self.logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.successful_trades}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.position_manager.save_positions_to_file()
            self.logger.info("üíæ –ü–æ–∑–∏—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            self.logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


if __name__ == "__main__":
    print("ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ DOGE")
    print("=" * 30)

    bot = TradingBot()
    bot.run()
