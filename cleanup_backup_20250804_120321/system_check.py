#!/usr/bin/env python3
"""üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""

import sys
import os
from pathlib import Path
import importlib.util
from typing import List, Tuple, Dict, Any

class SystemChecker:
    """üîç –ü—Ä–æ–≤–µ—Ä—â–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.root_dir = Path(".")
        self.src_dir = Path("src")
        self.checks_passed = 0
        self.checks_total = 0
        self.warnings = []
        self.errors = []
    
    def run_all_checks(self) -> bool:
        """üîç –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        checks = [
            ("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", self._check_directory_structure),
            ("üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã", self._check_core_files),
            ("üêç Python –º–æ–¥—É–ª–∏", self._check_python_modules),
            ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self._check_configuration),
            ("üîÑ –ê–¥–∞–ø—Ç–µ—Ä—ã", self._check_adapters),
            ("üíæ –ë—ç–∫–∞–ø—ã", self._check_backups),
            ("üß™ –¢–µ—Å—Ç—ã", self._check_tests),
            ("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", self._check_documentation)
        ]
        
        for check_name, check_func in checks:
            self._run_check(check_name, check_func)
        
        self._print_summary()
        return self.checks_passed == self.checks_total
    
    def _run_check(self, name: str, check_func) -> None:
        """üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.checks_total += 1
        
        try:
            result = check_func()
            if result:
                print(f"‚úÖ {name}")
                self.checks_passed += 1
            else:
                print(f"‚ùå {name}")
        except Exception as e:
            print(f"‚ùå {name}: {e}")
            self.errors.append(f"{name}: {e}")
    
    def _check_directory_structure(self) -> bool:
        """üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        required_dirs = [
            "src", "src/core", "src/config", "src/infrastructure",
            "src/domain", "src/application", "src/presentation",
            "tests", "backup_before_migration"
        ]
        
        missing_dirs = []
        for dir_path in required_dirs:
            if not (self.root_dir / dir_path).exists():
                missing_dirs.append(dir_path)
        
        if missing_dirs:
            self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
            return False
        
        return True
    
    def _check_core_files(self) -> bool:
        """üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            "main.py",
            "requirements.txt", 
            ".env.example",
            "src/core/interfaces.py",
            "src/core/models.py",
            "src/core/exceptions.py",
            "src/config/settings.py",
            "src/adapters.py"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not (self.root_dir / file_path).exists():
                missing_files.append(file_path)
        
        if missing_files:
            self.errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
            return False
        
        return True
    
    def _check_python_modules(self) -> bool:
        """üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
        src_path = str(self.src_dir.absolute())
        if src_path not in sys.path:
            sys.path.insert(0, src_path)
        
        modules_to_check = [
            ("core.interfaces", "–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"),
            ("core.models", "–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö"),
            ("core.exceptions", "–ò—Å–∫–ª—é—á–µ–Ω–∏—è"),
            ("config.settings", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
            ("adapters", "–ê–¥–∞–ø—Ç–µ—Ä—ã")
        ]
        
        failed_imports = []
        for module_name, description in modules_to_check:
            try:
                importlib.import_module(module_name)
            except ImportError as e:
                failed_imports.append(f"{description} ({module_name}): {e}")
        
        if failed_imports:
            self.errors.extend(failed_imports)
            return False
        
        return True
    
    def _check_configuration(self) -> bool:
        """‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
            src_path = str(self.src_dir.absolute())
            if src_path not in sys.path:
                sys.path.insert(0, src_path)
            
            from config.settings import get_settings
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = get_settings()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
            env_file = self.root_dir / ".env"
            if not env_file.exists():
                self.warnings.append("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
            if not settings.exmo_api_key or not settings.exmo_api_secret:
                self.warnings.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
            
            return True
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _check_adapters(self) -> bool:
        """üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        try:
            from adapters import LegacyBotAdapter, StrategyAdapter
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º LegacyBotAdapter
            adapter = LegacyBotAdapter(use_hybrid=False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö –±–æ—Ç–æ–≤
            old_bots_available = []
            if (self.root_dir / "bot.py").exists():
                old_bots_available.append("bot.py")
            if (self.root_dir / "hybrid_bot.py").exists():
                old_bots_available.append("hybrid_bot.py")
            
            if not old_bots_available:
                self.warnings.append("–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - legacy —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return True
            
        except Exception as e:
            self.errors.append(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: {e}")
            return False
    
    def _check_backups(self) -> bool:
        """üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–æ–≤"""
        backup_dir = self.root_dir / "backup_before_migration"
        
        if not backup_dir.exists():
            self.warnings.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –±—ç–∫–∞–ø–µ
        important_backups = ["bot.py", "config.py", "main.py"]
        missing_backups = []
        
        for file_name in important_backups:
            if not (backup_dir / file_name).exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω)
                if (self.root_dir / file_name).exists():
                    missing_backups.append(file_name)
        
        if missing_backups:
            self.warnings.append(f"–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±—ç–∫–∞–ø–µ: {', '.join(missing_backups)}")
        
        return True
    
    def _check_tests(self) -> bool:
        """üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        test_files = [
            "tests/conftest.py",
            "tests/test_config.py", 
            "tests/test_adapters.py",
            "pytest.ini"
        ]
        
        missing_tests = []
        for test_file in test_files:
            if not (self.root_dir / test_file).exists():
                missing_tests.append(test_file)
        
        if missing_tests:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_tests)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å pytest
        try:
            import pytest
        except ImportError:
            self.warnings.append("pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest")
        
        return True
    
    def _check_documentation(self) -> bool:
        """üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        docs = [
            "README_NEW.md",
            "CHANGELOG.md"
        ]
        
        missing_docs = []
        for doc in docs:
            if not (self.root_dir / doc).exists():
                missing_docs.append(doc)
        
        if missing_docs:
            self.warnings.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {', '.join(missing_docs)}")
        
        return True
    
    def _print_summary(self) -> None:
        """üìã –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\nüìã –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò")
        print("=" * 30)
        
        success_rate = (self.checks_passed / self.checks_total) * 100 if self.checks_total > 0 else 0
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.checks_passed}/{self.checks_total} ({success_rate:.0f}%)")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        print("\nüéØ –°–¢–ê–¢–£–° –ì–û–¢–û–í–ù–û–°–¢–ò:")
        if self.checks_passed == self.checks_total:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        elif self.checks_passed >= self.checks_total * 0.8:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫")
    
    def run_mode_compatibility_check(self) -> Dict[str, bool]:
        """üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤"""
        print("\nüé≠ –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–û–í –†–ê–ë–û–¢–´")
        print("=" * 30)
        
        modes = {
            "hybrid": self._check_hybrid_mode(),
            "legacy": self._check_legacy_mode(), 
            "new": self._check_new_mode()
        }
        
        for mode, available in modes.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            print(f"  {mode}: {status}")
        
        return modes
    
    def _check_hybrid_mode(self) -> bool:
        """üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            src_path = str(self.src_dir.absolute())
            if src_path not in sys.path:
                sys.path.insert(0, src_path)
            
            from config.settings import get_settings
            from adapters import LegacyBotAdapter
            
            settings = get_settings()
            adapter = LegacyBotAdapter()
            
            return True
        except Exception:
            return False
    
    def _check_legacy_mode(self) -> bool:
        """üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ legacy —Ä–µ–∂–∏–º–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        legacy_files = ["bot.py", "config.py"]
        
        for file_name in legacy_files:
            if not (self.root_dir / file_name).exists():
                return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            if (self.root_dir / "hybrid_bot.py").exists():
                spec = importlib.util.spec_from_file_location("hybrid_bot", "hybrid_bot.py")
                module = importlib.util.module_from_spec(spec)
                return True
            elif (self.root_dir / "bot.py").exists():
                spec = importlib.util.spec_from_file_location("bot", "bot.py")
                module = importlib.util.module_from_spec(spec)
                return True
        except Exception:
            pass
        
        return False
    
    def _check_new_mode(self) -> bool:
        """üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        return False
    
    def generate_startup_script(self) -> None:
        """üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞"""
        print("\nüöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê –ó–ê–ü–£–°–ö–ê")
        print("=" * 30)
        
        startup_script = '''#!/bin/bash
# üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ DOGE Trading Bot v4.1-refactored

echo "ü§ñ DOGE Trading Bot v4.1-refactored"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if ! pip list | grep -q "requests"; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    pip install -r requirements.txt
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
echo "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
python main.py --validate

if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!"
    echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
echo "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ..."
python main.py --mode hybrid --profile balanced

'''
        
        with open("start_bot.sh", "w") as f:
            f.write(startup_script)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod("start_bot.sh", 0o755)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω: start_bot.sh")
        print("üöÄ –ó–∞–ø—É—Å–∫: ./start_bot.sh")


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SystemChecker()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    all_checks_passed = checker.run_all_checks()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤
    modes = checker.run_mode_compatibility_check()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    checker.generate_startup_script()
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if all_checks_passed:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --mode hybrid")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        if checker.errors:
            print("  1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        if checker.warnings:
            print("  2. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if modes.get("legacy", False):
            print("  3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py --mode legacy")
    
    if not (Path(".env").exists()):
        print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
        print("  ‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env.example –≤ .env")
        print("  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("  üìñ README_NEW.md - —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
    print("  üìã CHANGELOG.md - –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("  üß™ pytest tests/ - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")


if __name__ == "__main__":
    main()