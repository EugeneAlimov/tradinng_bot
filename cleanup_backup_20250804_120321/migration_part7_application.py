#!/usr/bin/env python3
"""üéÆ –ú–∏–≥—Ä–∞—Ü–∏—è Part 7 - –°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

import logging
from pathlib import Path


class Migration:
    """üéÆ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dir = project_root / "src"
        self.application_dir = self.src_dir / "application"
        self.logger = logging.getLogger(__name__)

    def execute(self) -> bool:
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            self.logger.info("üéÆ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            self._create_directory_structure()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
            self._create_trading_service()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            self._create_orchestrator()
            
            self.logger.info("‚úÖ –°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return False

    def _create_directory_structure(self):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        dirs_to_create = [
            self.application_dir,
            self.application_dir / "services",
            self.application_dir / "orchestrators",
        ]
        
        for dir_path in dirs_to_create:
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º __init__.py
            init_file = dir_path / "__init__.py"
            if not init_file.exists():
                init_file.write_text('"""üéÆ –°–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""\n')

    def _create_trading_service(self):
        """üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        trading_service_content = '''#!/usr/bin/env python3
"""üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å"""

import asyncio
import logging
from typing import Dict, Any, Optional, List
from decimal import Decimal
from datetime import datetime

from ...core.interfaces import IExchangeAPI, ITradingStrategy, IRiskManager, IPositionManager
from ...core.models import TradeSignal, MarketData, Position, TradingPair, SignalAction
from ...core.exceptions import TradingSystemError, APIError, StrategyError
from ...core.base import BaseService
from ...infrastructure.di_container import injectable


@injectable
class TradingService(BaseService):
    """üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self, 
                 exchange_api: IExchangeAPI,
                 risk_manager: IRiskManager,
                 position_manager: IPositionManager):
        super().__init__("trading_service")
        
        self.exchange_api = exchange_api
        self.risk_manager = risk_manager
        self.position_manager = position_manager
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.strategies: List[ITradingStrategy] = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        self.is_trading_enabled = True
        self.last_trade_time: Optional[datetime] = None
        self.active_orders: Dict[str, Dict[str, Any]] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.trades_count = 0
        self.successful_trades = 0
        
    async def _initialize_implementation(self) -> None:
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await self.exchange_api.get_balance("EUR")
            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            raise TradingSystemError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –±–∏—Ä–∂–∏")
    
    def add_strategy(self, strategy: ITradingStrategy) -> None:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.strategies.append(strategy)
        self.logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.get_strategy_name()}")
    
    def remove_strategy(self, strategy_name: str) -> bool:
        """‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        for i, strategy in enumerate(self.strategies):
            if strategy.get_strategy_name() == strategy_name:
                del self.strategies[i]
                self.logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
                return True
        return False
    
    async def execute_trading_cycle(self, trading_pair: TradingPair) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self._get_market_data(trading_pair)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            position = await self.position_manager.get_position(trading_pair.base)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            signals = await self._analyze_strategies(market_data, position)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª
            best_signal = await self._select_best_signal(signals)
            
            if not best_signal:
                return {
                    'action': 'hold',
                    'reason': '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
                    'signals_count': len(signals)
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏
            risk_assessment = await self.risk_manager.assess_risk(best_signal, position)
            
            if not risk_assessment['can_execute']:
                return {
                    'action': 'blocked',
                    'reason': f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {'; '.join(risk_assessment['risk_factors'])}",
                    'risk_score': risk_assessment['risk_score']
                }
            
            # –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            execution_result = await self._execute_signal(best_signal)
            
            return {
                'action': best_signal.action.value,
                'signal': {
                    'strategy': best_signal.strategy_name,
                    'confidence': best_signal.confidence,
                    'reason': best_signal.reason,
                    'quantity': float(best_signal.quantity),
                    'price': float(best_signal.price) if best_signal.price else None
                },
                'execution': execution_result,
                'risk_assessment': risk_assessment
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return {
                'action': 'error',
                'reason': f"–û—à–∏–±–∫–∞: {e}",
                'error_type': type(e).__name__
            }
    
    async def _get_market_data(self, trading_pair: TradingPair) -> MarketData:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await self.exchange_api.get_current_price(str(trading_pair))
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            balance = await self.exchange_api.get_balance(trading_pair.quote)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = MarketData(
                trading_pair=trading_pair,
                current_price=current_price,
                timestamp=datetime.now()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            market_data.additional_data['balance'] = float(balance)
            
            return market_data
            
        except APIError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise TradingSystemError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _analyze_strategies(self, market_data: MarketData, 
                                 position: Optional[Position]) -> List[TradeSignal]:
        """üß† –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        signals = []
        
        for strategy in self.strategies:
            try:
                signal = await strategy.analyze(market_data, position)
                if signal and signal.action != SignalAction.HOLD:
                    signals.append(signal)
                    self.logger.debug(f"üìà –°–∏–≥–Ω–∞–ª –æ—Ç {strategy.get_strategy_name()}: "
                                    f"{signal.action.value} {signal.confidence:.2f}")
            except StrategyError as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.get_strategy_name()}: {e}")
            except Exception as e:
                self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.get_strategy_name()}: {e}")
        
        return signals
    
    async def _select_best_signal(self, signals: List[TradeSignal]) -> Optional[TradeSignal]:
        """üéØ –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        if not signals:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        def signal_priority(signal: TradeSignal) -> float:
            # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–º–µ–µ—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if signal.action == SignalAction.EMERGENCY_EXIT:
                return 1000.0 + signal.confidence
            elif signal.action == SignalAction.SELL:
                return 100.0 + signal.confidence
            elif signal.action == SignalAction.BUY:
                return 50.0 + signal.confidence
            else:
                return signal.confidence
        
        best_signal = max(signals, key=signal_priority)
        
        self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω —Å–∏–≥–Ω–∞–ª: {best_signal.strategy_name} "
                        f"{best_signal.action.value} confidence={best_signal.confidence:.2f}")
        
        return best_signal
    
    async def _execute_signal(self, signal: TradeSignal) -> Dict[str, Any]:
        """‚ö° –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not self.is_trading_enabled:
                return {
                    'success': False,
                    'reason': '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞',
                    'order_id': None
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            order_type = self._get_order_type(signal)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
            order_result = await self.exchange_api.create_order(
                pair=str(signal.trading_pair),
                quantity=signal.quantity,
                price=signal.price or Decimal('0'),
                order_type=order_type
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
            order_id = order_result.get('order_id')
            if order_id:
                self.active_orders[order_id] = {
                    'signal': signal,
                    'created_at': datetime.now(),
                    'status': 'created'
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.trades_count += 1
            self.last_trade_time = datetime.now()
            
            self.logger.info(f"‚ö° –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order_type} {signal.quantity} "
                           f"–ø–æ {signal.price} (ID: {order_id})")
            
            return {
                'success': True,
                'order_id': order_id,
                'order_type': order_type,
                'quantity': float(signal.quantity),
                'price': float(signal.price) if signal.price else None,
                'created_at': datetime.now().isoformat()
            }
            
        except APIError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {
                'success': False,
                'reason': f'API –æ—à–∏–±–∫–∞: {e}',
                'order_id': None
            }
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'reason': f'–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {e}',
                'order_id': None
            }
    
    def _get_order_type(self, signal: TradeSignal) -> str:
        """üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞"""
        if signal.action == SignalAction.BUY:
            return "buy" if signal.price is None else "limit_buy"
        elif signal.action in [SignalAction.SELL, SignalAction.EMERGENCY_EXIT]:
            return "sell" if signal.price is None else "limit_sell"
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {signal.action}")
    
    def enable_trading(self) -> None:
        """‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.is_trading_enabled = True
        self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞")
    
    def disable_trading(self) -> None:
        """üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.is_trading_enabled = False
        self.logger.warning("üö´ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    def get_service_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        base_status = super().get_status()
        
        trading_status = {
            'is_trading_enabled': self.is_trading_enabled,
            'strategies_count': len(self.strategies),
            'active_orders_count': len(self.active_orders),
            'total_trades': self.trades_count,
            'successful_trades': self.successful_trades,
            'success_rate': (self.successful_trades / max(1, self.trades_count)) * 100,
            'last_trade_time': self.last_trade_time.isoformat() if self.last_trade_time else None
        }
        
        return {**base_status, **trading_status}


if __name__ == "__main__":
    print("üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
'''

        service_file = self.application_dir / "services" / "trading_service.py"
        service_file.write_text(trading_service_content)
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω services/trading_service.py")

    def _create_orchestrator(self):
        """üéº –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        orchestrator_content = '''#!/usr/bin/env python3
"""üéº –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""

import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta

from ...core.models import TradingPair, SystemStatus
from ...core.interfaces import IHealthChecker
from ...infrastructure.di_container import injectable
from ..services.trading_service import TradingService


@injectable
class TradingOrchestrator:
    """üéº –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, 
                 trading_service: TradingService,
                 health_checker: IHealthChecker):
        self.trading_service = trading_service
        self.health_checker = health_checker
        self.logger = logging.getLogger(f"{__name__}.TradingOrchestrator")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.is_running = False
        self.trading_pairs: List[TradingPair] = []
        self.cycle_interval = 15  # —Å–µ–∫—É–Ω–¥
        self.last_cycle_time: Optional[datetime] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_cycles = 0
        self.successful_cycles = 0
        self.errors_count = 0
        
        self.logger.info("üéº –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def add_trading_pair(self, trading_pair: TradingPair) -> None:
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        self.trading_pairs.append(trading_pair)
        self.logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {trading_pair}")
    
    def set_cycle_interval(self, seconds: int) -> None:
        """‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.cycle_interval = max(5, seconds)  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
        self.logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {self.cycle_interval}—Å")
    
    async def start(self) -> None:
        """üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        if not await self.trading_service.initialize():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å")
        
        self.is_running = True
        
        try:
            await self._main_loop()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            raise
        finally:
            await self.stop()
    
    async def stop(self) -> None:
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            return
        
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        self.is_running = False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        await self.trading_service.shutdown()
        
        self.logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _main_loop(self) -> None:
        """üîÑ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        while self.is_running:
            cycle_start = datetime.now()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                health_status = await self.health_checker.check_health()
                
                if not health_status.get('overall_status') == 'healthy':
                    self.logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª")
                    await asyncio.sleep(self.cycle_interval)
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–∏–∫–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
                cycle_results = []
                for trading_pair in self.trading_pairs:
                    try:
                        result = await self.trading_service.execute_trading_cycle(trading_pair)
                        cycle_results.append({
                            'trading_pair': str(trading_pair),
                            'result': result,
                            'success': result.get('action') != 'error'
                        })
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        action = result.get('action', 'unknown')
                        reason = result.get('reason', 'No reason')
                        
                        if action == 'error':
                            self.logger.error(f"‚ùå {trading_pair}: {reason}")
                        elif action in ['buy', 'sell', 'emergency_exit']:
                            self.logger.info(f"üí± {trading_pair}: {action.upper()} - {reason}")
                        else:
                            self.logger.debug(f"üìä {trading_pair}: {action} - {reason}")
                        
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –¥–ª—è {trading_pair}: {e}")
                        cycle_results.append({
                            'trading_pair': str(trading_pair),
                            'result': {'action': 'error', 'reason': str(e)},
                            'success': False
                        })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_cycles += 1
                successful_pairs = sum(1 for r in cycle_results if r['success'])
                
                if successful_pairs == len(self.trading_pairs):
                    self.successful_cycles += 1
                else:
                    self.errors_count += 1
                
                self.last_cycle_time = cycle_start
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏–∫–ª–∞
                cycle_duration = (datetime.now() - cycle_start).total_seconds()
                self.logger.info(f"üîÑ –¶–∏–∫–ª #{self.total_cycles} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f}—Å, "
                               f"—É—Å–ø–µ—à–Ω–æ: {successful_pairs}/{len(self.trading_pairs)}")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.errors_count += 1
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            await asyncio.sleep(self.cycle_interval)
    
    async def execute_manual_cycle(self, trading_pair: TradingPair) -> Dict[str, Any]:
        """üéØ –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.logger.info(f"üéØ –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –¥–ª—è {trading_pair}")
        
        try:
            result = await self.trading_service.execute_trading_cycle(trading_pair)
            
            self.logger.info(f"‚úÖ –†—É—á–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('action', 'unknown')}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            return {
                'action': 'error',
                'reason': str(e),
                'error_type': type(e).__name__
            }
    
    def get_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        uptime_seconds = 0
        if self.last_cycle_time:
            uptime_seconds = int((datetime.now() - self.last_cycle_time).total_seconds())
        
        success_rate = 0.0
        if self.total_cycles > 0:
            success_rate = (self.successful_cycles / self.total_cycles) * 100
        
        return {
            'is_running': self.is_running,
            'trading_pairs_count': len(self.trading_pairs),
            'cycle_interval_seconds': self.cycle_interval,
            'total_cycles': self.total_cycles,
            'successful_cycles': self.successful_cycles,
            'errors_count': self.errors_count,
            'success_rate': round(success_rate, 2),
            'last_cycle_time': self.last_cycle_time.isoformat() if self.last_cycle_time else None,
            'uptime_seconds': uptime_seconds,
            'trading_service_status': self.trading_service.get_service_status()
        }
    
    def get_detailed_status(self) -> Dict[str, Any]:
        """üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        return {
            'orchestrator': self.get_status(),
            'trading_pairs': [str(pair) for pair in self.trading_pairs],
            'performance_metrics': {
                'avg_cycle_duration': self._calculate_avg_cycle_duration(),
                'cycles_per_hour': self._calculate_cycles_per_hour(),
                'error_rate': self._calculate_error_rate()
            }
        }
    
    def _calculate_avg_cycle_duration(self) -> float:
        """üìä –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏–∫–ª–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        return self.cycle_interval * 1.1  # –ü—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 10% –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    
    def _calculate_cycles_per_hour(self) -> float:
        """üìä –†–∞—Å—á–µ—Ç —Ü–∏–∫–ª–æ–≤ –≤ —á–∞—Å"""
        return 3600 / self.cycle_interval
    
    def _calculate_error_rate(self) -> float:
        """üìä –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—à–∏–±–æ–∫"""
        if self.total_cycles == 0:
            return 0.0
        return (self.errors_count / self.total_cycles) * 100


if __name__ == "__main__":
    print("üéº –¢–æ—Ä–≥–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
'''

        orchestrator_file = self.application_dir / "orchestrators" / "trading_orchestrator.py"
        orchestrator_file.write_text(orchestrator_content)
        self.logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω orchestrators/trading_orchestrator.py")