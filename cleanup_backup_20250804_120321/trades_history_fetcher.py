#!/usr/bin/env python3
"""üìä –°–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ —Å –±–∏—Ä–∂–∏ EXMO"""

import os
import json
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from config import TradingConfig
    from api_client import ExmoAPIClient
    from rate_limiter import RateLimitedAPIClient, RateLimiter
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã config.py, api_client.py –∏ rate_limiter.py –¥–æ—Å—Ç—É–ø–Ω—ã")
    exit(1)


@dataclass
class TradeRecord:
    """üìä –ó–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ"""
    trade_id: int
    order_id: int
    pair: str
    type: str  # 'buy' –∏–ª–∏ 'sell'
    quantity: float
    price: float
    amount: float  # quantity * price
    commission: float
    commission_currency: str
    date: datetime
    date_string: str
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            'trade_id': self.trade_id,
            'order_id': self.order_id,
            'pair': self.pair,
            'type': self.type,
            'quantity': self.quantity,
            'price': self.price,
            'amount': self.amount,
            'commission': self.commission,
            'commission_currency': self.commission_currency,
            'date': self.date_string,
            'timestamp': int(self.date.timestamp())
        }


class TradesHistoryFetcher:
    """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    
    def __init__(self, config: TradingConfig = None):
        self.config = config or TradingConfig()
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ —Å rate limiting
        api_client = ExmoAPIClient(self.config.API_KEY, self.config.API_SECRET)
        
        if getattr(self.config, 'RATE_LIMITER_ENABLED', True):
            rate_limiter = RateLimiter(30, 300)  # 30 –≤—ã–∑–æ–≤–æ–≤/–º–∏–Ω, 300/—á–∞—Å
            self.api = RateLimitedAPIClient(api_client, rate_limiter)
            self.logger.info("‚ö° Rate limiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.api = api_client
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs('data', exist_ok=True)
        os.makedirs('logs', exist_ok=True)
        
        self.logger.info("üìä TradesHistoryFetcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/trades_fetcher.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def get_user_trades(self, pair: str = None, limit: int = 1000) -> List[TradeRecord]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if pair is None:
            pair = self.config.get_pair()
        
        self.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –¥–ª—è {pair} (–ª–∏–º–∏—Ç: {limit})")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            if hasattr(self.api, 'get_user_trades'):
                response = self.api.get_user_trades(pair, limit)
            else:
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ API –∫–ª–∏–µ–Ω—Ç–∞
                response = self.api.get_trades(pair, limit)
            
            if not response:
                self.logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return []
            
            trades = []
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if isinstance(response, dict):
                if pair in response:
                    # –§–æ—Ä–º–∞—Ç: {pair: [trades]}
                    raw_trades = response[pair]
                elif 'result' in response and response['result']:
                    # –§–æ—Ä–º–∞—Ç: {result: True, data: [trades]}
                    raw_trades = response.get('data', response.get(pair, []))
                else:
                    # –ü—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
                    raw_trades = response
            elif isinstance(response, list):
                raw_trades = response
            else:
                self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(response)}")
                return []
            
            if not raw_trades:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API")
                return []
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–¥–µ–ª–∫—É
            for trade_data in raw_trades:
                try:
                    trade = self._parse_trade_data(trade_data, pair)
                    if trade:
                        trades.append(trade)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–∫–∏: {e}")
                    self.logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {trade_data}")
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
            return sorted(trades, key=lambda t: t.date, reverse=True)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return []
    
    def _parse_trade_data(self, trade_data: Dict[str, Any], pair: str) -> Optional[TradeRecord]:
        """üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        
        try:
            # –†–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            date_value = trade_data.get('date', trade_data.get('timestamp', trade_data.get('time')))
            
            if isinstance(date_value, str):
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                for date_format in ['%Y-%m-%d %H:%M:%S', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%d %H:%M:%S.%f']:
                    try:
                        date = datetime.strptime(date_value, date_format)
                        break
                    except ValueError:
                        continue
                else:
                    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_value}")
                    date = datetime.now()
            elif isinstance(date_value, (int, float)):
                # Unix timestamp
                date = datetime.fromtimestamp(date_value)
            else:
                date = datetime.now()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–¥–µ–ª–∫–µ
            trade = TradeRecord(
                trade_id=int(trade_data.get('trade_id', trade_data.get('id', 0))),
                order_id=int(trade_data.get('order_id', 0)),
                pair=pair,
                type=trade_data.get('type', 'unknown'),
                quantity=float(trade_data.get('quantity', trade_data.get('amount', 0))),
                price=float(trade_data.get('price', 0)),
                amount=float(trade_data.get('amount', trade_data.get('sum', 0))),
                commission=float(trade_data.get('commission', trade_data.get('fee', 0))),
                commission_currency=trade_data.get('commission_currency', 
                                                 trade_data.get('fee_currency', 'EUR')),
                date=date,
                date_string=date.strftime('%Y-%m-%d %H:%M:%S')
            )
            
            return trade
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–∫–∏: {e}")
            self.logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {trade_data}")
            return None
    
    def save_trades_to_json(self, trades: List[TradeRecord], filename: str = None) -> str:
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ JSON —Ñ–∞–π–ª"""
        
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"data/trades_history_{timestamp}.json"
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {
                'export_info': {
                    'timestamp': datetime.now().isoformat(),
                    'pair': self.config.get_pair(),
                    'total_trades': len(trades),
                    'date_range': {
                        'from': trades[-1].date_string if trades else None,
                        'to': trades[0].date_string if trades else None
                    },
                    'export_source': 'EXMO API',
                    'bot_version': 'DOGE Trading Bot v4.1'
                },
                'trades': [trade.to_dict() for trade in trades]
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            file_size = os.path.getsize(filename) / 1024  # –≤ KB
            self.logger.info(f"üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            self.logger.info(f"üìä –°–¥–µ–ª–æ–∫: {len(trades)}, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
            
            return filename
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
            return None
    
    def get_trades_statistics(self, trades: List[TradeRecord]) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º"""
        
        if not trades:
            return {'error': '–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
        buys = [t for t in trades if t.type == 'buy']
        sells = [t for t in trades if t.type == 'sell']
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'summary': {
                'total_trades': len(trades),
                'buy_trades': len(buys),
                'sell_trades': len(sells),
                'date_range': {
                    'from': trades[-1].date_string if trades else None,
                    'to': trades[0].date_string if trades else None
                }
            },
            'volumes': {
                'total_volume_crypto': sum(t.quantity for t in trades),
                'total_volume_fiat': sum(t.amount for t in trades),
                'buy_volume_crypto': sum(t.quantity for t in buys),
                'sell_volume_crypto': sum(t.quantity for t in sells),
                'buy_volume_fiat': sum(t.amount for t in buys),
                'sell_volume_fiat': sum(t.amount for t in sells)
            },
            'prices': {
                'min_price': min(t.price for t in trades) if trades else 0,
                'max_price': max(t.price for t in trades) if trades else 0,
                'avg_price': sum(t.price for t in trades) / len(trades) if trades else 0,
                'avg_buy_price': sum(t.price for t in buys) / len(buys) if buys else 0,
                'avg_sell_price': sum(t.price for t in sells) / len(sells) if sells else 0
            },
            'commissions': {
                'total_commission': sum(t.commission for t in trades),
                'avg_commission': sum(t.commission for t in trades) / len(trades) if trades else 0
            }
        }
        
        return stats
    
    def export_trades_csv(self, trades: List[TradeRecord], filename: str = None) -> str:
        """üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"data/trades_export_{timestamp}.csv"
        
        try:
            import csv
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    'Date', 'Type', 'Quantity', 'Price', 'Amount', 
                    'Commission', 'Trade_ID', 'Order_ID'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                for trade in trades:
                    writer.writerow({
                        'Date': trade.date_string,
                        'Type': trade.type,
                        'Quantity': trade.quantity,
                        'Price': trade.price,
                        'Amount': trade.amount,
                        'Commission': trade.commission,
                        'Trade_ID': trade.trade_id,
                        'Order_ID': trade.order_id
                    })
            
            self.logger.info(f"üìä CSV —ç–∫—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename
            
        except ImportError:
            self.logger.warning("‚ö†Ô∏è CSV –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –°–î–ï–õ–û–ö –° EXMO")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        fetcher = TradesHistoryFetcher()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"üìç –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {fetcher.config.get_pair()}")
        print(f"üîë API –∫–ª—é—á: {fetcher.config.API_KEY[:8]}...")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            limit = int(input("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000): ") or "1000")
        except ValueError:
            limit = 1000
        
        pair = input(f"üí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {fetcher.config.get_pair()}): ") or fetcher.config.get_pair()
        
        print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫...")
        print(f"   –ü–∞—Ä–∞: {pair}")
        print(f"   –õ–∏–º–∏—Ç: {limit}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
        trades = fetcher.get_user_trades(pair, limit)
        
        if not trades:
            print("‚ùå –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        json_file = fetcher.save_trades_to_json(trades)
        if json_file:
            print(f"üíæ JSON —Ñ–∞–π–ª: {json_file}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
        csv_file = fetcher.export_trades_csv(trades)
        if csv_file:
            print(f"üìä CSV —Ñ–∞–π–ª: {csv_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        stats = fetcher.get_trades_statistics(trades)
        
        if 'error' not in stats:
            print(f"   üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['summary']['total_trades']}")
            print(f"   üõí –ü–æ–∫—É–ø–æ–∫: {stats['summary']['buy_trades']}")
            print(f"   üíé –ü—Ä–æ–¥–∞–∂: {stats['summary']['sell_trades']}")
            print(f"   üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: {stats['volumes']['total_volume_fiat']:.2f} EUR")
            print(f"   üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['prices']['avg_price']:.8f}")
            print(f"   üí∏ –ö–æ–º–∏—Å—Å–∏–∏: {stats['commissions']['total_commission']:.4f}")
            
            if stats['summary']['buy_trades'] > 0:
                print(f"   üõí –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {stats['prices']['avg_buy_price']:.8f}")
            
            if stats['summary']['sell_trades'] > 0:
                print(f"   üíé –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {stats['prices']['avg_sell_price']:.8f}")
        
        print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")

if __name__ == "__main__":
    main()