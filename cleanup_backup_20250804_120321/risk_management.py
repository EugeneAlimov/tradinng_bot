import logging
import time
from typing import Tuple, Dict, Any
from datetime import datetime, timedelta


class RiskManager:
    """üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
        self.daily_losses = 0.0
        self.last_reset_date = datetime.now().date()
        self.total_trades_today = 0
        self.error_count = 0
        
        self.logger.info("üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def can_open_position(self, position_size: float, balance: float) -> bool:
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            if position_size > balance * self.config.POSITION_SIZE:
                self.logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size:.2f} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if balance < 5.0:  # –ú–∏–Ω–∏–º—É–º 5 EUR
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} EUR")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
            self._reset_daily_stats_if_needed()
            
            if self.daily_losses > balance * self.config.STOP_LOSS_PERCENT:
                self.logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å: {self.daily_losses:.2f} EUR")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def emergency_stop_check(self, balance: float) -> Tuple[bool, str]:
        """üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        
        try:
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._reset_daily_stats_if_needed()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å
            max_daily_loss = balance * self.config.STOP_LOSS_PERCENT
            if self.daily_losses >= max_daily_loss:
                return True, f"–î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ {self.daily_losses:.2f} >= –ª–∏–º–∏—Ç–∞ {max_daily_loss:.2f}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
            if self.error_count >= 10:
                return True, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {self.error_count}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            if balance < 1.0:
                return True, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} EUR"
            
            return False, "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return True, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
    
    def register_trade_result(self, profit_loss: float):
        """üìä –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏"""
        
        try:
            self._reset_daily_stats_if_needed()
            
            self.total_trades_today += 1
            
            if profit_loss < 0:
                self.daily_losses += abs(profit_loss)
                self.logger.info(f"üìâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É–±—ã—Ç–æ–∫: {profit_loss:.4f} EUR")
                self.logger.info(f"   –û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏ –∑–∞ –¥–µ–Ω—å: {self.daily_losses:.4f} EUR")
            else:
                self.logger.info(f"üìà –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–±—ã–ª—å: {profit_loss:.4f} EUR")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    def register_error(self):
        """‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏"""
        self.error_count += 1
        
        if self.error_count >= 5:
            self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {self.error_count}")
    
    def reset_error_count(self):
        """‚úÖ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"""
        self.error_count = 0
    
    def _reset_daily_stats_if_needed(self):
        """üîÑ –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è"""
        today = datetime.now().date()
        
        if today != self.last_reset_date:
            self.daily_losses = 0.0
            self.total_trades_today = 0
            self.last_reset_date = today
            self.logger.info("üîÑ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def get_risk_metrics(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–æ–≤"""
        self._reset_daily_stats_if_needed()
        
        return {
            'daily_losses': self.daily_losses,
            'total_trades_today': self.total_trades_today,
            'error_count': self.error_count,
            'last_reset_date': self.last_reset_date.isoformat()
        }
