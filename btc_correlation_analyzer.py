# btc_correlation_analyzer.py
"""
‚Çø –ü–ê–¢–ß 3: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å BTC
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –≤–æ –≤—Ä–µ–º—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ BTC
"""

import time
import logging
from typing import Dict, Any, List, Tuple, Optional
from collections import deque
import requests


class BTCCorrelationAnalyzer:
    """‚Çø –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –≤–ª–∏—è–Ω–∏—è BTC –Ω–∞ DOGE"""
    
    def __init__(self, config, api_service):
        self.config = config
        self.api_service = api_service
        self.logger = logging.getLogger(__name__)
        
        # üìä –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.btc_prices = deque(maxlen=30)     # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç–æ—á–µ–∫ BTC
        self.doge_prices = deque(maxlen=30)    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ç–æ—á–µ–∫ DOGE
        self.price_update_interval = 300       # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        self.last_update_time = 0
        
        # üö® –ü–æ—Ä–æ–≥–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.BTC_HIGH_VOLATILITY_THRESHOLD = 0.03  # 3% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å BTC
        self.BTC_CRASH_THRESHOLD = 0.05            # 5% –ø–∞–¥–µ–Ω–∏–µ BTC
        self.BTC_PUMP_THRESHOLD = 0.04             # 4% —Ä–æ—Å—Ç BTC
        
        # üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ BTC
        self.btc_status = {
            'trend': 'unknown',
            'volatility': 0.0,
            'last_change': 0.0,
            'allow_trading': True,
            'block_reason': ''
        }
        
        self.logger.info("‚Çø BTCCorrelationAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.BTC_HIGH_VOLATILITY_THRESHOLD*100:.0f}%")
        self.logger.info(f"   üìâ –ö—Ä–∞—Ö –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.BTC_CRASH_THRESHOLD*100:.0f}%")
    
    def update_btc_analysis(self) -> None:
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ BTC"""
        
        current_time = time.time()
        if current_time - self.last_update_time < self.price_update_interval:
            return  # –ï—â–µ —Ä–∞–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BTC
            btc_price = self._get_btc_price()
            if btc_price is None:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É DOGE
            doge_price = self._get_current_doge_price()
            if doge_price is None:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É DOGE")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä—ã
            self.btc_prices.append({
                'price': btc_price,
                'timestamp': current_time
            })
            
            self.doge_prices.append({
                'price': doge_price,
                'timestamp': current_time
            })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
            if len(self.btc_prices) >= 3:
                self._analyze_btc_impact()
            
            self.last_update_time = current_time
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BTC –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def can_trade_with_btc_conditions(self, operation_type: str = 'buy') -> Tuple[bool, str]:
        """‚Çø –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è BTC"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.update_btc_analysis()
        
        if not self.btc_status['allow_trading']:
            return False, f"BTC –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.btc_status['block_reason']}"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if operation_type == 'buy':
            # –î–ª—è –ø–æ–∫—É–ø–æ–∫ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è
            if self.btc_status['trend'] == 'bearish_strong':
                return False, "–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ BTC - –ø–æ–∫—É–ø–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
            
            if self.btc_status['volatility'] > self.BTC_HIGH_VOLATILITY_THRESHOLD:
                return False, f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å BTC: {self.btc_status['volatility']*100:.1f}%"
        
        elif operation_type == 'dca':
            # –î–ª—è DCA –µ—â–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è
            if self.btc_status['last_change'] < -0.02:  # BTC –ø–∞–¥–∞–µ—Ç –±–æ–ª—å—à–µ 2%
                return False, f"BTC –ø–∞–¥–∞–µ—Ç: {self.btc_status['last_change']*100:.1f}% - DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
            
            if self.btc_status['trend'] in ['bearish', 'bearish_strong']:
                return False, "–ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ BTC - DCA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"
        
        return True, "BTC —É—Å–ª–æ–≤–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"
    
    def _get_btc_price(self) -> Optional[float]:
        try:
            btc_eur_pair = f"BTC_{self.config.CURRENCY_2}"  # BTC_EUR

            #–∏—Å–ø–æ–ª—å–∑—É–µ–º get_current_price
            btc_price = self.api_service.get_current_price(btc_eur_pair)
            if btc_price and btc_price > 0:
                return btc_price

            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
            return self._get_btc_price_external()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC: {e}")
            return self._get_btc_price_external()

    def _get_btc_price_external(self) -> Optional[float]:
        """‚Çø –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã BTC –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price",
                params={"ids": "bitcoin", "vs_currencies": "eur"},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                return float(data['bitcoin']['eur'])
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API –¥–ª—è BTC: {e}")
        
        return None
    
    def _get_current_doge_price(self) -> Optional[float]:
        """üêï –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã DOGE"""

        try:
            pair = f"{self.config.CURRENCY_1}_{self.config.CURRENCY_2}"

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º get_current_price –≤–º–µ—Å—Ç–æ get_ticker
            doge_price = self.api_service.get_current_price(pair)
            if doge_price and doge_price > 0:
                return doge_price

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã DOGE: {e}")

        return None
    
    def _analyze_btc_impact(self) -> None:
        """üìä –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è BTC –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
        
        if len(self.btc_prices) < 3:
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        latest_btc = self.btc_prices[-1]['price']
        prev_btc = self.btc_prices[-2]['price']
        older_btc = self.btc_prices[-3]['price']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        short_change = (latest_btc - prev_btc) / prev_btc
        long_change = (latest_btc - older_btc) / older_btc
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if len(self.btc_prices) >= 5:
            recent_prices = [p['price'] for p in list(self.btc_prices)[-5:]]
            changes = [(recent_prices[i] - recent_prices[i-1]) / recent_prices[i-1] 
                      for i in range(1, len(recent_prices))]
            volatility = self._calculate_std_dev(changes)
        else:
            volatility = abs(short_change)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if long_change > 0.02:
            trend = 'bullish_strong'
        elif long_change > 0.005:
            trend = 'bullish'
        elif long_change < -0.02:
            trend = 'bearish_strong'
        elif long_change < -0.005:
            trend = 'bearish'
        else:
            trend = 'sideways'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.btc_status.update({
            'trend': trend,
            'volatility': volatility,
            'last_change': short_change,
            'allow_trading': True,
            'block_reason': ''
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if volatility > self.BTC_HIGH_VOLATILITY_THRESHOLD:
            self.btc_status['allow_trading'] = False
            self.btc_status['block_reason'] = f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility*100:.1f}%"
        
        elif short_change < -self.BTC_CRASH_THRESHOLD:
            self.btc_status['allow_trading'] = False
            self.btc_status['block_reason'] = f"–ö—Ä–∞—Ö BTC: {short_change*100:.1f}%"
        
        elif short_change > self.BTC_PUMP_THRESHOLD:
            self.btc_status['allow_trading'] = False
            self.btc_status['block_reason'] = f"–ü–∞–º–ø BTC: {short_change*100:.1f}%"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.logger.info(f"‚Çø BTC –ê–ù–ê–õ–ò–ó:")
        self.logger.info(f"   üí∞ –¶–µ–Ω–∞: {latest_btc:.0f} EUR")
        self.logger.info(f"   üìä –¢—Ä–µ–Ω–¥: {trend}")
        self.logger.info(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {short_change*100:.2f}%")
        self.logger.info(f"   üåä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility*100:.2f}%")
        self.logger.info(f"   üéØ –¢–æ—Ä–≥–æ–≤–ª—è: {'‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê' if self.btc_status['allow_trading'] else 'üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê'}")
        
        if not self.btc_status['allow_trading']:
            self.logger.warning(f"   üö® –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {self.btc_status['block_reason']}")
    
    def _calculate_std_dev(self, values: List[float]) -> float:
        """üìä –†–∞—Å—á–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        if len(values) < 2:
            return 0.0
        
        mean = sum(values) / len(values)
        variance = sum((x - mean) ** 2 for x in values) / len(values)
        return variance ** 0.5
    
    def get_btc_status(self) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ BTC"""
        return self.btc_status.copy()
    
    def force_update_btc_analysis(self) -> None:
        """üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ BTC"""
        self.last_update_time = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.update_btc_analysis()