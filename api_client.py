import hmac
import hashlib
import time
import json
import requests
import logging
from typing import Dict, Any, Optional
from config import TradingConfig


class ExmoAPIError(Exception):
    pass


class ExmoAPIClient:
    def __init__(self, config: TradingConfig):
        self.config = config
        self.api_secret = bytes(config.API_SECRET, encoding='utf-8')
        self.logger = logging.getLogger(__name__)

        # üîÑ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.session = requests.Session()
        self.session.headers.update({
            "Content-type": "application/x-www-form-urlencoded",
            "User-Agent": "DOGE-Trading-Bot/1.0"
        })

        # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry –∏ timeout
        self.max_retries = 3
        self.retry_delay = 2
        self.timeout = 30

        self.logger.info("üîó API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å retry –ª–æ–≥–∏–∫–æ–π")

    def _create_signature(self, data: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        H = hmac.new(key=self.api_secret, digestmod=hashlib.sha512)
        H.update(data.encode('utf-8'))
        return H.hexdigest()

    def _make_request_with_retry(self, method: str, params: Dict[str, Any] = None) -> Dict[str, Any]:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        if params is None:
            params = {}

        last_exception = None

        for attempt in range(self.max_retries):
            try:
                return self._make_single_request(method, params)

            except (requests.exceptions.ConnectionError,
                    requests.exceptions.Timeout,
                    requests.exceptions.RequestException) as e:

                last_exception = e
                attempt_num = attempt + 1

                if attempt_num < self.max_retries:
                    delay = self.retry_delay * attempt_num  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt_num} –Ω–µ—É–¥–∞—á–Ω–∞: {str(e)}")
                    self.logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay)
                else:
                    self.logger.error(f"‚ùå –í—Å–µ {self.max_retries} –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã")

            except ExmoAPIError as e:
                # API –æ—à–∏–±–∫–∏ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º
                self.logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {str(e)}")
                raise e

            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Ä–µ—Ç—Ä–∞–∏–º
                last_exception = e
                attempt_num = attempt + 1

                if attempt_num < self.max_retries:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt_num}: {str(e)}")
                    time.sleep(self.retry_delay)
                else:
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        raise ExmoAPIError(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {str(last_exception)}")

    def _make_single_request(self, method: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """üåê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        params['nonce'] = int(round(time.time() * 1000))
        payload = self._encode_params(params)

        sign = self._create_signature(payload)
        headers = {
            "Key": self.config.API_KEY,
            "Sign": sign
        }

        url = f"https://{self.config.API_URL}/{self.config.API_VERSION}/{method}"

        try:
            response = self.session.post(
                url,
                data=payload,
                headers=headers,
                timeout=self.timeout
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–º JSON
            try:
                obj = response.json()
            except json.JSONDecodeError as e:
                raise ExmoAPIError(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç: {str(e)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—à–∏–±–∫–∏
            if isinstance(obj, dict) and 'error' in obj and obj['error']:
                raise ExmoAPIError(f"API Error: {obj['error']}")

            return obj

        except requests.exceptions.Timeout:
            raise ExmoAPIError(f"Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {method}")
        except requests.exceptions.ConnectionError:
            raise ExmoAPIError(f"Connection error –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {method}")
        except requests.exceptions.HTTPError as e:
            raise ExmoAPIError(f"HTTP {e.response.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {method}")

    def _encode_params(self, params: Dict[str, Any]) -> str:
        """üìù –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–¥–∏—Ä—É–µ–º
        encoded_params = []
        for key, value in params.items():
            if value is not None:
                encoded_params.append(f"{key}={value}")
        return "&".join(encoded_params)

    def get_user_info(self) -> Dict[str, Any]:
        """üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        return self._make_request_with_retry('user_info')

    def get_open_orders(self) -> Dict[str, Any]:
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        return self._make_request_with_retry('user_open_orders')

    def create_order(self, pair: str, quantity: float, price: float, order_type: str) -> Dict[str, Any]:
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        params = {
            'pair': pair,
            'quantity': quantity,
            'price': price,
            'type': order_type
        }

        self.logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä: {order_type} {quantity} {pair} –ø–æ {price}")
        result = self._make_request_with_retry('order_create', params)

        if result.get('result'):
            self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {result.get('order_id')}")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result}")

        return result

    def cancel_order(self, order_id: int) -> Dict[str, Any]:
        """‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞"""
        self.logger.info(f"‚ùå –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä: {order_id}")
        result = self._make_request_with_retry('order_cancel', {'order_id': order_id})

        if result.get('result'):
            self.logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {result}")

        return result

    def get_trades(self, pair: str) -> Dict[str, Any]:
        """üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–µ"""
        return self._make_request_with_retry('trades', {'pair': pair})

    def get_user_trades(self, pair: str, limit: int = 100) -> Dict[str, Any]:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        params = {
            'pair': pair,
            'limit': limit
        }
        return self._make_request_with_retry('user_trades', params)

    def get_order_trades(self, order_id: int) -> Dict[str, Any]:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É"""
        return self._make_request_with_retry('order_trades', {'order_id': order_id})

    def get_pair_settings(self) -> Dict[str, Any]:
        """‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            url = f"https://{self.config.API_URL}/{self.config.API_VERSION}/pair_settings"
            response = self.session.get(url, timeout=self.timeout)
            response.raise_for_status()
            return response.json()

        except Exception as e:
            raise ExmoAPIError(f"Error getting pair settings: {str(e)}")

    def check_connection(self) -> bool:
        """üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
        try:
            self.get_pair_settings()
            self.logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {str(e)}")
            return False

    def close(self):
        """üîö –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            self.session.close()
            self.logger.info("üîö API —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    def __enter__(self):
        """üîó Context manager –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """üîö Context manager –ø–æ–¥–¥–µ—Ä–∂–∫–∞"""
        self.close()